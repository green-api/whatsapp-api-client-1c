// BSLLS:DuplicateStringLiteral-off
// BSLLS:LatinAndCyrillicSymbolInWord-off
// BSLLS:MissingTemporaryFileDeletion-off
// BSLLS:ServerSideExportFormMethod-off
// BSLLS:CompilationDirectiveLost-off
// BSLLS:MissingParameterDescription-off

#Область API

#Область Аккаунт

&НаСервере
Процедура КомандаПолучитьНастройкиАккаунтаСервер()
	Консоль = СтруктураВJSONСтроку(ОбработкаОбъект().ПолучитьНастройкиАккаунта());
КонецПроцедуры

&НаСервере
Процедура КомандаПолучитьСостояниеАккаунта()
	Консоль = СтруктураВJSONСтроку(ОбработкаОбъект().ПолучитьСостояниеАккаунта());
КонецПроцедуры

&НаСервере
Процедура КомандаПерезапуститьАккаунт()
	
	Консоль = СтруктураВJSONСтроку(ОбработкаОбъект().ПерезапуститьАккаунт());
	
КонецПроцедуры

&НаСервере
Процедура КомандаРазлогинитьАккаунт()
	
	Консоль = СтруктураВJSONСтроку(ОбработкаОбъект().РазлогинитьАккаунт());
	
КонецПроцедуры

&НаСервере
Процедура КомандаПолучитьQRКод()
	
	Ответ = ОбработкаОбъект().ПолучитьQRКод();
	Консоль = СтруктураВJSONСтроку(Ответ);
	СтатусQRКода = Ответ.type;
	Если Ответ.type = "qrCode" Тогда
		QRКод = ПолучитьТекстИзМакета("QRМакет");
		QRКод = СтрЗаменить(QRКод, "%QR_DATA%", Ответ.message);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область Журналы     

&НаСервере
Процедура КомандаПолучитьЖурналВходящихСообщений()
	Консоль = СтруктураВJSONСтроку(ОбработкаОбъект().ПолучитьЖурналВходящихСообщений());
КонецПроцедуры

&НаСервере
Процедура КомандаПолучитьЖурналОтправленныхСообщений()
	Консоль = СтруктураВJSONСтроку(ОбработкаОбъект().ПолучитьЖурналОтправленныхСообщений());
КонецПроцедуры

#КонецОбласти


#Область Очереди

&НаСервере
Процедура КомандаПолучитьОчередьСообщенийКОтправке()
	Консоль = СтруктураВJSONСтроку(ОбработкаОбъект().ПолучитьОчередьСообщенийКОтправке());
КонецПроцедуры

&НаСервере
Процедура КомандаОчиститьОчередьСообщенийКОтправке()
	Консоль = СтруктураВJSONСтроку(ОбработкаОбъект().ПолучитьОчередьСообщенийКОтправке());
КонецПроцедуры

#КонецОбласти


#Область Группы    

&НаСервере
Процедура КомандаСоздатьГруппу()
	
	Консоль = СтруктураВJSONСтроку(ОбработкаОбъект().СоздатьГруппу(ПараметрИмяГруппы, ЗначениеВМассив(ПараметрНомерТелефона)));
	
КонецПроцедуры

&НаСервере
Процедура КомандаИзменитьИмяГруппы()
	
	Консоль = СтруктураВJSONСтроку(ОбработкаОбъект().ИзменитьИмяГруппы(ПараметрИдГруппы, ПараметрИмяГруппы));
	
КонецПроцедуры

&НаСервере
Процедура КомандаПолучитьИнформациюОГруппе()
	
	Консоль = СтруктураВJSONСтроку(ОбработкаОбъект().ПолучитьИнформациюОГруппе(ПараметрИдГруппы));
	
КонецПроцедуры

&НаСервере
Процедура КомандаДобавитьУчастникаВГруппу()

	Консоль = СтруктураВJSONСтроку(ОбработкаОбъект().ДобавитьУчастникаВГруппу(ПараметрИдГруппы, ПараметрИдУчастника));

КонецПроцедуры

&НаСервере
Процедура КомандаУдалитьУчастникаИзГруппы()

	Консоль = СтруктураВJSONСтроку(ОбработкаОбъект().УдалитьУчастникаИзГруппы(ПараметрИдГруппы, ПараметрИдУчастника));

КонецПроцедуры

&НаСервере
Процедура КомандаНазначитьПраваАдминистратораГруппы()

	Консоль = СтруктураВJSONСтроку(ОбработкаОбъект().НазначитьПраваАдминистратораГруппы(ПараметрИдГруппы, ПараметрИдУчастника));

КонецПроцедуры

&НаСервере
Процедура КомандаОтозватьПраваАдминистратораГруппы()

	Консоль = СтруктураВJSONСтроку(ОбработкаОбъект().ОтозватьПраваАдминистратораГруппы(ПараметрИдГруппы, ПараметрИдУчастника));

КонецПроцедуры

&НаСервере
Процедура КомандаВыйтиИзГруппы()

	Консоль = СтруктураВJSONСтроку(ОбработкаОбъект().ВыйтиИзГруппы(ПараметрИдГруппы));

КонецПроцедуры

#КонецОбласти


#Область ОтметкаПрочтения

Процедура КомандаОтметитьЧатПрочитанным()

	Консоль = СтруктураВJSONСтроку(ОбработкаОбъект().ОтметитьЧатПрочитанным(ПараметрИдЧата, ПараметрИдСообщения));

КонецПроцедуры

#КонецОбласти


#Область СервисныеМетоды   

&НаСервере
Процедура КомандаПроверитьНаличиеWhatsApp()

	Консоль = СтруктураВJSONСтроку(ОбработкаОбъект().ПроверитьНаличиеWhatsApp(Число(ПараметрНомерТелефона)));

КонецПроцедуры

&НаСервере
Процедура КомандаПолучитьАватарКонтакта()

	Консоль = СтруктураВJSONСтроку(ОбработкаОбъект().ПолучитьАватарКонтакта(ПараметрИдЧата));

КонецПроцедуры

&НаСервере
Процедура КомандаПолучитьКонтакты()
	
	Консоль = СтруктураВJSONСтроку(ОбработкаОбъект().ПолучитьКонтакты());

КонецПроцедуры

#КонецОбласти

#КонецОбласти       


#Область HttpКлиент

Функция ОтправитьФайлPOSTЗапрос(Хост, Адрес, Заголовки, ТелоЗапроса)
	
	Сертификат = Новый ЗащищенноеСоединениеOpenSSL();
	Соединение = Новый HTTPСоединение(Хост, , , , , 60, Сертификат);
	
	ВебЗапрос = Новый HTTPЗапрос(Адрес, Заголовки);
	ВебЗапрос.УстановитьТелоИзДвоичныхДанных(ТелоЗапроса);
	
	Ответ = Соединение.ОтправитьДляОбработки(ВебЗапрос);
	Если Ответ.КодСостояния = 200 Тогда 
		Чтение = Новый ЧтениеJSON();
		Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ПрочитанныйОтвет = ПрочитатьJSON(Чтение);
		Чтение.Закрыть(); Возврат ПрочитанныйОтвет;
	Иначе
		ВызватьИсключение 	Ответ.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
КонецФункции

Функция ОтправитьGETЗапрос(Хост, Адрес, Защищенное)
	
	Если Защищенное Тогда
		
		Сертификат = Новый ЗащищенноеСоединениеOpenSSL();
		Соединение = Новый HTTPСоединение(Хост, , , , , 60, Сертификат);
		
	Иначе
		
		Соединение = Новый HTTPСоединение(Хост, , , , , 60);
		
	КонецЕсли;
	
	ВебЗапрос = Новый HTTPЗапрос(Адрес);
	Ответ = Соединение.Получить(ВебЗапрос);
	Если Ответ.КодСостояния = 200 Тогда
		ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
		Если Не ПустаяСтрока(ТелоОтвета) Тогда
			Чтение = Новый ЧтениеJSON();
			Чтение.УстановитьСтроку(ТелоОтвета);
			ПрочитанныйОтвет = ПрочитатьJSON(Чтение);
			Чтение.Закрыть();
			Возврат ПрочитанныйОтвет;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		ТекстОшибки = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		ВызватьИсключение ПодставитьПараметрыВСтроку("Сервер вернул статус %1. 
		|%2", Ответ.КодСостояния, ТекстОшибки);
	КонецЕсли;
	
КонецФункции

Функция ОтправитьPOSTЗапрос(Хост, Адрес, Тело)
	
	Сертификат = Новый ЗащищенноеСоединениеOpenSSL();
	Соединение = Новый HTTPСоединение(Хост, , , , , 60, Сертификат);
	
	ВебЗапрос = Новый HTTPЗапрос(Адрес);
	ВебЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	
	ВебЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ = Соединение.ОтправитьДляОбработки(ВебЗапрос);
	Если Ответ.КодСостояния = 200 Тогда
		Чтение = Новый ЧтениеJSON();
		Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ПрочитанныйОтвет = ПрочитатьJSON(Чтение);
		Чтение.Закрыть();
		Возврат ПрочитанныйОтвет;
	Иначе
		ТекстОшибки = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		ВызватьИсключение ПодставитьПараметрыВСтроку("Сервер вернул статус %1. 
		|%2", Ответ.КодСостояния, ТекстОшибки);
	КонецЕсли;
	
КонецФункции

Функция ОтправитьDELETEЗапрос(Хост, Адрес, Защищенное)
	
	Если Защищенное Тогда
		
		Сертификат = Новый ЗащищенноеСоединениеOpenSSL();
		Соединение = Новый HTTPСоединение(Хост, , , , , 60, Сертификат);
		
	Иначе
		
		Соединение = Новый HTTPСоединение(Хост, , , , , 60);
		
	КонецЕсли;
	
	ВебЗапрос = Новый HTTPЗапрос(Адрес);
	Ответ = Соединение.ВызватьHTTPМетод("DELETE", ВебЗапрос);
	Если Ответ.КодСостояния = 200 Тогда
		Чтение = Новый ЧтениеJSON();
		Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ПрочитанныйОтвет = ПрочитатьJSON(Чтение);
		Чтение.Закрыть();
		Возврат ПрочитанныйОтвет;
	Иначе
		ТекстОшибки = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		ВызватьИсключение ПодставитьПараметрыВСтроку("Сервер вернул статус %1. 
		|%2", Ответ.КодСостояния, ТекстОшибки);
	КонецЕсли;
	
КонецФункции

// РАБОТА С FORM-DATA

Функция ПараметрFormData(ИмяСообщения, Текст)
	Поток = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(Поток);
	// Заголовки
	ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""" + ИмяСообщения + """");
	ЗаписьДанных.ЗаписатьСтроку("");
	// Тело
	ЗаписьДанных.ЗаписатьСтроку(Текст);
	ЗаписьДанных.Закрыть();
	Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
КонецФункции

Функция ФайлFormData(ИмяСообщения, ПутьКФайлу, ДвоичныеДанные)
	
	Файл = Новый Файл(ПутьКФайлу);
	Если Не Файл.Существует() Тогда
		ВызватьИсключение "Файл не существует! Адрес: " +  ПутьКФайлу;
	КонецЕсли;
	
	
	Поток = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(Поток);
	// Заголовки
	ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""" + ИмяСообщения + """; filename=""" + Файл.Имя + """");
	ЗаписьДанных.ЗаписатьСтроку("Content-Type: " + ПолучитьMimeTypeПоРасширению(Файл.Расширение));
	ЗаписьДанных.ЗаписатьСтроку("");
	// Тело
	ЗаписьДанных.Записать(ДвоичныеДанные);
	ЗаписьДанных.Закрыть();

	Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция УстановитьНастройкуСервиса(Ключ, Значение) Экспорт
	
	Инстанс = Объект.IdInstance;
	Токен = Объект.ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить(Ключ, Значение);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Ответ = ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "setSettings"), Тело);
	Возврат Ответ.saveSettings;
	
КонецФункции

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры,
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение,
//  Строка   - текстовая строка с подставленными параметрами.
//
// Пример,
//  ПодставитьПараметрыВСтроку(НСтр("ru="%1 пошел в %2""), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
//
// Примечание,
//  В случаях, когда число используемых параметров в строке совпадает с числом переданных для подстановки параметров,
//  рекомендуется использовать функцию платформы СтрШаблон.
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	
	Возврат СтрокаПодстановки;
КонецФункции

Функция ХостПоУмолчанию() Экспорт
	Возврат "api.green-api.com";
КонецФункции

Функция ХостВебхуковПоУмолчанию() Экспорт
	Возврат "https://webhook.green-api.com";
КонецФункции

Функция URLМетодаСервиса(Инстанс, Токен, Метод)
	Возврат ПодставитьПараметрыВСтроку("waInstance%1/%2/%3", Инстанс, Метод, Токен);
КонецФункции

Функция РазбитьURL(УРЛ)
	ЧастиУРЛ = СтрРазделить(УРЛ, "//", Ложь);
	Хост = ЧастиУРЛ[1];
	ЧастиУРЛ.Удалить(0); // протокол https
	ЧастиУРЛ.Удалить(0); // имя хоста
	ОтносительныйАдрес = СтрСоединить(ЧастиУРЛ, "/");
	
	Возврат Новый Структура("Хост, ОтносительныйАдрес", Хост, ОтносительныйАдрес);
	
КонецФункции

Функция ПараметрИдЧата(Телефон)
	Возврат Формат(Число(Телефон), "ЧГ=") + "@c.us"
КонецФункции

Функция ВерсияОбработки() Экспорт
	Возврат "Green API v0.0.36";
КонецФункции

Функция УстановитьНастройкиСервисаПоДефолту() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("webhookUrl", ХостВебхуковПоУмолчанию());
	Структура.Вставить("incomingWebhook", "yes");
	Структура.Вставить("outgoingWebhook", "yes");
	Структура.Вставить("deviceWebhook", "yes");
	Структура.Вставить("stateWebhook", "yes");
	
	Возврат ОбработкаОбъект().УстановитьНастройкиАккаунта(Структура).saveSettings;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьЗапускПриложенияGR(КодВозврата, ДополнительныеПараметры) Экспорт
	
	// Действия не требуются
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучитьСообщениеЧерезВебхук() Экспорт
	ПолучитьСообщениеЧерезВебхукСервер();
	СтатусПолучениеСообщения = "";
КонецПроцедуры

&НаСервере
Процедура ВыбратьСсылкуДляОтправкиСервер(АдресФайла, ИмяФайла)
	
	Если ПереключательТипаЧата = 1 Тогда
		Ответ = ОбработкаОбъект().ОтправитьВидеоАудиоИзображениеДокументПоURL(ИдЧата, АдресФайла, ИмяФайла, ТекстСообщения);	
	Иначе
		Ответ = ОбработкаОбъект().ОтправитьВидеоАудиоИзображениеДокументПоURL(НомерТелефона, АдресФайла, ИмяФайла, ТекстСообщения);
	КонецЕсли;
	Сообщить("Файл отправлен успешно. idMessage=" + Ответ.idMessage);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлДляОтправки(ВыбранныеФайлы, ДопПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Или ВыбранныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ВыбранныеФайлы[0]);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл.ПолноеИмя));
	
	ВыбратьФайлДляОтправкиСервер(АдресХранилища, Файл.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьФайлДляОтправкиСервер(АдресХранилища, ИмяФайла)
	
	ИмяВременногоФайла = КаталогВременныхФайлов() + ИмяФайла;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	Если ПереключательТипаЧата = 1 Тогда
		Ответ = ОбработкаОбъект().ОтправитьВидеоАудиоИзображениеДокумент(ИдЧата, ИмяВременногоФайла, ТекстСообщения);
	Иначе
		Ответ = ОбработкаОбъект().ОтправитьВидеоАудиоИзображениеДокумент(НомерТелефона, ИмяВременногоФайла, ТекстСообщения);
	КонецЕсли;
	Сообщить("Файл отправлен успешно. idMessage=" + Ответ.idMessage);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФотоДляАватара(ВыбранныеФайлы, ДопПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Или ВыбранныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыбратьФотоДляАватараСервер(ВыбранныеФайлы[0]);
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьФотоДляАватараСервер(ИмяФайла)
	
	Ответ = ОбработкаОбъект().УстановитьФотоПрофиля(ИмяФайла);
	Сообщить("Фото установлено. setProfilePicture=" + Ответ.setProfilePicture);
	
КонецПроцедуры

&НаСервере
Процедура ПолучатьВходящиеУведомленияПриИзмененииСервер()
	
	Если ПолучатьВходящиеУведомления Тогда
		webhookUrl = ОбработкаОбъект().ХостВебхуковПоУмолчанию();
	Иначе
		webhookUrl = "";
	КонецЕсли;
	
	НастройкиСохранены = ОбработкаОбъект().УстановитьНастройкуСервиса("webhookUrl", webhookUrl);
	ОбновитьСтатусСервиса();
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьСообщениеWhatsApp()
	Если ПереключательТипаЧата = 1 Тогда
		Ответ = ОбработкаОбъект().ОтправитьТекстВГруппу(ИдЧата, ТекстСообщения);
	Иначе
		Ответ = ОбработкаОбъект().ОтправитьТекст(НомерТелефона, ТекстСообщения);
	КонецЕсли;
	Сообщить("Сообщение отправлено успешно. idMessage=" + Ответ.idMessage);
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусСервиса()
	
	Если Не ЭтотОбъект.ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СтатусСервиса = ОбработкаОбъект().ПолучитьСтатусСервиса();
	
	Если СтатусСервиса = НРег("authorized") Тогда
		НастройкиСервиса = ОбработкаОбъект().ПолучитьНастройкиАккаунта();

		ПолучатьВходящиеУведомления = ЗначениеЗаполнено(НастройкиСервиса.webhookUrl) И НастройкиСервиса.webhookUrl = ОбработкаОбъект().ХостВебхуковПоУмолчанию();
		webhookUrl = НастройкиСервиса.webhookUrl;
		ПолучатьВходящиеСообщенияИФайлы = НастройкиСервиса.incomingWebhook = "yes";
		ПолучатьСтатусыОтправленныхСообщений = НастройкиСервиса.outgoingWebhook = "yes";
		ПолучатьУведомленииОСостоянииТелефона = НастройкиСервиса.deviceWebhook = "yes";
		//ПолучатьУведомленияОСостоянииАккаунта = НастройкиСервиса.stateWebhook = "yes";
		ОтмечатьВходящиеСообщенияПрочитанными = НастройкиСервиса.markIncomingMessagesReaded = "yes";
		ИнтервалОтправкиСообщений = Макс(НастройкиСервиса.delaySendMessagesMilliseconds, ИнтервалОтправкиСообщений);
		
		ЕстьНестадантныенастройки = Не (ЗначениеЗаполнено(НастройкиСервиса.webhookUrl) И НастройкиСервиса.webhookUrl = ОбработкаОбъект().ХостВебхуковПоУмолчанию());
		Элементы.ДеталиПредупреждениеСтандартныеНастройки.Видимость = ЕстьНестадантныенастройки;
		Элементы.ПолучатьВходящиеУведомления.Видимость = Не ЕстьНестадантныенастройки;
		Элементы.ДеталиНастройкиУведомлений.Видимость = Не ЕстьНестадантныенастройки;
		Элементы.ГруппаНестандартныеНастройки.Видимость = ЕстьНестадантныенастройки;
		Элементы.ДеталиПредупреждениеСтандартныеНастройки.Видимость = ЕстьНестадантныенастройки;
		Элементы.ДекорацияНастройкиНедоступны.Видимость = Ложь;
	Иначе
		Элементы.ДеталиПредупреждениеСтандартныеНастройки.Видимость = Ложь;
		Элементы.ПолучатьВходящиеУведомления.Видимость = Ложь;
		Элементы.ДеталиНастройкиУведомлений.Видимость = Ложь;
		Элементы.ГруппаНестандартныеНастройки.Видимость = Ложь;
		Элементы.ДекорацияНастройкиНедоступны.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПоказСтандартныхНастроек(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = "Установить стандартные настройки" Тогда
		УстановитьНастройкиСервисаПоДефолтуСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьНастройки()
	
	ТекстСообщения = "Hello world!";
	ЭтотОбъект.Заголовок = ОбработкаОбъект().ВерсияОбработки();
	ИнтервалОтправкиСообщений = 500;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстИзМакета(ИмяМакета)
	Об = ОбработкаОбъект();
	ОбластьМакета = Об.ПолучитьМакет(ИмяМакета);
	Возврат ОбластьМакета.ТекущаяОбласть.Текст;
КонецФункции

&НаСервере
Функция ОбработкаОбъект() 
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаСервере
Процедура ПолучатьВходящиеСообщенияИФайлыПриИзмененииСервер()
	
	НастройкиСохранены = ОбработкаОбъект().УстановитьНастройкуСервиса("incomingWebhook", 
		? (ПолучатьВходящиеСообщенияИФайлы, "yes", "no"));
	
КонецПроцедуры

&НаСервере
Процедура ПолучатьСтатусыОтправленныхСообщенийПриИзмененииСервер()
	
	НастройкиСохранены = ОбработкаОбъект().УстановитьНастройкуСервиса("outgoingWebhook", 
		? (ПолучатьВходящиеСообщенияИФайлы, "yes", "no"));
	
КонецПроцедуры

&НаСервере
Процедура ПолучатьУведомленииОСостоянииТелефонаПриИзмененииСервер()
	
	НастройкиСохранены = ОбработкаОбъект().УстановитьНастройкуСервиса("deviceWebhook", 
		? (ПолучатьВходящиеСообщенияИФайлы, "yes", "no"));
	
КонецПроцедуры

&НаСервере
Процедура ПолучатьУведомленияОСостоянииАккаунтаПриИзмененииСервер()
	
	НастройкиСохранены = ОбработкаОбъект().УстановитьНастройкуСервиса("stateWebhook", 
		? (ПолучатьВходящиеСообщенияИФайлы, "yes", "no"));
	
КонецПроцедуры

&НаСервере
Процедура ОтмечатьВходящиеСообщенияПрочитаннымиПриИзмененииСервер()
	
	НастройкиСохранены = ОбработкаОбъект().УстановитьНастройкуСервиса("markIncomingMessagesReaded", 
		? (ОтмечатьВходящиеСообщенияПрочитанными, "yes", "no"));
	
КонецПроцедуры

&НаСервере
Процедура ИнтервалОтправкиСообщенийПриИзмененииСервер()
	
	НастройкиСохранены = ОбработкаОбъект().УстановитьНастройкуСервиса("delaySendMessagesMilliseconds", ИнтервалОтправкиСообщений);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСообщениеЧерезВебхукСервер()
	
	ОбработкаОбъект = ОбработкаОбъект();
	ОбработкаОбъект.ПолучитьСообщение();
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	Элементы.ПолученФайл.Видимость = ЗначениеЗаполнено(Объект.ПолученФайл); 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиСервисаПоДефолтуСервер()
	
	НастройкиСохранены = ОбработкаОбъект().УстановитьНастройкиСервисаПоДефолту();
	ОбновитьСтатусСервиса();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкуСервисаСервер()
	
	НастройкиСохранены = ОбработкаОбъект().УстановитьНастройкуСервиса("webhookUrl", ОбработкаОбъект().ХостВебхуковПоУмолчанию());
	ОбновитьСтатусСервиса();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученФайлОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Объект.ПолученФайл) Тогда
		Оповещение = Новый ОписаниеОповещения("ЗавершитьЗапускПриложенияGR", ЭтотОбъект);	
		НачатьЗапускПриложения(Оповещение, Объект.ПолученФайл);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СсылкаФорматВходящихУведомленийНажатие(Элемент)
	Оповещение = Новый ОписаниеОповещения("ЗавершитьЗапускПриложенияGR", ЭтотОбъект);
	НачатьЗапускПриложения(Оповещение, "https://green-api.com/docs/api/receiving/notifications-format/");
КонецПроцедуры

&НаКлиенте
Процедура СсылкаПолучитьУведомлениеНажатие(Элемент)
	Оповещение = Новый ОписаниеОповещения("ЗавершитьЗапускПриложенияGR", ЭтотОбъект);	
	НачатьЗапускПриложения(Оповещение, "https://green-api.com/docs/api/receiving/technology-http-api/ReceiveNotification/");
КонецПроцедуры

&НаКлиенте
Процедура СсылкаУдалитьУведомлениеНажатие(Элемент)
	Оповещение = Новый ОписаниеОповещения("ЗавершитьЗапускПриложенияGR", ЭтотОбъект);
	НачатьЗапускПриложения(Оповещение, "https://green-api.com/docs/api/receiving/technology-http-api/DeleteNotification/");
КонецПроцедуры

&НаКлиенте
Процедура ПолученФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПолноеИмяФайла = СтрЗаменить(Объект.ПолученФайл, "\", "//");
	КаталогФайла = Лев(ПолноеИмяФайла, СтрНайти(ПолноеИмяФайла, "//", НаправлениеПоиска.СКонца));
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ЗавершитьЗапускПриложенияGR", ЭтотОбъект);
	НачатьЗапускПриложения(Оповещение, КаталогФайла);
КонецПроцедуры

&НаСервере
Функция ЭтоВнешняяОбработкаОтчет() Экспорт
	ПолноеИмяМетаданных = ОбработкаОбъект().Метаданные().ПолноеИмя();
	Возврат Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданных) = Неопределено
КонецФункции

&НаКлиенте
Функция ОткрытьФормуОбработки(ИмяФормы)
	
	Если ЭтоВнешняяОбработкаОтчет() Тогда
		ИмяОткрФормы = "ВнешняяОбработка.GreenAPI.Форма." + ИмяФормы;
	Иначе
		ИмяОткрФормы = "Обработка.GreenAPI.Форма." + ИмяФормы;
	КонецЕсли;
		
	ОткрытьФорму(ИмяОткрФормы, Новый Структура("IdInstance,ApiToken", Объект.IdInstance, Объект.ApiToken), ЭтотОбъект,,,,, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	
КонецФункции

&НаСервере
Функция СтруктураИзJSON(JSON)
	
	Чтение = Новый ЧтениеJSON();
	Чтение.УстановитьСтроку(JSON);
	Конв = ПрочитатьJSON(Чтение);
	Чтение.Закрыть();
	Возврат Конв;
КонецФункции

&НаСервере
Функция СтруктураВJSONСтроку(Структура)
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Возврат Запись.Закрыть();
КонецФункции

&НаСервере
Функция ЗначениеВМассив(Значение)
	
	Массив = Новый Массив;
	Массив.Добавить(Значение);
	Возврат Массив;
	
КонецФункции

&НаСервере
Процедура ПодготовитьПараметрыЗапросов()
	
	ПараметрУстановитьНастройкиАккаунта = "{
	|    ""countryInstance"": ""ru"",
	|    ""webhookUrl"": ""https://mysite.com/webhook/green-api/"",
	|    ""delaySendMessagesMilliseconds"": 1000,
	|    ""markIncomingMessagesReaded"": ""no"",
	|    ""proxyInstance"": ""100.100.100.100:3535:login:password"",
	|    ""outgoingWebhook"": ""yes"",
	|    ""stateWebhook"": ""yes"",
	|    ""incomingWebhook"": ""yes"",
	|    ""deviceWebhook"": ""no""
	|}";
	
	ПараметрИмяГруппы = "Group created by Green API";
	ПараметрНомерТелефона = "79001234568";
	ПараметрИдГруппы = "79001234567-1587570015@g.us";
	ПараметрИдУчастника = "79001234565@c.us";
	ПараметрИдЧата = "79001234567@c.us";
	ПараметрИдСообщения = "B275A7AA0D6EF89BB9245169BDF174E6";
	
КонецПроцедуры

#КонецОбласти

#Область JSON

Функция СериализоватьВJSONСтроку(Данные) Экспорт
	
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Данные);
	СтрокаJSON = Запись.Закрыть();
	Возврат СтрЗаменить(СтрокаJSON, "\\", "\"); // Для emodji в формате UTF-16 "\ud83d\ude00"
	
КонецФункции

#КонецОбласти

#Область MimeTypes

Функция ПолучитьРасширениеПоMimeType(ИскомыйТип)
	
	Типы = СоответствиеMimeTypes();
	
	Для каждого КлючЗначение Из Типы Цикл
		Если СтрНайти(НРег(ИскомыйТип), НРег(КлючЗначение.Значение)) <> 0 Тогда
			Возврат КлючЗначение.Ключ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьMimeTypeПоРасширению(ИскомоеРасширение)
	
	Типы = СоответствиеMimeTypes();
	
	Если Не ЗначениеЗаполнено(ИскомоеРасширение) Тогда
		Возврат Типы.Получить(".bin");
	КонецЕсли;
	
	Для каждого КлючЗначение Из Типы Цикл
		Если СтрНайти(НРег(ИскомоеРасширение), НРег(КлючЗначение.Ключ)) <> 0 Тогда
			Возврат КлючЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Типы.Получить(".bin");
	
КонецФункции

Функция СоответствиеMimeTypes() 

	Типы = Новый Соответствие;
	
	Типы.Вставить(".js",      "application/javascript");
	Типы.Вставить(".mjs",     "application/javascript");
	Типы.Вставить(".json",    "application/json");
	Типы.Вставить(".webmanifest", "application/manifest+json");
	Типы.Вставить(".doc",     "application/msword");
	Типы.Вставить(".dot",     "application/msword");
	Типы.Вставить(".wiz",     "application/msword");
	Типы.Вставить(".nq",      "application/n-quads");
	Типы.Вставить(".nt",      "application/n-triples");
	Типы.Вставить(".bin",     "application/octet-stream");
	Типы.Вставить(".a",       "application/octet-stream");
	Типы.Вставить(".dll",     "application/octet-stream");
	Типы.Вставить(".exe",     "application/octet-stream");
	Типы.Вставить(".o",       "application/octet-stream");
	Типы.Вставить(".obj",     "application/octet-stream");
	Типы.Вставить(".so",      "application/octet-stream");
	Типы.Вставить(".oda",     "application/oda");
	Типы.Вставить(".pdf",     "application/pdf");
	Типы.Вставить(".p7c",     "application/pkcs7-mime");
	Типы.Вставить(".ps",      "application/postscript");
	Типы.Вставить(".ai",      "application/postscript");
	Типы.Вставить(".eps",     "application/postscript");
	Типы.Вставить(".trig",    "application/trig");
	Типы.Вставить(".m3u",     "application/vnd.apple.mpegurl");
	Типы.Вставить(".m3u8",    "application/vnd.apple.mpegurl");
	Типы.Вставить(".xls",     "application/vnd.ms-excel");
	Типы.Вставить(".xlb",     "application/vnd.ms-excel");
	Типы.Вставить(".ppt",     "application/vnd.ms-powerpoint");
	Типы.Вставить(".pot",     "application/vnd.ms-powerpoint");
	Типы.Вставить(".ppa",     "application/vnd.ms-powerpoint");
	Типы.Вставить(".pps",     "application/vnd.ms-powerpoint");
	Типы.Вставить(".pwz",     "application/vnd.ms-powerpoint");
	Типы.Вставить(".wasm",    "application/wasm");
	Типы.Вставить(".bcpio",   "application/x-bcpio");
	Типы.Вставить(".cpio",    "application/x-cpio");
	Типы.Вставить(".csh",     "application/x-csh");
	Типы.Вставить(".dvi",     "application/x-dvi");
	Типы.Вставить(".gtar",    "application/x-gtar");
	Типы.Вставить(".hdf",     "application/x-hdf");
	Типы.Вставить(".h5",      "application/x-hdf5");
	Типы.Вставить(".latex",   "application/x-latex");
	Типы.Вставить(".mif",     "application/x-mif");
	Типы.Вставить(".cdf",     "application/x-netcdf");
	Типы.Вставить(".nc",      "application/x-netcdf");
	Типы.Вставить(".p12",     "application/x-pkcs12");
	Типы.Вставить(".pfx",     "application/x-pkcs12");
	Типы.Вставить(".ram",     "application/x-pn-realaudio");
	Типы.Вставить(".pyc",     "application/x-python-code");
	Типы.Вставить(".pyo",     "application/x-python-code");
	Типы.Вставить(".sh",      "application/x-sh");
	Типы.Вставить(".shar",    "application/x-shar");
	Типы.Вставить(".swf",     "application/x-shockwave-flash");
	Типы.Вставить(".sv4cpio", "application/x-sv4cpio");
	Типы.Вставить(".sv4crc",  "application/x-sv4crc");
	Типы.Вставить(".tar",     "application/x-tar");
	Типы.Вставить(".tcl",     "application/x-tcl");
	Типы.Вставить(".tex",     "application/x-tex");
	Типы.Вставить(".texi",    "application/x-texinfo");
	Типы.Вставить(".texinfo", "application/x-texinfo");
	Типы.Вставить(".roff",    "application/x-troff");
	Типы.Вставить(".t",       "application/x-troff");
	Типы.Вставить(".tr",      "application/x-troff");
	Типы.Вставить(".man",     "application/x-troff-man");
	Типы.Вставить(".me",      "application/x-troff-me");
	Типы.Вставить(".ms",      "application/x-troff-ms");
	Типы.Вставить(".ustar",   "application/x-ustar");
	Типы.Вставить(".src",     "application/x-wais-source");
	Типы.Вставить(".xsl",     "application/xml");
	Типы.Вставить(".rdf",     "application/xml");
	Типы.Вставить(".wsdl",    "application/xml");
	Типы.Вставить(".xpdl",    "application/xml");
	Типы.Вставить(".zip",     "application/zip");
	Типы.Вставить(".3gp",     "audio/3gpp");
	Типы.Вставить(".3gpp",    "audio/3gpp");
	Типы.Вставить(".3g2",     "audio/3gpp2");
	Типы.Вставить(".3gpp2",   "audio/3gpp2");
	Типы.Вставить(".aac",     "audio/aac");
	Типы.Вставить(".adts",    "audio/aac");
	Типы.Вставить(".loas",    "audio/aac");
	Типы.Вставить(".ass",     "audio/aac");
	Типы.Вставить(".au",      "audio/basic");
	Типы.Вставить(".snd",     "audio/basic");
	Типы.Вставить(".mp3",     "audio/mpeg");
	Типы.Вставить(".mp2",     "audio/mpeg");
	Типы.Вставить(".opus",    "audio/opus");
	Типы.Вставить(".aif",     "audio/x-aiff");
	Типы.Вставить(".aifc",    "audio/x-aiff");
	Типы.Вставить(".aiff",    "audio/x-aiff");
	Типы.Вставить(".ra",      "audio/x-pn-realaudio");
	Типы.Вставить(".wav",     "audio/x-wav");
	Типы.Вставить(".avif",    "image/avif");
	Типы.Вставить(".bmp",     "image/bmp");
	Типы.Вставить(".gif",     "image/gif");
	Типы.Вставить(".ief",     "image/ief");
	Типы.Вставить(".jpg",     "image/jpeg");
	Типы.Вставить(".jpe",     "image/jpeg");
	Типы.Вставить(".jpeg",    "image/jpeg");
	Типы.Вставить(".heic",    "image/heic");
	Типы.Вставить(".heif",    "image/heif");
	Типы.Вставить(".png",     "image/png");
	Типы.Вставить(".svg",     "image/svg+xml");
	Типы.Вставить(".tiff",    "image/tiff");
	Типы.Вставить(".tif",     "image/tiff");
	Типы.Вставить(".ico",     "image/vnd.microsoft.icon");
	Типы.Вставить(".ras",     "image/x-cmu-raster");
	Типы.Вставить(".pnm",     "image/x-portable-anymap");
	Типы.Вставить(".pbm",     "image/x-portable-bitmap");
	Типы.Вставить(".pgm",     "image/x-portable-graymap");
	Типы.Вставить(".ppm",     "image/x-portable-pixmap");
	Типы.Вставить(".rgb",     "image/x-rgb");
	Типы.Вставить(".xbm",     "image/x-xbitmap");
	Типы.Вставить(".xpm",     "image/x-xpixmap");
	Типы.Вставить(".xwd",     "image/x-xwindowdump");
	Типы.Вставить(".eml",     "message/rfc822");
	Типы.Вставить(".mht",     "message/rfc822");
	Типы.Вставить(".mhtml",   "message/rfc822");
	Типы.Вставить(".nws",     "message/rfc822");
	Типы.Вставить(".css",     "text/css");
	Типы.Вставить(".csv",     "text/csv");
	Типы.Вставить(".html",    "text/html");
	Типы.Вставить(".htm",     "text/html");
	Типы.Вставить(".n3",      "text/n3");
	Типы.Вставить(".txt",     "text/plain");
	Типы.Вставить(".bat",     "text/plain");
	Типы.Вставить(".c",       "text/plain");
	Типы.Вставить(".h",       "text/plain");
	Типы.Вставить(".ksh",     "text/plain");
	Типы.Вставить(".pl",      "text/plain");
	Типы.Вставить(".srt",     "text/plain");
	Типы.Вставить(".rtx",     "text/richtext");
	Типы.Вставить(".tsv",     "text/tab-separated-values");
	Типы.Вставить(".vtt",     "text/vtt");
	Типы.Вставить(".py",      "text/x-python");
	Типы.Вставить(".etx",     "text/x-setext");
	Типы.Вставить(".sgm",     "text/x-sgml");
	Типы.Вставить(".sgml",    "text/x-sgml");
	Типы.Вставить(".vcf",     "text/x-vcard");
	Типы.Вставить(".xml",     "text/xml");
	Типы.Вставить(".mp4",     "video/mp4");
	Типы.Вставить(".mpeg",    "video/mpeg");
	Типы.Вставить(".m1v",     "video/mpeg");
	Типы.Вставить(".mpa",     "video/mpeg");
	Типы.Вставить(".mpe",     "video/mpeg");
	Типы.Вставить(".mpg",     "video/mpeg");
	Типы.Вставить(".mov",     "video/quicktime");
	Типы.Вставить(".qt",      "video/quicktime");
	Типы.Вставить(".webm",    "video/webm");
	Типы.Вставить(".avi",     "video/x-msvideo");
	Типы.Вставить(".movie",   "video/x-sgi-movie");
	
	Возврат Типы;
	
КонецФункции

Функция ЭтоКартинкаИлиВидео(ПутьКФайлу) 
	
	Файл = Новый Файл(ПутьКФайлу);
	Если Не Файл.Существует() Тогда
		ВызватьИсключение "Файл не существует! Адрес: " +  ПутьКФайлу;
	КонецЕсли;
	
	ТипMime = ПолучитьMimeTypeПоРасширению(Файл.Расширение);
	Если СтрНачинаетсяС(ТипMime, "image") Или СтрНачинаетсяС(ТипMime, "video") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПодготовитьНастройки();
	ПодготовитьПараметрыЗапросов();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Попытка
		ОбновитьСтатусСервиса();
	Исключение
		Сообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Если ВыбранноеЗначение.ИмяФормы = "ПомощникПодключения" Тогда
			Объект.IdInstance = ВыбранноеЗначение.IdInstance;
			Объект.ApiToken = ВыбранноеЗначение.ApiToken;
		ИначеЕсли ВыбранноеЗначение.ИмяФормы = "ВыборСсылкиНаФайл" Тогда
			ВыбратьСсылкуДляОтправкиСервер(ВыбранноеЗначение.АдресФайла, ВыбранноеЗначение.ИмяФайла);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРеквизитовКомандФормы

&НаКлиенте
Процедура ПолучитьКонтакты(Команда)
	КомандаПолучитьКонтакты();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеWhatsApp(Команда)
	КомандаПроверитьНаличиеWhatsApp();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьАватарКонтакта(Команда)
	КомандаПолучитьАватарКонтакта();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИнформациюОбУстройстве(Команда)
	КомандаПолучитьИнформациюОбУстройстве();
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьЧатПрочитанным(Команда)
	КомандаОтметитьЧатПрочитанным();
КонецПроцедуры

&НаКлиенте
Процедура ВыйтиИзГруппы(Команда)
	КомандаВыйтиИзГруппы();
КонецПроцедуры

&НаКлиенте
Процедура ОтозватьПраваАдминистратораГруппы(Команда)
	КомандаОтозватьПраваАдминистратораГруппы();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИнформациюОГруппе(Команда)
	КомандаПолучитьИнформациюОГруппе();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУчастникаВГруппу(Команда)
	КомандаДобавитьУчастникаВГруппу();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьУчастникаИзГруппы(Команда)
	КомандаУдалитьУчастникаИзГруппы();
КонецПроцедуры

&НаКлиенте
Процедура НазначитьПраваАдминистратораГруппы(Команда)
	КомандаНазначитьПраваАдминистратораГруппы();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьГруппу(Команда)
	КомандаСоздатьГруппу();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИмяГруппы(Команда)
	КомандаИзменитьИмяГруппы();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОчередьСообщенийКОтправке(Команда)
	КомандаОчиститьОчередьСообщенийКОтправке();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОчередьСообщенийКОтправке(Команда)
	КомандаПолучитьОчередьСообщенийКОтправке();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЖурналОтправленныхСообщений(Команда)
	КомандаПолучитьЖурналОтправленныхСообщений();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЖурналВходящихСообщений(Команда)
	КомандаПолучитьЖурналВходящихСообщений();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьQRКод(Команда)
	КомандаПолучитьQRКод();
КонецПроцедуры

&НаКлиенте
Процедура РазлогинитьАккаунт(Команда)
	КомандаРазлогинитьАккаунт();
КонецПроцедуры

&НаКлиенте
Процедура ПерезапуститьАккаунт(Команда)
	КомандаПерезапуститьАккаунт();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСостояниеАккаунта(Команда)
	КомандаПолучитьСостояниеАккаунта();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
	ОбновитьСтатусСервиса();
	Элементы.СтатусПроверки.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолучатьВходящиеУведомленияПриИзменении(Элемент)
	ПолучатьВходящиеУведомленияПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатус(Команда)
	
	ОбновитьСтатусСервиса();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтандартныеНастройки(Команда)
	Если ЗначениеЗаполнено(webhookUrl) Тогда
		Оповещение = Новый ОписаниеОповещения("ЗавершитьПоказСтандартныхНастроек", ЭтотОбъект);
		ТекстВопроса = "Будут установлены стандартные настройки. Получение входящих уведомлений на текущий адрес " + webhookUrl + " будет отключено.";
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить("Установить стандартные настройки");
		КнопкиВопроса.Добавить("Отмена");
		ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиВопроса);
	Иначе
		УстановитьНастройкиСервисаПоДефолтуСервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСообщение(Команда)
	
	Если Не ЗначениеЗаполнено(НомерТелефона)
		И Не ЗначениеЗаполнено(ИдЧата) Тогда
		Если ПереключательТипаЧата = 1 Тогда
			Сообщить("ИД чата не заполнен");	
		Иначе
			Сообщить("Номер телефона не заполнен");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекстСообщения) Тогда
		Сообщить("Текст сообщения не заполнен");
		Возврат;
	КонецЕсли;
	
	ОтправитьСообщениеWhatsApp();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСообщениеЧерезВебхук(Команда)
	СтатусПолучениеСообщения = "Ожидание сообщения в течение 20 сек...";
	Элементы.ПолученФайл.Видимость = Ложь;
	Объект.ТекстПолученноеСообщение = "";
	Объект.ПолученФайл = "";
	ПодключитьОбработчикОжидания("Подключаемый_ПолучитьСообщениеЧерезВебхук", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПолучатьВходящиеСообщенияИФайлыПриИзменении(Элемент)
	ПолучатьВходящиеСообщенияИФайлыПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПолучатьСтатусыОтправленныхСообщенийПриИзменении(Элемент)
	ПолучатьСтатусыОтправленныхСообщенийПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПолучатьУведомленииОСостоянииТелефонаПриИзменении(Элемент)
	ПолучатьУведомленииОСостоянииТелефонаПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПолучатьУведомленияОСостоянииАккаунтаПриИзменении(Элемент)
	ПолучатьУведомленияОСостоянииАккаунтаПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ОтмечатьВходящиеСообщенияПрочитаннымиПриИзменении(Элемент)
	ОтмечатьВходящиеСообщенияПрочитаннымиПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалОтправкиСообщенийПриИзменении(Элемент)
	ИнтервалОтправкиСообщенийПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьФайл(Команда)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Оповещение = Новый ОписаниеОповещения("ВыбратьФайлДляОтправки", ЭтотОбъект);
	Диалог.Показать(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьФайлПоСсылке(Команда)
	ОткрытьФормуОбработки("ВыборСсылкиНаФайл");
КонецПроцедуры

&НаКлиенте
Процедура СсылкаОтправитьТекстНажатие(Элемент)
	Оповещение = Новый ОписаниеОповещения("ЗавершитьЗапускПриложенияGR", ЭтотОбъект);
	НачатьЗапускПриложения(Оповещение, "https://green-api.com/docs/api/sending/SendMessage/");
КонецПроцедуры

&НаКлиенте
Процедура СсылкаОтправитьФайлНажатие(Элемент)
	Оповещение = Новый ОписаниеОповещения("ЗавершитьЗапускПриложенияGR", ЭтотОбъект);	
	НачатьЗапускПриложения(Оповещение, "https://green-api.com/docs/api/sending/SendFileByUpload/");
КонецПроцедуры

&НаКлиенте
Процедура СсылкаОтправитьФайлПоСсылкеНажатие(Элемент)
	Оповещение = Новый ОписаниеОповещения("ЗавершитьЗапускПриложенияGR", ЭтотОбъект);	
	НачатьЗапускПриложения(Оповещение, "https://green-api.com/docs/api/sending/SendFileByUrl/");
КонецПроцедуры

&НаКлиенте
Процедура КнопкаПомощник(Команда)
	
	ОткрытьФормуОбработки("ПомощникПодключения");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНастройкиАккаунта(Команда)
	КомандаПолучитьНастройкиАккаунтаСервер();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФотоПрофиля(Команда)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Оповещение = Новый ОписаниеОповещения("ВыбратьФотоДляАватара", ЭтотОбъект);
	Диалог.Показать(Оповещение);
КонецПроцедуры

#КонецОбласти

#Область ИнформацияОбУстройстве

&НаСервере
Процедура КомандаПолучитьИнформациюОбУстройстве()

	Консоль = СтруктураВJSONСтроку(ОбработкаОбъект().ПолучитьИнформациюОбУстройстве());

КонецПроцедуры

&НаКлиенте
Процедура ПереключательТипаЧатаПриИзменении(Элемент)
	
	Если ПереключательТипаЧата = 1 Тогда
		Элементы.СтраницыНомерИИдЧата.ТекущаяСтраница = Элементы.СтраницаИдЧата;
	Иначе
		Элементы.СтраницыНомерИИдЧата.ТекущаяСтраница = Элементы.СтраницаНомерТелефонаЧата;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
