// BSLLS:MissingTemporaryFileDeletion-off
#Область ПрограммныйИнтерфейсПолученияДанных   

// Запускает процесс получения сообщений. Результаты выполнения метода обрабатываются методами ниже
//
Функция ПолучитьСообщение() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	ТипыУведомлений = Новый Структура;
	ТипыУведомлений.Вставить("ВходящееСообщение", "incomingMessageReceived");
	ТипыУведомлений.Вставить("СтатусОтправленногоСообщения", "outgoingMessageStatus");
	ТипыУведомлений.Вставить("СостояниеАккаунта", "stateInstanceChanged");
	ТипыУведомлений.Вставить("СостояниеТелефона", "deviceInfo");
	
	Ответ = ПолучитьУведомление();
	
	Если Ответ <> Неопределено Тогда
		
		Отказ = Ложь;
		ТекстСообщения = Неопределено;
		ТегСообщения = Формат(Ответ.receiptId, "ЧГ=0");
		Если Ответ.body.typeWebhook = ТипыУведомлений.ВходящееСообщение  Тогда
			Если Ответ.body.messageData.typeMessage = "imageMessage"
				Или Ответ.body.messageData.typeMessage = "videoMessage"
				Или Ответ.body.messageData.typeMessage = "documentMessage"
				Или Ответ.body.messageData.typeMessage = "audioMessage" Тогда
				
			
				Если Ответ.body.messageData.typeMessage = "documentMessage" Тогда
					ИмяФайла = Ответ.body.messageData.fileMessageData.fileName;
				КонецЕсли;
				ПолноеИмяФайла = СкачатьФайлПоСсылке(Ответ.body.messageData.fileMessageData.downloadUrl);
				Попытка
					ПриПолученииСообщенияФайл(Отказ, Ответ, ПолноеИмяФайла);
				Исключение
					Отказ = Истина;
					УдалитьФайлы(ПолноеИмяФайла);
				КонецПопытки;
			Иначе
				Попытка
					ПриПолученииСообщенияТекст(Отказ, Ответ);
				Исключение
					Отказ = Истина;
				КонецПопытки;
			КонецЕсли;
		ИначеЕсли Ответ.body.typeWebhook = ТипыУведомлений.СтатусОтправленногоСообщения Тогда
			Попытка
				ПриПолученииСтатусаОтправленногоСообщения(Отказ, Ответ);
			Исключение
				Отказ = Истина;
			КонецПопытки;
		ИначеЕсли Ответ.body.typeWebhook = ТипыУведомлений.СостояниеАккаунта Тогда
			Попытка
				ПриПолученииСтатусаАвторизацииАккаунта(Отказ, Ответ);
			Исключение
				Отказ = Истина;
			КонецПопытки;
		ИначеЕсли Ответ.body.typeWebhook = ТипыУведомлений.СостояниеТелефона Тогда
			Попытка
				ПриПолученииСтатусаУстройства(Отказ, Ответ);
			Исключение
				Отказ = Истина;
			КонецПопытки;
		КонецЕсли;
		
		Если Не Отказ Тогда
			УдалитьУведомление(ТегСообщения);
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат Ответ;
	
КонецФункции

// Обработчик, срабатывающий при получении текстового сообщения 
// https://green-api.com/docs/api/receiving/notifications-format/incoming-message/Webhook-IncomingMessageReceived/
// Параметры,
//  Отказ - Булево -  Если Истина, то сообщение не будет подтверждено и вернется на сервер 
//    для повторного получения
//  Данные - Структура - Структура полей сообщения в формате JSON. См подробнее в документации
//    
//
Процедура ПриПолученииСообщенияТекст(Отказ, Данные)
	ЭтотОбъект.ТекстПолученноеСообщение = ЗначениеВСтрокуВнутр(Данные.body);
КонецПроцедуры

// Обработчик, срабатывающий при получении файлового сообщения
// https://green-api.com/docs/api/receiving/notifications-format/incoming-message/ImageMessage/
// Параметры,
//  Отказ - Булево -  Если Истина, то сообщение не будет подтверждено и вернется на сервер 
//    для повторного получения
//  Данные - Структура - Структура полей сообщения в формате JSON. См подробнее в документации
//  Файл - Строка - Полное имя к файлу во временном каталоге ОС
//
Процедура ПриПолученииСообщенияФайл(Отказ, Данные, Файл)
	ЭтотОбъект.ТекстПолученноеСообщение = ЗначениеВСтрокуВнутр(Данные.body);
	ЭтотОбъект.ПолученФайл = Файл;
КонецПроцедуры

// Обработчик, срабатывающий при получении статуса ранее отправленного сообщения, отправлено, доставлено, прочитано и др.
// https://green-api.com/docs/api/receiving/notifications-format/outgoing-message/OutgoingMessageStatus/
// Параметры,
//  Отказ - Булево -  Если Истина, то сообщение не будет подтверждено и вернется на сервер 
//    для повторного получения
//  Данные - Структура - Структура полей сообщения в формате JSON. См подробнее в документации
//    
//
Процедура ПриПолученииСтатусаОтправленногоСообщения(Отказ, Данные)
	
	ЭтотОбъект.ТекстПолученноеСообщение = ЗначениеВСтрокуВнутр(Данные.body);
	
КонецПроцедуры

// Обработчик, срабатывающий при получении данных о состоянии авторизации аккаунта.
// https://green-api.com/docs/api/receiving/notifications-format/StateInstanceChanged/
//
// Параметры,
//  Отказ - Булево -  Если Истина, то сообщение не будет подтверждено и вернется на сервер 
//    для повторного получения
//  Данные - Структура - Структура полей сообщения в формате JSON. См подробнее в документации
//    
//
Процедура ПриПолученииСтатусаАвторизацииАккаунта(Отказ, Данные)
	
 	ЭтотОбъект.ТекстПолученноеСообщение = ЗначениеВСтрокуВнутр(Данные.body);
	
КонецПроцедуры

// Обработчик, срабатывающий при получении данных данных об устройстве и уровне заряда батареи, на котором запущено приложение WhatsApp Business
// https//green-api.com/docs/api/receiving/notifications-format/DeviceInfo/
//
// Параметры,
//  Отказ - Булево -  Если Истина, то сообщение не будет подтверждено и вернется на сервер 
//    для повторного получения
//  Данные - Структура - Структура полей сообщения в формате JSON. См подробнее в документации
//    
//
Процедура ПриПолученииСтатусаУстройства(Отказ, Данные)
	
	ЭтотОбъект.ТекстПолученноеСообщение = ЗначениеВСтрокуВнутр(Данные.body);
	
КонецПроцедуры

Функция СведенияОВнешнейОбработке() Экспорт
    
    ИмяОбработки = ЭтотОбъект.Метаданные().Имя; 
    Синоним = ЭтотОбъект.Метаданные().Синоним; 
    Синоним = ?(ЗначениеЗаполнено(Синоним),Синоним, ИмяОбработки);
	
    РегистрационныеДанные = Новый Структура;
    РегистрационныеДанные.Вставить("Вид","ДополнительнаяОбработка");
    РегистрационныеДанные.Вставить("Наименование", Синоним);
    РегистрационныеДанные.Вставить("Версия", НомерВерсии());
    РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
    РегистрационныеДанные.Вставить("Информация", ОписаниеВнешнейОбработки());
    
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    ДобавитьКоманду(ТаблицаКоманд, Синоним, ИмяОбработки , "ОткрытиеФормы", Истина, );
        
    РегистрационныеДанные.Вставить("Команды", ТаблицаКоманд);
    
    Возврат РегистрационныеДанные;
                                       
КонецФункции 

Функция ОписаниеВнешнейОбработки() Экспорт
	Возврат "SDK для подключения к сервисам GREEN API и автоматизированных рассылок через WhatsApp";
КонецФункции

#КонецОбласти

#Область API

#Область Аккаунт

// Метод предназначен для получения текущих настроек аккаунта.
// Подробнее https://green-api.com/docs/api/account/GetSettings/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьНастройкиАккаунта() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "getSettings"), Истина);
	Возврат Ответ;
	
КонецФункции

// Метод предназначен для установки настроек аккаунта. 
// Допускается указывать параметры выборочно. Хотя бы один параметр должен быть указан.
// Подробнее https://green-api.com/docs/api/account/SetSettings/
//
// Параметры:
//  СтруктураНастроек - Структура - См описание метода https://green-api.com/docs/api/account/SetSettings/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция УстановитьНастройкиАккаунта(СтруктураНастроек) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Тело = СериализоватьВJSONСтроку(СтруктураНастроек);
	
	Ответ = ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "setSettings"), Тело);
	Возврат Ответ;
	
КонецФункции

// Метод предназначен для получения состояния аккаунта.
// Подробнее https://green-api.com/docs/api/account/GetStateInstance/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьСостояниеАккаунта() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "getStateInstance"), Истина);
	Возврат Ответ;
	
КонецФункции

// Метод предназначен для перезапуска аккаунта.
// Подробнее https://green-api.com/docs/api/account/Reboot/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПерезапуститьАккаунт() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "reboot"), Истина);
	Возврат Ответ;
	
КонецФункции

// Метод предназначен для разлогинивания аккаунта.
// Подробнее https://green-api.com/docs/api/account/Logout/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция РазлогинитьАккаунт() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "logout"), Истина);
	Возврат Ответ;
	
КонецФункции

// Метод предназначен для получения QR-кода. Для авторизации аккаунта требуется считать QR-код из приложения
// WhatsApp Business на телефоне. Также получить QR-код и авторизовать аккаунт можно в личном кабинете. 
// Процедура авторизации аккаунта через личный кабинет описана в разделе Перед началом работы.
// Подробнее https://green-api.com/docs/api/account/QR/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьQRКод() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Возврат ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "qr"), Истина);
	
КонецФункции  

// Метод предназначен для авторизации инстанса по номеру телефона.
// Метод используется как альтернатива методу QR.
// Подробнее https://green-api.com/docs/api/account/GetAuthorizationCode/
//
// Параметры:
//  НомерТелефона - Число - Номер телефона в международном формате без + и 00
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьРегистрационныйКод(НомерТелефона) Экспорт
	
	Инстанс = IdInstance;
	Токен   = ApiToken; 
	
	Структура = Новый Структура;
	Структура.Вставить("phoneNumber", НомерТелефона);

	Тело  = СериализоватьВJSONСтроку(Структура);			
	Ответ = ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "GetAuthorizationCode"), Тело);	
	
	Возврат Ответ;	
	
КонецФункции   

// Метод предназначен для получения информации о аккаунте WhatsApp.
// Подробнее https://green-api.com/docs/api/account/GetWaSettings/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьИнформациюАккаунта() Экспорт
	
	Инстанс = IdInstance;
	Токен   = ApiToken;

	Ответ   = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "getWaSettings"), Истина);
	
	Возврат Ответ;	
	
КонецФункции


// Метод предназначен для установки аватара аккаунта (form-data). 
// Подробнее https://green-api.com/docs/api/account/SetProfilePicture/
//
// Параметры:
//  ПутьКФайлу- Полный путь к файлу на диске
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция УстановитьФотоПрофиля(ПутьКФайлу) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	Хост = ХостПоУмолчанию();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКФайлу);
	
	// Формируем основное составное сообщение
	Разделитель = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	
	Тело = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(Тело);
	
	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
	ЗаписьДанных.Записать(ФайлFormData("file", ПутьКФайлу, ДвоичныеДанные));
	ЗаписьДанных.ЗаписатьСтроку("");
	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель + "--");
	ЗаписьДанных.Закрыть();
	
	ДанныеТела = Тело.ЗакрытьИПолучитьДвоичныеДанные();
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + разделитель);
	
	Возврат ОтправитьФайлPOSTЗапрос(Хост, URLМетодаСервиса(Инстанс, Токен, "setProfilePicture"), Заголовки, ДанныеТела);
	
	
КонецФункции

#КонецОбласти

#Область Отправка

// Метод предназначен для отправки текстового сообщения в личный или групповой чат. 
// Сообщение будет добавлено в очередь на отправку. Скорость отправки сообщений из очереди регулирует 
// параметр Интервал отправки сообщений.
// Подробнее https://green-api.com/docs/api/sending/SendMessage/
//
// Параметры:
//  Телефон - Строка - Номер мобильного телефона
//  Сообщение - Строка - Текст сообщения. Поддерживаются символы emoji 
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ОтправитьТекст(Телефон, Сообщение, ИдЦитируемогоСообщения = Неопределено) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", ПараметрИдЧата(Телефон));
	Структура.Вставить("message", Сообщение);
	Если ИдЦитируемогоСообщения <> Неопределено Тогда  
		Структура.Вставить("quotedMessageId", ИдЦитируемогоСообщения);
	КонецЕсли;
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "sendMessage"), Тело);
	
КонецФункции

// Метод предназначен для отправки текстового сообщения в личный или групповой чат. 
// Сообщение будет добавлено в очередь на отправку. Скорость отправки сообщений из очереди регулирует 
// параметр Интервал отправки сообщений.
// Подробнее https://green-api.com/docs/api/sending/SendMessage/
//
// Параметры:
//  ИдЧата - Строка - Номер чата в формате 79001234568@c.us
//  Сообщение - Строка - Текст сообщения. Поддерживаются символы emoji 
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ОтправитьТекстВГруппу(ИдЧата, Сообщение) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", ИдЧата);
	Структура.Вставить("message", Сообщение);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "sendMessage"), Тело);
	
КонецФункции

// Метод предназначен для отправки файла, загружаемого через форму (form-data). 
// Сообщение будет добавлено в очередь на отправку. Скорость отправки сообщений из
// очереди регулирует параметр Интервал отправки сообщений.
// Подробнее https://green-api.com/docs/api/sending/SendFileByUpload/
//
// Параметры:
//  Телефон - Строка - Номер мобильного телефона
//  ПутьКФайлу- -  Полный путь к файлу на диске
//  Сообщение - Строка - Текст сообщения. Поддерживаются символы emoji 
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ОтправитьВидеоАудиоИзображениеДокумент(Телефон, ПутьКФайлу, Сообщение) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	Хост = ХостМедиаПоУмолчанию();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКФайлу);
	
	// Формируем основное составное сообщение
	Разделитель = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	
	Тело = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(Тело);
	
	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
	Если ТипЗнч(Телефон) = Тип("Число") Тогда
		ЗаписьДанных.Записать(ПараметрFormData("chatId", СтрШаблон("%1@c.us", Формат(Телефон,"ЧГ="))));
	Иначе
		ЗаписьДанных.Записать(ПараметрFormData("chatId", Телефон));
	КонецЕсли;
	
	Если ЭтоКартинкаИлиВидео(ПутьКФайлу) Тогда
		//
		ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
		ЗаписьДанных.Записать(ПараметрFormData("caption", Сообщение));
	Иначе
		//
		Файл = Новый Файл(ПутьКФайлу);
		Если Не Файл.Существует() Тогда
			ВызватьИсключение "Файл не существует! Адрес: " +  ПутьКФайлу;
		КонецЕсли;
		ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
		ЗаписьДанных.Записать(ПараметрFormData("fileName", Файл.Имя));
	КонецЕсли;
	
	//
	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
	ЗаписьДанных.Записать(ФайлFormData("file", ПутьКФайлу, ДвоичныеДанные));
	ЗаписьДанных.ЗаписатьСтроку("");
	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель + "--");
	ЗаписьДанных.Закрыть();
	
	ДанныеТела = Тело.ЗакрытьИПолучитьДвоичныеДанные();
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + разделитель);
	
	Возврат ОтправитьФайлPOSTЗапрос(Хост, URLМетодаСервиса(Инстанс, Токен, "sendFileByUpload"), Заголовки, ДанныеТела);
	
КонецФункции

// Метод существует для загрузки файла
Функция ЗагрузитьФайл(ПутьКФайлу) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	Хост = ХостМедиаПоУмолчанию();
	
	Файл = Новый Файл(ПутьКФайлу);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", ПолучитьMimeTypeПоРасширению(Файл.Расширение));
	
	ДанныеТела = Новый ДвоичныеДанные(ПутьКФайлу);
	
	Возврат ОтправитьФайлPOSTЗапрос(Хост, URLМетодаСервиса(Инстанс, Токен, "uploadFile"), Заголовки, ДанныеТела);
	
КонецФункции

// Метод предназначен для отправки файла, загружаемого по ссылке.
// Сообщение будет добавлено в очередь на отправку. Скорость отправки сообщений из 
// очереди регулирует параметр Интервал отправки сообщений.
// Подробнее https://green-api.com/docs/api/sending/SendFileByUrl/
//
// Параметры:
//  Телефон - Номер мобильного телефона (Число) или ID чата (Строка)
//  УРЛФайла - Строка - Интернет-ссылка на файл
//  ИмяФайла - Строка - Название файла обязательно с расширением. Например: readme.txt
//  Заголовок - Строка - Представление файла для whatsapp-а
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ОтправитьВидеоАудиоИзображениеДокументПоURL(Телефон, УРЛФайла, ИмяФайла, Заголовок = "") Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Если ТипЗнч(Телефон) = Тип("Число") Тогда
		Структура.Вставить("chatId", ПараметрИдЧата(Телефон));
	Иначе
		Структура.Вставить("chatId", Телефон);
	КонецЕсли;
	Структура.Вставить("urlFile", УРЛФайла);
	Структура.Вставить("fileName", ИмяФайла);
	Структура.Вставить("caption", Заголовок);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "sendFileByUrl"), Тело);
	
КонецФункции

// Метод предназначен для отправки сообщения геолокации. Сообщение будет добавлено в очередь на отправку
// Подробнее https://green-api.com/docs/api/sending/SendLocation/
//
// Параметры:
//  Телефон - Номер мобильного телефона (Число) или ID чата (Строка)
//  НазваниеЛокации - Строка - Необязательный. Название локации
//  Адрес - Строка - Необязательный. Адрес локации
//  Широта - Число -  Широта локации
//  Долгота - Число - Долгота локации
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ОтправитьГеолокацию(Телефон, НазваниеЛокации = "", Адрес = "", Широта, Долгота) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Если ТипЗнч(Телефон) = Тип("Число") Тогда
		Структура.Вставить("chatId", ПараметрИдЧата(Телефон));
	Иначе
		Структура.Вставить("chatId", Телефон);
	КонецЕсли;
	Структура.Вставить("nameLocation", НазваниеЛокации);
	Структура.Вставить("address", Адрес);
	Структура.Вставить("latitude", Широта);
	Структура.Вставить("longitude", Долгота);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "sendLocation"), Тело);
	
КонецФункции

// Метод предназначен для отправки сообщения с контактом. 
// Формируется визитная карточка контакта и отправляется в чат. 
// Сообщение будет добавлено в очередь на отправку. Скорость отправки сообщений из 
// очереди регулирует параметр Интервал отправки сообщений.
// Подробнее https://green-api.com/docs/api/sending/SendContact/
//
// Параметры:
//  Телефон - Номер мобильного телефона (Число) или ID чата (Строка)
//  ТелефонКонтакта - Строка - номер телефона контакта в международном формате (без +) 11 или 12 цифр
//  Имя - Строка - Имя контакта
//  Отчество - Строка - Отчество контакта
//  Фамилия - Строка - Фамилия контакта
//  Компания - Строка - Название компании контакта
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ОтправитьКонтакт(Телефон, ТелефонКонтакта, Имя = "", Отчество = "", Фамилия = "", Компания = "") Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Если ТипЗнч(Телефон) = Тип("Число") Тогда
		Структура.Вставить("chatId", ПараметрИдЧата(Телефон));
	Иначе
		Структура.Вставить("chatId", Телефон);
	КонецЕсли;
	
	Контакт = Новый Структура;
	Контакт.Вставить("phoneContact", ТелефонКонтакта);
	Контакт.Вставить("firstName", Имя);
	Контакт.Вставить("middleName", Отчество);
	Контакт.Вставить("lastName", Фамилия);
	Контакт.Вставить("company", Компания);
	
	Структура.Вставить("contact", Контакт);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "sendContact"), Тело);
	
КонецФункции

// Метод не поддерживается
// Метод предназначен для отправки сообщения со ссылкой, по которой будут добавлены 
// превью изображения, заголовок и описание. Картинка, заголовок и описание получаются 
// из Open Graph разметки страницы, на которую указывает ссылка. Сообщение будет добавлено в очередь на отправку. 
// Скорость отправки сообщений из очереди регулирует параметр Интервал отправки сообщений.
// Подробнее https://green-api.com/docs/api/sending/SendLink/
//
// Параметры:
//  Телефон - Строка - Номер мобильного телефона
//  АдресСсылки - Строка - Адрес ссылки
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера 
Функция ОтправитьСсылку(Телефон, АдресСсылки) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", ПараметрИдЧата(Телефон));
	Структура.Вставить("urlLink", АдресСсылки);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "sendLink"), Тело);
	
КонецФункции

// Метод предназначен для пересылки сообщений в личный или групповой чат.
// Пересылаемое сообщение будет добавлено в очередь на отправку. Проверка авторизации whatsapp-а
// на телефоне (т.е. наличие в связанных устройствах) не выполняется. Сообщение на отправку
// хранится 24 часа в очереди и будет отправлено сразу же после авторизации телефона.
// Скорость отправки сообщений из очереди регулирует параметр Интервал отправки сообщений.
// Подробнее https://green-api.com/docs/api/sending/ForwardMessages/
//
// Параметры:
//  ИдЧата - Строка - Номер чата в формате 79001234568@c.us
//  ИдЧатаИсточника - Строка - Номер чата в формате 79001234568@c.us
//  МассивИдСообщений - Массив - Коллекция ID (строки) сообщений, которые надо переслать
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПереслатьСообщения(ИдЧата, ИдЧатаИсточника, МассивИдСообщений) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId",     ИдЧата);
	Структура.Вставить("chatIdFrom", ИдЧатаИсточника);
	Структура.Вставить("messages",   МассивИдСообщений);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "forwardMessages"), Тело);	
	
КонецФункции

// Метод предназначен для отправки сообщения с опросом в личный или групповой чат.
// Сообщение будет добавлено в очередь на отправку. Сообщение на отправку
// хранится 24 часа в очереди и будет отправлено сразу же после авторизации телефона.
// Скорость отправки сообщений из очереди регулирует параметр Интервал отправки сообщений.
// Подробнее https://green-api.com/docs/api/sending/SendPoll/
//
// Параметры:
//  Телефон - Номер мобильного телефона (Число) или ID чата (Строка)
//  Вопрос - Строка - Текст вопроса
//  Ответы - Массив - Массив строк с вариантами ответов
//  НесколькоВариантов - Булево - Разрешить несколько ответов.
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ОтправитьОпрос(Телефон, Вопрос, Ответы, НесколькоВариантов = Ложь) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Если ТипЗнч(Телефон) = Тип("Число") Тогда
		Структура.Вставить("chatId", ПараметрИдЧата(Телефон));
	Иначе
		Структура.Вставить("chatId", Телефон);
	КонецЕсли;
	Структура.Вставить("message", Вопрос);
	Структура.Вставить("options", Ответы);
	Структура.Вставить("multipleAnswers", НесколькоВариантов);

	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "sendPoll"), Тело);
	
КонецФункции	
#КонецОбласти

#Область Получение

#Область ПолучениеУведомлений

// Метод предназначен для получения одного входящего уведомления из очереди уведомлений.
// Метод ReceiveNotification ожидает получения уведомления в течение 5 сек. 
// Вызов метода завершается с пустым ответом в случае достижения таймаута. 
// Если в течение 5 сек в очереди появляется уведомление, то вызов метода завешается, 
// и метод возвращает полученное уведомление.
// Подробнее https://green-api.com/docs/api/receiving/technology-http-api/ReceiveNotification/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьУведомление() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "receiveNotification"), Истина);
	Возврат Ответ;
	
КонецФункции

// Метод предназначен для удаления входящего уведомления из очереди уведомлений. 
// Чтобы указать, какое уведомление следует удалить, используйте параметр НомерУведомления.
// После получения и обработки входящего уведомления требуется удалить уведомление из очереди. 
// Для этого требуется выполнить данный метод. После вызова метода уведомление будет считаться принятым 
// и обработанным и будет безвозвратно удалено из очереди. Таким образом следующий вызов
// метода ПолучитьУведомление вернет следующее уведомление из очереди в порядке поступления уведомлений в очередь.
// Срок хранения входящих уведомлений в очереди составляет 24 часа.
// Подробнее https://green-api.com/docs/api/receiving/technology-http-api/DeleteNotification/
//
// Параметры:
//  НомерУведомления - Число - Идентификатор доставки для удаления входящего уведомления, полученный методом ПолучитьУведомление()
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция УдалитьУведомление(НомерУведомления) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Адрес = URLМетодаСервиса(Инстанс, Токен, "deleteNotification") + "/" + Формат(НомерУведомления, "ЧГ=");
	Ответ = ОтправитьDELETEЗапрос(ХостПоУмолчанию(), Адрес, Истина);
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область ПолучениеФайлов

// Метод предназначен для скачивания файлов по любой ссылке из интернета
//
// Параметры:
//  downloadUrl - Строка - Ссылка на сачивание файла
// 
// Возвращаемое значение:
//  Строка - абсолютный путь к файлу в папке временных файлов
//
Функция СкачатьФайлПоСсылке(downloadUrl)
	
	ЧастиАдреса = РазбитьURL(downloadUrl);
	Хост        = ЧастиАдреса.Хост;
	Адрес       = ЧастиАдреса.ОтносительныйАдрес;
	
	Если Не ЗначениеЗаполнено(Хост) Или Не ЗначениеЗаполнено(Адрес) Тогда		
		Возврат Неопределено;
		//ВызватьИсключение ПодставитьПараметрыВСтроку("Не удалось получить ссылку на файл", "", "");	
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 ИЛИ
		СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		
		Сертификат = Новый ЗащищенноеСоединениеOpenSSL(
			Неопределено,
			Новый СертификатыУдостоверяющихЦентровLinux());
	Иначе
		
		Сертификат = Новый ЗащищенноеСоединениеOpenSSL(
			Новый СертификатКлиентаWindows(),
			Новый СертификатыУдостоверяющихЦентровWindows());
	КонецЕсли;
	
	
	Соединение = Новый HTTPСоединение(Хост,,,,,60, Сертификат);

	ВебЗапрос = Новый HTTPЗапрос(Адрес);
	Ответ = Соединение.Получить(ВебЗапрос);
	Если Ответ.КодСостояния = 200 Тогда
		РасширениеФайла = ПолучитьРасширениеПоMimeType(Ответ.Заголовки["Content-Type"]);
		Если РасширениеФайла = Неопределено Тогда
			РасширениеФайла = "";
		КонецЕсли;
		
		Бинари = Ответ.ПолучитьТелоКакДвоичныеДанные();
		ИмяФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
		Бинари.Записать(ИмяФайла);
		Возврат ИмяФайла;
	Иначе
		ТекстОшибки = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		ВызватьИсключение ПодставитьПараметрыВСтроку("Сервер вернул статус %1. 
		|%2", Ответ.КодСостояния, ТекстОшибки);
	КонецЕсли;
	
КонецФункции

// Метод предназначен для скачивания принятых и отправленных файлов. 
// Ссылки на принятые файлы передаются во Входящих сообщениях, а также их можно
// получить методом LastIncomingMessages. Ссылки на отправленные
// файлы можно получить методом LastOutgoingMessages.
// Подробнее https://green-api.com/docs/api/receiving/files/DownloadFile/
//
// Параметры:
//  ИдСообщения - Строка - Идентификатор сообщения, передаваемый во Входящих сообщениях или 
//    при отправки файлов методами SendFileByUrl, SendFileByUpload. Данный параметр передаётся как завершающая часть url запроса
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция СкачатьФайлИзВходящегоУведомления(ИдЧата, ИдСообщения) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	  
 	Структура = Новый Структура;
	Структура.Вставить("chatId",     ИдЧата);
	Структура.Вставить("idMessage", ИдСообщения);

	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "downloadFile"), Тело);;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Журналы

// Метод возвращает крайние входящие сообщения аккаунта.
// Срок хранения входящих сообщений на сервере составляет 24 часа.
// Подробнее https://green-api.com/docs/api/journals/LastIncomingMessages/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьЖурналВходящихСообщений(Интервал = 0) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	URL = URLМетодаСервиса(Инстанс, Токен, "lastIncomingMessages");
	Если Интервал > 0 Тогда
		URL = URL + "?minutes=" + Формат(Интервал, "ЧГ=0");
	КонецЕсли;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URL, Истина);
	Возврат Ответ;
	
КонецФункции

// Метод возвращает крайние отправленные сообщения аккаунта.
// Срок хранения отправленных сообщений на сервере составляет 24 часа.
// Подробнее https://green-api.com/docs/api/journals/LastOutgoingMessages/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьЖурналОтправленныхСообщений(Интервал = 0) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	URL = URLМетодаСервиса(Инстанс, Токен, "lastOutgoingMessages");
	Если Интервал > 0 Тогда
		URL = URL + "?minutes=" + Формат(Интервал, "ЧГ=0");
	КонецЕсли;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URL, Истина);
	Возврат Ответ;
	
КонецФункции

// Метод возвращает историю сообщений чата.
// Подробнее https://green-api.com/docs/api/journals/GetChatHistory/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьИсториюСообщенийЧата(ИдЧата, КоличествоСообщений = Неопределено) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;     
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", ИдЧата);
	Если КоличествоСообщений <> Неопределено Тогда  
		Структура.Вставить("count", КоличествоСообщений);
	КонецЕсли;
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Ответ = ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "getChatHistory"), Тело);
	Возврат Ответ;
	
КонецФункции

// Метод возвращает сообщение чата.
// Подробнее https://green-api.com/docs/api/journals/GetMessage/
//
// Параметры:
//  ИдЧата - Строка - Идентификатор чата
//  ИдСообщения - Строка - Идентификатор сообщения
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьСообщениеЧата(ИдЧата, ИдСообщения) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;     
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", ИдЧата);
	Структура.Вставить("idMessage", ИдСообщения);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Ответ = ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "getMessage"), Тело);
	Возврат Ответ;
КонецФункции

#КонецОбласти

#Область Очереди

// Метод предназначен для получения списка сообщений, находящихся в очереди на отправку. 
// Скорость отправки сообщений из очереди регулирует параметр Интервал отправки сообщений.
// Подробнее https://green-api.com/docs/api/queues/ShowMessagesQueue/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьОчередьСообщенийКОтправке() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "showMessagesQueue"), Истина);
	Возврат Ответ;
	
КонецФункции

// Метод предназначен для очистки очереди сообщений на отправку.
// Подробнее https://green-api.com/docs/api/queues/ClearMessagesQueue/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ОчиститьОчередьСообщенийКОтправке() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "clearMessagesQueue"), Истина);
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область Группы

// Метод предназначен для создания группового чата.
// Подробнее https://green-api.com/docs/api/groups/CreateGroup/
//
// Параметры:
//  ИмяГруппы - Строка - Наименование нового группового чата
//  НомераТелефонов - Массив - Коллекция телефонов (строки) участников группы
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция СоздатьГруппу(ИмяГруппы, НомераТелефонов) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("groupName", ИмяГруппы);
	
	Идентификаторы = Новый Массив;
	Для каждого Телефон Из НомераТелефонов Цикл
		Идентификаторы.Добавить(ПараметрИдЧата(Телефон));
	КонецЦикла;
	
	Структура.Вставить("chatIds", Идентификаторы);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "createGroup"), Тело);
	
КонецФункции

// Метод изменяет наименование группового чата.
// Подробнее https://green-api.com/docs/api/groups/UpdateGroupName/
//
// Параметры:
//  ИдГруппы - Строка - Идентификатор группового чата
//  ИмяГруппы - Строка - Наименование группового чата
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ИзменитьИмяГруппы(ИдГруппы, ИмяГруппы) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("groupId", ИдГруппы);
	Структура.Вставить("groupName", ИмяГруппы);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "updateGroupName"), Тело);
	
КонецФункции

// Метод получает данные группового чата.
// Подробнее https://green-api.com/docs/api/groups/GetGroupData/
//
// Параметры:
//  ИдГруппы - Строка - Идентификатор группового чата
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьИнформациюОГруппе(ИдГруппы) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("groupId", ИдГруппы);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "getGroupData"), Тело);
	
КонецФункции

// Метод добавляет участника в групповой чат.
// Подробнее https://green-api.com/docs/api/groups/AddGroupParticipant/
//
// Параметры:
//  ИдГруппы - Строка - Идентификатор группового чата
//  ИдУчастника - Строка - Идентификатор участника, добавляемого в групповой чат.
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ДобавитьУчастникаВГруппу(ИдГруппы, ИдУчастника) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("groupId", ИдГруппы);
	Структура.Вставить("participantChatId", ИдУчастника);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "addGroupParticipant"), Тело);
	
КонецФункции

// Метод удаляет участника из группового чата.
// Подробнее https://green-api.com/docs/api/groups/RemoveGroupParticipant/
//
// Параметры:
//  ИдГруппы - Строка - Идентификатор группового чата
//  ИдУчастника - Строка - Идентификатор участника, добавляемого в групповой чат.
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция УдалитьУчастникаИзГруппы(ИдГруппы, ИдУчастника) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("groupId", ИдГруппы);
	Структура.Вставить("participantChatId", ИдУчастника);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "removeGroupParticipant"), Тело);
	
КонецФункции

// Метод назначает участника группового чата администратором.
// Подробнее https://green-api.com/docs/api/groups/SetGroupAdmin/
//
// Параметры:
//  ИдГруппы - Строка - Идентификатор группового чата
//  ИдУчастника - Строка - Идентификатор участника, добавляемого в групповой чат.
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция НазначитьПраваАдминистратораГруппы(ИдГруппы, ИдУчастника) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("groupId", ИдГруппы);
	Структура.Вставить("participantChatId", ИдУчастника);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "setGroupAdmin"), Тело);
	
КонецФункции

// Метод лишает участника прав администрирования группового чата.
// Подробнее https://green-api.com/docs/api/groups/RemoveAdmin/
//
// Параметры:
//  ИдГруппы - Строка - Идентификатор группового чата
//  ИдУчастника - Строка - Идентификатор участника, добавляемого в групповой чат.
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ОтозватьПраваАдминистратораГруппы(ИдГруппы, ИдУчастника) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("groupId", ИдГруппы);
	Структура.Вставить("participantChatId", ИдУчастника);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "removeAdmin"), Тело);
	
КонецФункции

// Метод производит выход пользователя текущего аккаунта из группового чата.
// Подробнее https://green-api.com/docs/api/groups/LeaveGroup/
//
// Параметры:
//  ИдГруппы - Строка - Идентификатор группового чата, из которого необходимо выйти.
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ВыйтиИзГруппы(ИдГруппы) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("groupId", ИдГруппы);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "leaveGroup"), Тело);
	
КонецФункции

// Метод устанавливает аватар группы (form-data). 
// Подробнее https://green-api.com/docs/api/groups/SetGroupPicture/
//
// Параметры:
//  - Строка - Идентификатор группового чата, из которого необходимо выйти.
//  ПутьКФайлу - Полный путь к файлу на диске
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция УстановитьФотоГруппы(ИдГруппы, ПутьКФайлу) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	Хост = ХостПоУмолчанию();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКФайлу);
	
	// Формируем основное составное сообщение
	Разделитель = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	
	Тело = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(Тело);
	
	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
	ЗаписьДанных.Записать(ПараметрFormData("groupId", ИдГруппы));
	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
	ЗаписьДанных.Записать(ФайлFormData("file", ПутьКФайлу, ДвоичныеДанные));
	ЗаписьДанных.ЗаписатьСтроку("");
	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель + "--");
	ЗаписьДанных.Закрыть();
	
	ДанныеТела = Тело.ЗакрытьИПолучитьДвоичныеДанные();
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + разделитель);
	
	Возврат ОтправитьФайлPOSTЗапрос(Хост, URLМетодаСервиса(Инстанс, Токен, "setGroupPicture"), Заголовки, ДанныеТела);
	
	
КонецФункции

#КонецОбласти 

#Область Статусы

// Метод предназначен для отправки текстового статуса. Статус будет добавлен в очередь на отправку. 
// Статус на отправку хранится 24 часа в очереди и будет отправлен сразу же после авторизации телефона. 
// Скорость отправки статусов из очереди регулирует параметр Интервал отправки сообщений.
// Подробнее https://green-api.com/docs/api/statuses/SendTextStatus/
//
// Параметры:
//  Сообщение - Строка - Текст сообщения. Поддерживаются символы emoji
//  ЦветФона  - Строка - Цвет фона сообщения. Значение по умолчанию: #FFFFFF 
//  Участники - Массив - Массив строк с идентификаторами контактов, которым будет доступен статус 
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ОтправитьТекстовыйСтатус(Знач Сообщение, Знач ЦветФона = "", Знач Участники = "") Экспорт
	
	Инстанс         = IdInstance;
	Токен           = ApiToken;
	УчастникиМассив = СтрРазделить(СокрЛП(Участники), ",", Ложь);
	
	Структура = Новый Структура;
	Структура.Вставить("message", Сообщение);
	Структура.Вставить("backgroundColor", ЦветФона);  
	Структура.Вставить("font", "SERIF"); 	
	Структура.Вставить("participants", УчастникиМассив);   

	Тело  = СериализоватьВJSONСтроку(Структура);
	Ответ = ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "sendTextStatus"), Тело);
	
	Возврат Ответ;
	
КонецФункции  

// Метод предназначен для отправки голосового статуса.
// Статус будет добавлен в очередь на отправку. 
// Статус на отправку хранится 24 часа в очереди и будет отправлен сразу же после авторизации телефона.
// Скорость отправки статусов из очереди регулирует параметр Интервал отправки сообщений.
// Подробнее https://green-api.com/docs/api/statuses/SendVoiceStatus/
//
// Параметры:
//  АдресФайла - Строка - Ссылка на отправляемый аудио файл
//  ЦветФона   - Строка - Цвет фона сообщения. Значение по умолчанию: #FFFFFF 
//  Участники  - Массив - Массив строк с идентификаторами контактов, которым будет доступен статус 
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ОтправитьГолосовойСтатус(Знач АдресФайла, Знач ЦветФона = "", Знач Участники = "") Экспорт
	
	Инстанс         = IdInstance;
	Токен           = ApiToken;
	УчастникиМассив = СтрРазделить(СокрЛП(Участники), ",", Ложь);
	
	Структура = Новый Структура;
	Структура.Вставить("urlFile", АдресФайла);
	Структура.Вставить("fileName", "music.mp3");  
	Структура.Вставить("backgroundColor", ЦветФона); 	
	Структура.Вставить("participants", УчастникиМассив);   

	Тело  = СериализоватьВJSONСтроку(Структура);
	Ответ = ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "sendVoiceStatus"), Тело);
	
	Возврат Ответ;
	
КонецФункции 

// Метод предназначен для отправки картинки или видеостатуса. 
// Статус будет добавлен в очередь на отправку. 
// Статус на отправку хранится 24 часа в очереди и будет отправлен сразу же после авторизации телефона.
// Скорость отправки статусов из очереди регулирует параметр Интервал отправки сообщений.
// Подробнее https://green-api.com/docs/api/statuses/SendMediaStatus/
//
// Параметры:  
//  Сообщение  - Строка - Описание под медиа статус. Максимальная длина поля 1024 символов.
//  АдресФайла - Строка - Ссылка на отправляемый файл
//  Участники  - Массив - Массив строк с идентификаторами контактов, которым будет доступен статус 
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ОтправитьМедиаСтатус(Знач Сообщение, Знач АдресФайла, Знач Участники = "") Экспорт
	
	Инстанс         = IdInstance;
	Токен           = ApiToken;
	УчастникиМассив = СтрРазделить(СокрЛП(Участники), ",", Ложь);
	
	Структура = Новый Структура;
	Структура.Вставить("urlFile", АдресФайла);
	Структура.Вставить("fileName", "SendFile.png");  
	Структура.Вставить("caption", Сообщение); 	
	Структура.Вставить("participants", УчастникиМассив);   

	Тело  = СериализоватьВJSONСтроку(Структура);
	Ответ = ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "sendMediaStatus"), Тело);
	
	Возврат Ответ;
	
КонецФункции   

// Метод предназначен для удаления статуса.
// Подробнее https://green-api.com/docs/api/statuses/DeleteStatus/
//
// Параметры:  
//  ИдСтатуса - Строка - ID удаляемого сообщения
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция УдалитьСтатус(Знач ИдСтатуса) Экспорт
	
	Инстанс = IdInstance;
	Токен   = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("idMessage", ИдСтатуса);

	Тело  = СериализоватьВJSONСтроку(Структура);
	Ответ = ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "deleteStatus"), Тело);
	
	Возврат Ответ;
	
КонецФункции    

// Метод возвращает массив получателей со статусами, отмеченных как отправлено/доставлено/прочитано, для данного статуса.
// Подробнее https://green-api.com/docs/api/statuses/GetStatusStatistic/                                                   
//
// Параметры:  
//  ИдСтатуса - Строка - ID сообщения статуса
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьСтатистикуСтатуса(ИдСтатуса) Экспорт 
	
	Инстанс = IdInstance;
	Токен   = ApiToken; 
	
	Адрес   = URLМетодаСервисаПараметр(Инстанс, Токен, "GetStatusStatistic", "idMessage", ИдСтатуса);
	Ответ   = ОтправитьGETЗапрос(ХостПоУмолчанию(), Адрес, Истина);
	
	Возврат Ответ;	
	
КонецФункции  

// Метод возвращает крайние входящие статусы аккаунта. По умолчанию возвращаются статусы за последние 24 часа.
// Подробнее https://green-api.com/docs/api/statuses/GetIncomingStatuses/
//
// Параметры:  
//  КоличествоМинут - Число - Время в минутах, за которое требуется показать статусы (по умолчанию равен 1440 минутам)
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьВходящиеСтатусы(КоличествоМинут) Экспорт
	
	Инстанс = IdInstance;
	Токен   = ApiToken;

	Адрес   = URLМетодаСервисаПараметр(Инстанс, Токен, "GetIncomingStatuses", "minutes", КоличествоМинут);
	Ответ   = ОтправитьGETЗапрос(ХостПоУмолчанию(), Адрес, Истина);
	
	Возврат Ответ;	
	
КонецФункции      

// Метод возвращает крайние отправленные статусы аккаунта. По умолчанию возвращаются статусы за последние 24 часа.
// Подробнее https://green-api.com/docs/api/statuses/GetOutgoingStatuses/
//
// Параметры:  
//  КоличествоМинут - Число - Время в минутах, за которое требуется показать статусы (по умолчанию равен 1440 минутам)
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьИсходящиеСтатусы(КоличествоМинут) Экспорт
	
	Инстанс = IdInstance;
	Токен   = ApiToken;

	Адрес   = URLМетодаСервисаПараметр(Инстанс, Токен, "getOutgoingStatuses", "minutes", КоличествоМинут);
	Ответ   = ОтправитьGETЗапрос(ХостПоУмолчанию(), Адрес, Истина);
	
	Возврат Ответ;	
	
КонецФункции

#КонецОбласти

#Область ОтметкаПрочтения

// Метод предназначен для отметки сообщений в чате прочитанными.
// Могут быть отмечены прочитанными все сообщения в чате или только одно заданное сообщение.
// Подробнее https://green-api.com/docs/api/marks/ReadChat/
//
// Параметры:
//  ИдЧата - Строка - Идентификатор группового чата
//  ИдСообщения - Строка - Необязательный. Идентификатор входящего сообщения, которое необходимо отметить прочитанным. 
//    Если не указан, то все непрочитанные сообщения в чате будут отмечены прочитанными.
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ОтметитьЧатПрочитанным(ИдЧата, ИдСообщения = Неопределено) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", ИдЧата);
	Если ЗначениеЗаполнено(ИдСообщения) Тогда
		Структура.Вставить("idMessage", ИдСообщения);
	КонецЕсли;
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "readChat"), Тело);
	
КонецФункции

#КонецОбласти

#Область Устройство

// Метод не поддерживается
// Метод предназначен для получения информации об устройстве (телефоне), на котором запущено приложение WhatsApp Business.
// Подробнее https://green-api.com/docs/api/phone/GetDeviceInfo/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
Функция ПолучитьИнформациюОбУстройстве() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "getDeviceInfo"), Истина);
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область СервисныеМетоды

// Метод проверяет наличие аккаунта WhatsApp на номере телефона.
// Подробнее https://green-api.com/docs/api/service/CheckWhatsapp/
//
// Параметры:
//  Телефон - Число - Номер телефона получателя в международном формате: 11 или 12 цифр; Пример: 79001234567 или 380123456789
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПроверитьНаличиеWhatsApp(Телефон) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("phoneNumber", Телефон);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "checkWhatsapp"), Тело);
	
КонецФункции

// Метод возвращает аватар корреспондента или группового чата.
// Подробнее https://green-api.com/docs/api/service/GetAvatar/
//
// Параметры:
//  ИдЧата - Строка - Идентификатор корреспондента или группового чата
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьАватарКонтакта(ИдЧата) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", ИдЧата);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "getAvatar"), Тело);
	
КонецФункции

// Метод предназначен для получения списка контактов текущего аккаунта.
// Подробнее https://green-api.com/docs/api/service/GetContacts/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьКонтакты() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "getContacts"), Истина);
	Возврат Ответ;
	
КонецФункции

// Метод не поддерживается 
// Метод предназначен для получения списка чатов текущего аккаунта.
// Подробнее https://green-api.com/docs/api/service/GetContacts/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
// 
Функция ПолучитьЧаты() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "getChats"), Истина);
	Возврат Ответ;
	
КонецФункции     

// Метод предназначен для получения информации о контакте.
// Подробнее https://green-api.com/docs/api/service/GetContactInfo/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьИнфоКонтакта(ИдЧата) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", ИдЧата);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Ответ = ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "getContactInfo"), Тело);
	Возврат Ответ;
	
КонецФункции

// Метод архивирует чат. Архивировать можно чаты, в которых есть хотя бы одно входящее сообщение.
// Подробнее https://green-api.com/docs/api/service/archiveChat/
//
// Параметры:
//  ИдЧата - Строка - Идентификатор корреспондента или группового чата
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция АрхивироватьЧат(ИдЧата) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", ИдЧата);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапросБезОтвета(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "archiveChat"), Тело);
	
КонецФункции

// Метод разархивирует чат.
// Подробнее https://green-api.com/docs/api/service/unarchiveChat/
//
// Параметры:
//  ИдЧата - Строка - Идентификатор корреспондента или группового чата
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция РазархивироватьЧат(ИдЧата) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", ИдЧата);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапросБезОтвета(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "unarchiveChat"), Тело);
	
КонецФункции

// Метод удаляет сообщение из чата.
// Подробнее https://green-api.com/docs/api/service/deleteMessage/
//
// Параметры:
//  ИдЧата - Строка - Идентификатор корреспондента или группового чата
//  ИдСообщения - Строка - Идентификатор удаляемого сообщения
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция УдалитьСообщение(ИдЧата, ИдСообщения) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", ИдЧата);
	Структура.Вставить("idMessage", ИдСообщения);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапросБезОтвета(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "deleteMessage"), Тело);
	
КонецФункции

// Метод предназначен для изменения настроек исчезающих сообщений в чатах.
// Используются стандартные настройки приложения: 0 (выключено), 86400 (24 часа),
// 604800 (7 дней), 7776000 (90 дней).
// Подробнее https://green-api.com/docs/api/service/SetDisappearingChat/
//
// Параметры:
//  ИдЧата - Строка - Идентификатор корреспондента или группового чата
//  ВремяЖизни - Число - Время жизни сообщения в секундах - 0 (выключено), 86400 (24 часа), 604800 (7 дней), 7776000 (90 дней).
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция УстановитьИсчезающиеСообщения(ИдЧата, ВремяЖизни) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", ИдЧата);
	Структура.Вставить("ephemeralExpiration", ВремяЖизни);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "setDisappearingChat"), Тело);
	
КонецФункции
#КонецОбласти 

#Область Партнер

// Метод предназначен для получения всех инстансов аккаунтов созданных партнёром. 
// Подробнее https://green-api.com/docs/partners/getInstances/
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьВсеИнстансы() Экспорт
	
	ТокенПартнера    = PartnerToken;
	URLМетодаСервиса = URLМетодаСервисаПартнер(ТокенПартнера, "getInstances");
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса, Истина);
	
	Возврат Ответ;	
	
КонецФункции   

// Метод предназначен для создания инстанса аккаунта мессенджера от имени партнёра.
// Подробнее https://green-api.com/docs/partners/createInstance/
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
// ВНИМАНИЕ! Инстанс создается с настройками по умолчанию, после создания ОБЯЗАТЕЛЬНО 
// надо установить необходимые настройки в настройках инстанса в личном кабинете
// или через метод УстановитьНастройкуСервиса().
Функция СоздатьИнстанс() Экспорт
	
	ТокенПартнера    = PartnerToken;
	URLМетодаСервиса = URLМетодаСервисаПартнер(ТокенПартнера, "createInstance");
	
	Структура = Новый Структура;
	Структура.Вставить("webhookUrl", "https://mysite.com/webhook/green-api/");
	Структура.Вставить("webhookUrlToken", "f93537eb3e8fed66847b5bd");  
	Структура.Вставить("delaySendMessagesMilliseconds", 1000); 	
	Структура.Вставить("markIncomingMessagesReaded", "no");   
	Структура.Вставить("markIncomingMessagesReadedOnReply", "no");
	Структура.Вставить("outgoingWebhook", "yes");
	Структура.Вставить("outgoingMessageWebhook", "yes");
	Структура.Вставить("incomingWebhook", "yes");
	Структура.Вставить("deviceWebhook", "no");
	Структура.Вставить("stateWebhook", "no");
	Структура.Вставить("enableMessagesHistory", "no");
	Структура.Вставить("keepOnlineStatus", "no");
	
	Тело  = СериализоватьВJSONСтроку(Структура);
	Ответ = ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса, Тело);	
	
	Возврат Ответ;
	
КонецФункции  

// Метод предназначен для удаления инстанса аккаунта партнёра.
// Подробнее https://green-api.com/docs/partners/deleteInstanceAccount/
//
// Параметры:  
//  ИдИнстанса - Число - ID удаляемого инстанса
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция УдалитьИнстанс(Знач ИдИнстанса) Экспорт
	
	ТокенПартнера    = PartnerToken;
	URLМетодаСервиса = URLМетодаСервисаПартнер(ТокенПартнера, "deleteInstanceAccount");
	
	Структура = Новый Структура;
	Структура.Вставить("idInstance", ИдИнстанса);
	
	Тело  = СериализоватьВJSONСтроку(Структура);
	Ответ = ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса, Тело);	
	
	Возврат Ответ;
	
КонецФункции 

#КонецОбласти

#КонецОбласти

#Область HttpКлиент

Функция ОтправитьФайлPOSTЗапрос(Хост, Адрес, Заголовки, ТелоЗапроса)
	
	Сертификат = Новый ЗащищенноеСоединениеOpenSSL();
	Соединение = Новый HTTPСоединение(Хост,,,,,60, Сертификат);
	
	ВебЗапрос = Новый HTTPЗапрос(Адрес,Заголовки);
	ВебЗапрос.УстановитьТелоИзДвоичныхДанных(ТелоЗапроса);
	
	Ответ = Соединение.ОтправитьДляОбработки(ВебЗапрос);
	Если Ответ.КодСостояния = 200 Тогда 
		Чтение = Новый ЧтениеJSON();
		Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ПрочитанныйОтвет = ПрочитатьJSON(Чтение);
		Чтение.Закрыть();
		Возврат ПрочитанныйОтвет;
	Иначе
		ВызватьИсключение 	Ответ.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
КонецФункции

Функция ОтправитьGETЗапрос(Хост, Адрес, Защищенное)
	
	Если Защищенное Тогда
		
		Сертификат = Новый ЗащищенноеСоединениеOpenSSL();
		Соединение = Новый HTTPСоединение(Хост,,,,,60, Сертификат);
		
	Иначе
		
		Соединение = Новый HTTPСоединение(Хост,,,,,60);
		
	КонецЕсли;
	
	ВебЗапрос = Новый HTTPЗапрос(Адрес);
	Ответ = Соединение.Получить(ВебЗапрос);
	Если Ответ.КодСостояния = 200 Тогда
		ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
		Если Не ПустаяСтрока(ТелоОтвета) Тогда
			Чтение = Новый ЧтениеJSON();
			Чтение.УстановитьСтроку(ТелоОтвета);
			ПрочитанныйОтвет = ПрочитатьJSON(Чтение);
			Чтение.Закрыть();
			Возврат ПрочитанныйОтвет;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		ТекстОшибки = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		ВызватьИсключение ПодставитьПараметрыВСтроку("Сервер вернул статус %1. 
		|%2", Ответ.КодСостояния, ТекстОшибки);
	КонецЕсли;
	
КонецФункции

Функция ОтправитьPOSTЗапрос(Хост, Адрес, Тело)
	
	Сертификат = Новый ЗащищенноеСоединениеOpenSSL();
	Соединение = Новый HTTPСоединение(Хост,,,,,60, Сертификат);
	
	ВебЗапрос = Новый HTTPЗапрос(Адрес);
	ВебЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	
	ВебЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ = Соединение.ОтправитьДляОбработки(ВебЗапрос);
	
	Если Ответ.КодСостояния = 200 Тогда			
		Чтение 			= Новый ЧтениеJSON();
		ТелоКакСтрока 	= Ответ.ПолучитьТелоКакСтроку();
		
		Если ПустаяСтрока(ТелоКакСтрока) Тогда
			ТелоКакСтрока = "{""idMessage"":""""}";
		КонецЕсли;		
		
		Чтение.УстановитьСтроку(ТелоКакСтрока);
		
		ПрочитанныйОтвет = ПрочитатьJSON(Чтение);
		Чтение.Закрыть();
		Возврат ПрочитанныйОтвет;
	Иначе
		ТекстОшибки = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		ВызватьИсключение ПодставитьПараметрыВСтроку("Сервер вернул статус %1. 
		|%2", Ответ.КодСостояния, ТекстОшибки);
	КонецЕсли;
	
КонецФункции

Функция ОтправитьPOSTЗапросБезОтвета(Хост, Адрес, Тело)
	
	Сертификат = Новый ЗащищенноеСоединениеOpenSSL();
	Соединение = Новый HTTPСоединение(Хост,,,,,60, Сертификат);
	
	ВебЗапрос = Новый HTTPЗапрос(Адрес);
	ВебЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	
	ВебЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ = Соединение.ОтправитьДляОбработки(ВебЗапрос);
	Если Ответ.КодСостояния = 200 Тогда
		Возврат Истина;
	Иначе
		ТекстОшибки = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		ВызватьИсключение ПодставитьПараметрыВСтроку("Сервер вернул статус %1. 
		|%2", Ответ.КодСостояния, ТекстОшибки);
	КонецЕсли;
	
КонецФункции

Функция ОтправитьDELETEЗапрос(Хост, Адрес, Защищенное)
	
	Если Защищенное Тогда
		
		Сертификат = Новый ЗащищенноеСоединениеOpenSSL();
		Соединение = Новый HTTPСоединение(Хост,,,,,60, Сертификат);
		
	Иначе
		
		Соединение = Новый HTTPСоединение(Хост,,,,,60);
		
	КонецЕсли;
	
	ВебЗапрос = Новый HTTPЗапрос(Адрес);
	Ответ = Соединение.ВызватьHTTPМетод("DELETE", ВебЗапрос);
	Если Ответ.КодСостояния = 200 Тогда
		Чтение = Новый ЧтениеJSON();
		Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ПрочитанныйОтвет = ПрочитатьJSON(Чтение);
		Чтение.Закрыть();
		Возврат ПрочитанныйОтвет;
	Иначе
		ТекстОшибки = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		ВызватьИсключение ПодставитьПараметрыВСтроку("Сервер вернул статус %1. 
		|%2", Ответ.КодСостояния, ТекстОшибки);
	КонецЕсли;
	
КонецФункции

// РАБОТА С FORM-DATA

Функция ПараметрFormData(ИмяСообщения, Текст)
	Поток = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(Поток);
	// Заголовки
	ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""" + ИмяСообщения + """");
	ЗаписьДанных.ЗаписатьСтроку("");
	// Тело
	ЗаписьДанных.ЗаписатьСтроку(Текст);
	ЗаписьДанных.Закрыть();
	Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
КонецФункции

Функция ФайлFormData(ИмяСообщения, ПутьКФайлу, ДвоичныеДанные)
	
	Файл = Новый Файл(ПутьКФайлу);
	Если Не Файл.Существует() Тогда
		ВызватьИсключение "Файл не существует! Адрес: " +  ПутьКФайлу;
	КонецЕсли;
	
	
	Поток = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(Поток);
	// Заголовки
	ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""" + ИмяСообщения + """; filename=""" + Файл.Имя + """");
	ЗаписьДанных.ЗаписатьСтроку("Content-Type: " + ПолучитьMimeTypeПоРасширению(Файл.Расширение));
	ЗаписьДанных.ЗаписатьСтроку("");
	// Тело
	ЗаписьДанных.Записать(ДвоичныеДанные);
	ЗаписьДанных.Закрыть();

	Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСтатусСервиса(ТекстОшибки = "") Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Попытка
		Ответ = ПолучитьСостояниеАккаунта();
		Авторизован = НРег(Ответ.stateInstance) = "authorized";
		Если Не Авторизован Тогда
			ТекстОшибки = "Сервер вернул статус, " + Ответ.stateInstance;
		КонецЕсли;
		Возврат Ответ.stateInstance;
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат "error";
	КонецПопытки;
	
КонецФункции

Функция УстановитьНастройкуСервиса(Ключ, Значение) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить(Ключ, Значение);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Ответ = ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "setSettings"), Тело);
	Возврат Ответ.saveSettings;
	
КонецФункции

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры,
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение,
//  Строка   - текстовая строка с подставленными параметрами.
//
// Пример,
//  ПодставитьПараметрыВСтроку(НСтр("ru="%1 пошел в %2""), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
//
// Примечание,
//  В случаях, когда число используемых параметров в строке совпадает с числом переданных для подстановки параметров,
//  рекомендуется использовать функцию платформы СтрШаблон.
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	
	Возврат СтрокаПодстановки;
	
КонецФункции

Функция ХостПоУмолчанию() Экспорт
	
	Если ЗначениеЗаполнено(apiUrl) Тогда	
		Результат = apiUrl;
	Иначе 
		Результат = "api.green-api.com";
	КонецЕсли;     
	
	Возврат Результат;
	
КонецФункции

Функция ХостМедиаПоУмолчанию() Экспорт 
	
	Если ЗначениеЗаполнено(mediaUrl) Тогда	
		Результат = mediaUrl;
	Иначе 
		Результат = "media.green-api.com";
	КонецЕсли;     
	
	Возврат Результат;
	
КонецФункции

Функция ХостВебхуковПоУмолчанию() Экспорт
	Возврат "";
КонецФункции

Функция URLМетодаСервиса(Инстанс, Токен, Метод)
	Возврат ПодставитьПараметрыВСтроку("waInstance%1/%2/%3", Инстанс, Метод, Токен);
КонецФункции

Функция URLМетодаСервисаПартнер(ТокенПартнера, Метод)
	Возврат ПодставитьПараметрыВСтроку("partner/%1/%2/", Метод, ТокенПартнера);
КонецФункции  

Функция URLМетодаСервисаПараметр(Инстанс, Токен, Метод, ПараметрИмя, ПараметрЗначение)
	Возврат ПодставитьПараметрыВСтроку("waInstance%1/%2/%3?%4=%5", Инстанс, Метод, Токен, ПараметрИмя, ПараметрЗначение);
КонецФункции

Функция РазбитьURL(УРЛ)  
	
	Если СтрНайти(УРЛ, "https://") = 0 Тогда
		Возврат Новый Структура("Хост, ОтносительныйАдрес", Неопределено, Неопределено)	
	КонецЕсли; 
	
	ЧастиУРЛ = СтрРазделить(УРЛ, "//", Ложь);
	Хост     = ЧастиУРЛ[1];
	ЧастиУРЛ.Удалить(0); // протокол https
	ЧастиУРЛ.Удалить(0); // имя хоста
	ОтносительныйАдрес = СтрСоединить(ЧастиУРЛ, "/");
	
	Возврат Новый Структура("Хост, ОтносительныйАдрес", Хост, ОтносительныйАдрес);
	
КонецФункции

Функция ПараметрИдЧата(Телефон)
	Возврат Формат(Число(Телефон), "ЧГ=") + "@c.us"
КонецФункции

Функция НомерВерсии()
	Возврат "0.0.60";
КонецФункции

Функция ВерсияОбработки() Экспорт
	Возврат "Green API v" + НомерВерсии();
КонецФункции

Функция УстановитьНастройкиСервисаПоДефолту() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("webhookUrl", ХостВебхуковПоУмолчанию());
	Структура.Вставить("webhookUrlToken", "");
	Структура.Вставить("incomingWebhook", "yes");  
	Структура.Вставить("outgoingWebhook", "yes");	
	Структура.Вставить("stateWebhook"   , "yes");		
	
	Возврат УстановитьНастройкиАккаунта(Структура).saveSettings;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()
    
    Команды = Новый ТаблицаЗначений;
    Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 
    Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
    Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
    Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
    Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	
    Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, 
						  Представление, 
						  Идентификатор, 
						  Использование = "ОткрытиеФормы", 
						  ПоказыватьОповещение = Ложь, 
						  Модификатор = "ПечатьMXL")
    
    НоваяКоманда = ТаблицаКоманд.Добавить();
    НоваяКоманда.Представление = Представление;
    НоваяКоманда.Идентификатор = Идентификатор;
    НоваяКоманда.Использование = Использование;
    НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
    НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры 

#КонецОбласти

#Область JSON

Функция СериализоватьВJSONСтроку(Данные) Экспорт
	
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Данные);
	СтрокаJSON = Запись.Закрыть();
	Возврат СтрЗаменить(СтрокаJSON, "\\", "\"); // Для emodji в формате UTF-16 "\ud83d\ude00"
	
КонецФункции

#КонецОбласти

#Область MimeTypes

Функция ПолучитьРасширениеПоMimeType(ИскомыйТип)
	
	Типы = СоответствиеMimeTypes();
	
	Для каждого КлючЗначение Из Типы Цикл
		Если НРег(ИскомыйТип) = НРег(КлючЗначение.Значение) Тогда
			Возврат КлючЗначение.Ключ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьMimeTypeПоРасширению(ИскомоеРасширение)
	
	Типы = СоответствиеMimeTypes();
	
	Если Не ЗначениеЗаполнено(ИскомоеРасширение) Тогда
		Возврат Типы.Получить(".bin");
	КонецЕсли;
	
	Для каждого КлючЗначение Из Типы Цикл
		Если НРег(ИскомоеРасширение) = НРег(КлючЗначение.Ключ) Тогда
			Возврат КлючЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Типы.Получить(".bin");
	
КонецФункции

Функция СоответствиеMimeTypes() 

	Типы = Новый Соответствие;
	
	Типы.Вставить(".ez",       "application/andrew-inset");
	Типы.Вставить(".aw",       "application/applixware");
	Типы.Вставить(".atom",     "application/atom+xml");
	Типы.Вставить(".atomcat",  "application/atomcat+xml");
	Типы.Вставить(".atomsvc",  "application/atomsvc+xml");
	Типы.Вставить(".ccxml",    "application/ccxml+xml");
	Типы.Вставить(".cdmia",    "application/cdmi-capability");
	Типы.Вставить(".cdmic",    "application/cdmi-container");
	Типы.Вставить(".cdmid",    "application/cdmi-domain");
	Типы.Вставить(".cdmio",    "application/cdmi-object");
	Типы.Вставить(".cdmiq",    "application/cdmi-queue");
	Типы.Вставить(".cu",       "application/cu-seeme");
	Типы.Вставить(".davmount", "application/davmount+xml");
	Типы.Вставить(".dbk",      "application/docbook+xml");
	Типы.Вставить(".dssc",     "application/dssc+der");
	Типы.Вставить(".xdssc",    "application/dssc+xml");
	Типы.Вставить(".ecma",     "application/ecmascript");
	Типы.Вставить(".emma",     "application/emma+xml");
	Типы.Вставить(".epub",     "application/epub+zip");
	Типы.Вставить(".exi",      "application/exi");
	Типы.Вставить(".pfr",      "application/font-tdpfr");
	Типы.Вставить(".gml",      "application/gml+xml");
	Типы.Вставить(".gpx",      "application/gpx+xml");
	Типы.Вставить(".gxf",      "application/gxf");
	Типы.Вставить(".stk",      "application/hyperstudio");
	Типы.Вставить(".ink",      "application/inkml+xml");
	Типы.Вставить(".inkml",    "application/inkml+xml");
	Типы.Вставить(".ipfix",    "application/ipfix");
	Типы.Вставить(".jar",      "application/java-archive");
	Типы.Вставить(".ser",      "application/java-serialized-object");
	Типы.Вставить(".class",    "application/java-vm");
	Типы.Вставить(".json",     "application/json");
	Типы.Вставить(".jsonml",   "application/jsonml+json");
	Типы.Вставить(".lostxml",  "application/lost+xml");
	Типы.Вставить(".hqx",      "application/mac-binhex40");
	Типы.Вставить(".cpt",      "application/mac-compactpro");
	Типы.Вставить(".mads",     "application/mads+xml");
	Типы.Вставить(".mrc",      "application/marc");
	Типы.Вставить(".mrcx",     "application/marcxml+xml");
	Типы.Вставить(".ma",       "application/mathematica");
	Типы.Вставить(".nb",       "application/mathematica");
	Типы.Вставить(".mb",       "application/mathematica");
	Типы.Вставить(".mathml",   "application/mathml+xml");
	Типы.Вставить(".mbox",     "application/mbox");
	Типы.Вставить(".mscml",    "application/mediaservercontrol+xml");
	Типы.Вставить(".metalink", "application/metalink+xml");
	Типы.Вставить(".meta4",    "application/metalink4+xml");
	Типы.Вставить(".mets",     "application/mets+xml");
	Типы.Вставить(".mods",     "application/mods+xml");
	Типы.Вставить(".m21",      "application/mp21");
	Типы.Вставить(".mp21",     "application/mp21");
	Типы.Вставить(".mp4s",     "application/mp4");
	Типы.Вставить(".doc",      "application/msword");
	Типы.Вставить(".dot",      "application/msword");
	Типы.Вставить(".mxf",      "application/mxf");
	Типы.Вставить(".bin",      "application/octet-stream");
	Типы.Вставить(".dms",      "application/octet-stream");
	Типы.Вставить(".lrf",      "application/octet-stream");
	Типы.Вставить(".mar",      "application/octet-stream");
	Типы.Вставить(".so",       "application/octet-stream");
	Типы.Вставить(".dist",     "application/octet-stream");
	Типы.Вставить(".distz",    "application/octet-stream");
	Типы.Вставить(".pkg",      "application/octet-stream");
	Типы.Вставить(".bpk",      "application/octet-stream");
	Типы.Вставить(".dump",     "application/octet-stream");
	Типы.Вставить(".elc",      "application/octet-stream");
	Типы.Вставить(".deploy",   "application/octet-stream");
	Типы.Вставить(".oda",      "application/oda");
	Типы.Вставить(".opf",      "application/oebps-package+xml");
	Типы.Вставить(".ogx",      "application/ogg");
	Типы.Вставить(".omdoc",    "application/omdoc+xml");
	Типы.Вставить(".onetoc",   "application/onenote");
	Типы.Вставить(".onetoc2",  "application/onenote");
	Типы.Вставить(".onetmp",   "application/onenote");
	Типы.Вставить(".onepkg",   "application/onenote");
	Типы.Вставить(".oxps",     "application/oxps");
	Типы.Вставить(".xer",      "application/patch-ops-error+xml");
	Типы.Вставить(".pdf",      "application/pdf");
	Типы.Вставить(".pgp",      "application/pgp-encrypted");
	Типы.Вставить(".asc",      "application/pgp-signature");
	Типы.Вставить(".sig",      "application/pgp-signature");
	Типы.Вставить(".prf",      "application/pics-rules");
	Типы.Вставить(".p10",      "application/pkcs10");
	Типы.Вставить(".p7m",      "application/pkcs7-mime");
	Типы.Вставить(".p7c",      "application/pkcs7-mime");
	Типы.Вставить(".p7s",      "application/pkcs7-signature");
	Типы.Вставить(".p8",       "application/pkcs8");
	Типы.Вставить(".ac",       "application/pkix-attr-cert");
	Типы.Вставить(".cer",      "application/pkix-cert");
	Типы.Вставить(".crl",      "application/pkix-crl");
	Типы.Вставить(".pkipath",  "application/pkix-pkipath");
	Типы.Вставить(".pki",      "application/pkixcmp");
	Типы.Вставить(".pls",      "application/pls+xml");
	Типы.Вставить(".ai",       "application/postscript");
	Типы.Вставить(".eps",      "application/postscript");
	Типы.Вставить(".ps",       "application/postscript");
	Типы.Вставить(".cww",      "application/prs.cww");
	Типы.Вставить(".pskcxml",  "application/pskc+xml");
	Типы.Вставить(".rdf",      "application/rdf+xml");
	Типы.Вставить(".rif",      "application/reginfo+xml");
	Типы.Вставить(".rnc",      "application/relax-ng-compact-syntax");
	Типы.Вставить(".rl",       "application/resource-lists+xml");
	Типы.Вставить(".rld",      "application/resource-lists-diff+xml");
	Типы.Вставить(".rs",       "application/rls-services+xml");
	Типы.Вставить(".gbr",      "application/rpki-ghostbusters");
	Типы.Вставить(".mft",      "application/rpki-manifest");
	Типы.Вставить(".roa",      "application/rpki-roa");
	Типы.Вставить(".rsd",      "application/rsd+xml");
	Типы.Вставить(".rss",      "application/rss+xml");
	Типы.Вставить(".rtf",      "application/rtf");
	Типы.Вставить(".sbml",     "application/sbml+xml");
	Типы.Вставить(".scq",      "application/scvp-cv-request");
	Типы.Вставить(".scs",      "application/scvp-cv-response");
	Типы.Вставить(".spq",      "application/scvp-vp-request");
	Типы.Вставить(".spp",      "application/scvp-vp-response");
	Типы.Вставить(".sdp",      "application/sdp");
	Типы.Вставить(".setpay",   "application/set-payment-initiation");
	Типы.Вставить(".setreg",   "application/set-registration-initiation");
	Типы.Вставить(".shf",      "application/shf+xml");
	Типы.Вставить(".smi",      "application/smil+xml");
	Типы.Вставить(".smil",     "application/smil+xml");
	Типы.Вставить(".rq",       "application/sparql-query");
	Типы.Вставить(".srx",      "application/sparql-results+xml");
	Типы.Вставить(".gram",     "application/srgs");
	Типы.Вставить(".grxml",    "application/srgs+xml");
	Типы.Вставить(".sru",      "application/sru+xml");
	Типы.Вставить(".ssdl",     "application/ssdl+xml");
	Типы.Вставить(".ssml",     "application/ssml+xml");
	Типы.Вставить(".tei",      "application/tei+xml");
	Типы.Вставить(".teicorpus", "application/tei+xml");
	Типы.Вставить(".tfi",      "application/thraud+xml");
	Типы.Вставить(".tsd",      "application/timestamped-data");
	Типы.Вставить(".plb",      "application/vnd.3gpp.pic-bw-large");
	Типы.Вставить(".psb",      "application/vnd.3gpp.pic-bw-small");
	Типы.Вставить(".pvb",      "application/vnd.3gpp.pic-bw-var");
	Типы.Вставить(".tcap",     "application/vnd.3gpp2.tcap");
	Типы.Вставить(".pwn",      "application/vnd.3m.post-it-notes");
	Типы.Вставить(".aso",      "application/vnd.accpac.simply.aso");
	Типы.Вставить(".imp",      "application/vnd.accpac.simply.imp");
	Типы.Вставить(".acu",      "application/vnd.acucobol");
	Типы.Вставить(".atc",      "application/vnd.acucorp");
	Типы.Вставить(".acutc",    "application/vnd.acucorp");
	Типы.Вставить(".air",      "application/vnd.adobe.air-application-installer-package+zip");
	Типы.Вставить(".fcdt",     "application/vnd.adobe.formscentral.fcdt");
	Типы.Вставить(".fxp",      "application/vnd.adobe.fxp");
	Типы.Вставить(".fxpl",     "application/vnd.adobe.fxp");
	Типы.Вставить(".xdp",      "application/vnd.adobe.xdp+xml");
	Типы.Вставить(".xfdf",     "application/vnd.adobe.xfdf");
	Типы.Вставить(".ahead",    "application/vnd.ahead.space");
	Типы.Вставить(".azf",      "application/vnd.airzip.filesecure.azf");
	Типы.Вставить(".azs",      "application/vnd.airzip.filesecure.azs");
	Типы.Вставить(".azw",      "application/vnd.amazon.ebook");
	Типы.Вставить(".acc",      "application/vnd.americandynamics.acc");
	Типы.Вставить(".ami",      "application/vnd.amiga.ami");
	Типы.Вставить(".apk",      "application/vnd.android.package-archive");
	Типы.Вставить(".cii",      "application/vnd.anser-web-certificate-issue-initiation");
	Типы.Вставить(".fti",      "application/vnd.anser-web-funds-transfer-initiation");
	Типы.Вставить(".atx",      "application/vnd.antix.game-component");
	Типы.Вставить(".mpkg",     "application/vnd.apple.installer+xml");
	Типы.Вставить(".m3u8",     "application/vnd.apple.mpegurl");
	Типы.Вставить(".swi",      "application/vnd.aristanetworks.swi");
	Типы.Вставить(".iota",     "application/vnd.astraea-software.iota");
	Типы.Вставить(".aep",      "application/vnd.audiograph");
	Типы.Вставить(".mpm",      "application/vnd.blueice.multipass");
	Типы.Вставить(".bmi",      "application/vnd.bmi");
	Типы.Вставить(".rep",      "application/vnd.businessobjects");
	Типы.Вставить(".cdxml",    "application/vnd.chemdraw+xml");
	Типы.Вставить(".mmd",      "application/vnd.chipnuts.karaoke-mmd");
	Типы.Вставить(".cdy",      "application/vnd.cinderella");
	Типы.Вставить(".cla",      "application/vnd.claymore");
	Типы.Вставить(".rp9",      "application/vnd.cloanto.rp9");
	Типы.Вставить(".c4g",      "application/vnd.clonk.c4group");
	Типы.Вставить(".c4d",      "application/vnd.clonk.c4group");
	Типы.Вставить(".c4f",      "application/vnd.clonk.c4group");
	Типы.Вставить(".c4p",      "application/vnd.clonk.c4group");
	Типы.Вставить(".c4u",      "application/vnd.clonk.c4group");
	Типы.Вставить(".c11amc",   "application/vnd.cluetrust.cartomobile-config");
	Типы.Вставить(".c11amz",   "application/vnd.cluetrust.cartomobile-config-pkg");
	Типы.Вставить(".csp",      "application/vnd.commonspace");
	Типы.Вставить(".cdbcmsg",  "application/vnd.contact.cmsg");
	Типы.Вставить(".cmc",      "application/vnd.cosmocaller");
	Типы.Вставить(".clkx",     "application/vnd.crick.clicker");
	Типы.Вставить(".clkk",     "application/vnd.crick.clicker.keyboard");
	Типы.Вставить(".clkp",     "application/vnd.crick.clicker.palette");
	Типы.Вставить(".clkt",     "application/vnd.crick.clicker.template");
	Типы.Вставить(".clkw",     "application/vnd.crick.clicker.wordbank");
	Типы.Вставить(".wbs",      "application/vnd.criticaltools.wbs+xml");
	Типы.Вставить(".pml",      "application/vnd.ctc-posml");
	Типы.Вставить(".ppd",      "application/vnd.cups-ppd");
	Типы.Вставить(".car",      "application/vnd.curl.car");
	Типы.Вставить(".pcurl",    "application/vnd.curl.pcurl");
	Типы.Вставить(".dart",     "application/vnd.dart");
	Типы.Вставить(".rdz",      "application/vnd.data-vision.rdz");
	Типы.Вставить(".uvf",      "application/vnd.dece.data");
	Типы.Вставить(".uvvf",     "application/vnd.dece.data");
	Типы.Вставить(".uvd",      "application/vnd.dece.data");
	Типы.Вставить(".uvvd",     "application/vnd.dece.data");
	Типы.Вставить(".uvt",      "application/vnd.dece.ttml+xml");
	Типы.Вставить(".uvvt",     "application/vnd.dece.ttml+xml");
	Типы.Вставить(".uvx",      "application/vnd.dece.unspecified");
	Типы.Вставить(".uvvx",     "application/vnd.dece.unspecified");
	Типы.Вставить(".uvz",      "application/vnd.dece.zip");
	Типы.Вставить(".uvvz",     "application/vnd.dece.zip");
	Типы.Вставить(".fe_launch", "application/vnd.denovo.fcselayout-link");
	Типы.Вставить(".dna",      "application/vnd.dna");
	Типы.Вставить(".mlp",      "application/vnd.dolby.mlp");
	Типы.Вставить(".dpg",      "application/vnd.dpgraph");
	Типы.Вставить(".dfac",     "application/vnd.dreamfactory");
	Типы.Вставить(".kpxx",     "application/vnd.ds-keypoint");
	Типы.Вставить(".ait",      "application/vnd.dvb.ait");
	Типы.Вставить(".svc",      "application/vnd.dvb.service");
	Типы.Вставить(".geo",      "application/vnd.dynageo");
	Типы.Вставить(".mag",      "application/vnd.ecowin.chart");
	Типы.Вставить(".nml",      "application/vnd.enliven");
	Типы.Вставить(".esf",      "application/vnd.epson.esf");
	Типы.Вставить(".msf",      "application/vnd.epson.msf");
	Типы.Вставить(".qam",      "application/vnd.epson.quickanime");
	Типы.Вставить(".slt",      "application/vnd.epson.salt");
	Типы.Вставить(".ssf",      "application/vnd.epson.ssf");
	Типы.Вставить(".es3",      "application/vnd.eszigno3+xml");
	Типы.Вставить(".et3",      "application/vnd.eszigno3+xml");
	Типы.Вставить(".ez2",      "application/vnd.ezpix-album");
	Типы.Вставить(".ez3",      "application/vnd.ezpix-package");
	Типы.Вставить(".fdf",      "application/vnd.fdf");
	Типы.Вставить(".mseed",    "application/vnd.fdsn.mseed");
	Типы.Вставить(".seed",     "application/vnd.fdsn.seed");
	Типы.Вставить(".dataless", "application/vnd.fdsn.seed");
	Типы.Вставить(".gph",      "application/vnd.flographit");
	Типы.Вставить(".ftc",      "application/vnd.fluxtime.clip");
	Типы.Вставить(".fm",       "application/vnd.framemaker");
	Типы.Вставить(".frame",    "application/vnd.framemaker");
	Типы.Вставить(".maker",    "application/vnd.framemaker");
	Типы.Вставить(".book",     "application/vnd.framemaker");
	Типы.Вставить(".fnc",      "application/vnd.frogans.fnc");
	Типы.Вставить(".ltf",      "application/vnd.frogans.ltf");
	Типы.Вставить(".fsc",      "application/vnd.fsc.weblaunch");
	Типы.Вставить(".oas",      "application/vnd.fujitsu.oasys");
	Типы.Вставить(".oa2",      "application/vnd.fujitsu.oasys2");
	Типы.Вставить(".oa3",      "application/vnd.fujitsu.oasys3");
	Типы.Вставить(".fg5",      "application/vnd.fujitsu.oasysgp");
	Типы.Вставить(".bh2",      "application/vnd.fujitsu.oasysprs");
	Типы.Вставить(".ddd",      "application/vnd.fujixerox.ddd");
	Типы.Вставить(".xdw",      "application/vnd.fujixerox.docuworks");
	Типы.Вставить(".xbd",      "application/vnd.fujixerox.docuworks.binder");
	Типы.Вставить(".fzs",      "application/vnd.fuzzysheet");
	Типы.Вставить(".txd",      "application/vnd.genomatix.tuxedo");
	Типы.Вставить(".ggb",      "application/vnd.geogebra.file");
	Типы.Вставить(".ggt",      "application/vnd.geogebra.tool");
	Типы.Вставить(".gex",      "application/vnd.geometry-explorer");
	Типы.Вставить(".gre",      "application/vnd.geometry-explorer");
	Типы.Вставить(".gxt",      "application/vnd.geonext");
	Типы.Вставить(".g2w",      "application/vnd.geoplan");
	Типы.Вставить(".g3w",      "application/vnd.geospace");
	Типы.Вставить(".gmx",      "application/vnd.gmx");
	Типы.Вставить(".kml",      "application/vnd.google-earth.kml+xml");
	Типы.Вставить(".kmz",      "application/vnd.google-earth.kmz");
	Типы.Вставить(".gqf",      "application/vnd.grafeq");
	Типы.Вставить(".gqs",      "application/vnd.grafeq");
	Типы.Вставить(".gac",      "application/vnd.groove-account");
	Типы.Вставить(".ghf",      "application/vnd.groove-help");
	Типы.Вставить(".gim",      "application/vnd.groove-identity-message");
	Типы.Вставить(".grv",      "application/vnd.groove-injector");
	Типы.Вставить(".gtm",      "application/vnd.groove-tool-message");
	Типы.Вставить(".tpl",      "application/vnd.groove-tool-template");
	Типы.Вставить(".vcg",      "application/vnd.groove-vcard");
	Типы.Вставить(".hal",      "application/vnd.hal+xml");
	Типы.Вставить(".zmm",      "application/vnd.handheld-entertainment+xml");
	Типы.Вставить(".hbci",     "application/vnd.hbci");
	Типы.Вставить(".les",      "application/vnd.hhe.lesson-player");
	Типы.Вставить(".hpgl",     "application/vnd.hp-hpgl");
	Типы.Вставить(".hpid",     "application/vnd.hp-hpid");
	Типы.Вставить(".hps",      "application/vnd.hp-hps");
	Типы.Вставить(".jlt",      "application/vnd.hp-jlyt");
	Типы.Вставить(".pcl",      "application/vnd.hp-pcl");
	Типы.Вставить(".pclxl",    "application/vnd.hp-pclxl");
	Типы.Вставить(".sfd-hdstx", "application/vnd.hydrostatix.sof-data");
	Типы.Вставить(".mpy",      "application/vnd.ibm.minipay");
	Типы.Вставить(".afp",      "application/vnd.ibm.modcap");
	Типы.Вставить(".listafp",  "application/vnd.ibm.modcap");
	Типы.Вставить(".list3820", "application/vnd.ibm.modcap");
	Типы.Вставить(".irm",      "application/vnd.ibm.rights-management");
	Типы.Вставить(".sc",       "application/vnd.ibm.secure-container");
	Типы.Вставить(".icc",      "application/vnd.iccprofile");
	Типы.Вставить(".icm",      "application/vnd.iccprofile");
	Типы.Вставить(".igl",      "application/vnd.igloader");
	Типы.Вставить(".ivp",      "application/vnd.immervision-ivp");
	Типы.Вставить(".ivu",      "application/vnd.immervision-ivu");
	Типы.Вставить(".igm",      "application/vnd.insors.igm");
	Типы.Вставить(".xpw",      "application/vnd.intercon.formnet");
	Типы.Вставить(".xpx",      "application/vnd.intercon.formnet");
	Типы.Вставить(".i2g",      "application/vnd.intergeo");
	Типы.Вставить(".qbo",      "application/vnd.intu.qbo");
	Типы.Вставить(".qfx",      "application/vnd.intu.qfx");
	Типы.Вставить(".rcprofile", "application/vnd.ipunplugged.rcprofile");
	Типы.Вставить(".irp",      "application/vnd.irepository.package+xml");
	Типы.Вставить(".xpr",      "application/vnd.is-xpr");
	Типы.Вставить(".fcs",      "application/vnd.isac.fcs");
	Типы.Вставить(".jam",      "application/vnd.jam");
	Типы.Вставить(".rms",      "application/vnd.jcp.javame.midlet-rms");
	Типы.Вставить(".jisp",     "application/vnd.jisp");
	Типы.Вставить(".joda",     "application/vnd.joost.joda-archive");
	Типы.Вставить(".ktz",      "application/vnd.kahootz");
	Типы.Вставить(".ktr",      "application/vnd.kahootz");
	Типы.Вставить(".karbon",   "application/vnd.kde.karbon");
	Типы.Вставить(".chrt",     "application/vnd.kde.kchart");
	Типы.Вставить(".kfo",      "application/vnd.kde.kformula");
	Типы.Вставить(".flw",      "application/vnd.kde.kivio");
	Типы.Вставить(".kon",      "application/vnd.kde.kontour");
	Типы.Вставить(".kpr",      "application/vnd.kde.kpresenter");
	Типы.Вставить(".kpt",      "application/vnd.kde.kpresenter");
	Типы.Вставить(".ksp",      "application/vnd.kde.kspread");
	Типы.Вставить(".kwd",      "application/vnd.kde.kword");
	Типы.Вставить(".kwt",      "application/vnd.kde.kword");
	Типы.Вставить(".htke",     "application/vnd.kenameaapp");
	Типы.Вставить(".kia",      "application/vnd.kidspiration");
	Типы.Вставить(".kne",      "application/vnd.kinar");
	Типы.Вставить(".knp",      "application/vnd.kinar");
	Типы.Вставить(".skp",      "application/vnd.koan");
	Типы.Вставить(".skd",      "application/vnd.koan");
	Типы.Вставить(".skt",      "application/vnd.koan");
	Типы.Вставить(".skm",      "application/vnd.koan");
	Типы.Вставить(".sse",      "application/vnd.kodak-descriptor");
	Типы.Вставить(".lasxml",   "application/vnd.las.las+xml");
	Типы.Вставить(".lbd",      "application/vnd.llamagraphics.life-balance.desktop");
	Типы.Вставить(".lbe",      "application/vnd.llamagraphics.life-balance.exchange+xml");
	Типы.Вставить(".123",      "application/vnd.lotus-1-2-3");
	Типы.Вставить(".apr",      "application/vnd.lotus-approach");
	Типы.Вставить(".pre",      "application/vnd.lotus-freelance");
	Типы.Вставить(".nsf",      "application/vnd.lotus-notes");
	Типы.Вставить(".org",      "application/vnd.lotus-organizer");
	Типы.Вставить(".scm",      "application/vnd.lotus-screencam");
	Типы.Вставить(".lwp",      "application/vnd.lotus-wordpro");
	Типы.Вставить(".portpkg",  "application/vnd.macports.portpkg");
	Типы.Вставить(".mcd",      "application/vnd.mcd");
	Типы.Вставить(".mc1",      "application/vnd.medcalcdata");
	Типы.Вставить(".cdkey",    "application/vnd.mediastation.cdkey");
	Типы.Вставить(".mwf",      "application/vnd.mfer");
	Типы.Вставить(".mfm",      "application/vnd.mfmp");
	Типы.Вставить(".flo",      "application/vnd.micrografx.flo");
	Типы.Вставить(".igx",      "application/vnd.micrografx.igx");
	Типы.Вставить(".mif",      "application/vnd.mif");
	Типы.Вставить(".daf",      "application/vnd.mobius.daf");
	Типы.Вставить(".dis",      "application/vnd.mobius.dis");
	Типы.Вставить(".mbk",      "application/vnd.mobius.mbk");
	Типы.Вставить(".mqy",      "application/vnd.mobius.mqy");
	Типы.Вставить(".msl",      "application/vnd.mobius.msl");
	Типы.Вставить(".plc",      "application/vnd.mobius.plc");
	Типы.Вставить(".txf",      "application/vnd.mobius.txf");
	Типы.Вставить(".mpn",      "application/vnd.mophun.application");
	Типы.Вставить(".mpc",      "application/vnd.mophun.certificate");
	Типы.Вставить(".xul",      "application/vnd.mozilla.xul+xml");
	Типы.Вставить(".cil",      "application/vnd.ms-artgalry");
	Типы.Вставить(".cab",      "application/vnd.ms-cab-compressed");
	Типы.Вставить(".xls",      "application/vnd.ms-excel");
	Типы.Вставить(".xlm",      "application/vnd.ms-excel");
	Типы.Вставить(".xla",      "application/vnd.ms-excel");
	Типы.Вставить(".xlc",      "application/vnd.ms-excel");
	Типы.Вставить(".xlt",      "application/vnd.ms-excel");
	Типы.Вставить(".xlw",      "application/vnd.ms-excel");
	Типы.Вставить(".xlam",     "application/vnd.ms-excel.addin.macroenabled.12");
	Типы.Вставить(".xlsb",     "application/vnd.ms-excel.sheet.binary.macroenabled.12");
	Типы.Вставить(".xlsm",     "application/vnd.ms-excel.sheet.macroenabled.12");
	Типы.Вставить(".xltm",     "application/vnd.ms-excel.template.macroenabled.12");
	Типы.Вставить(".eot",      "application/vnd.ms-fontobject");
	Типы.Вставить(".chm",      "application/vnd.ms-htmlhelp");
	Типы.Вставить(".ims",      "application/vnd.ms-ims");
	Типы.Вставить(".lrm",      "application/vnd.ms-lrm");
	Типы.Вставить(".thmx",     "application/vnd.ms-officetheme");
	Типы.Вставить(".cat",      "application/vnd.ms-pki.seccat");
	Типы.Вставить(".stl",      "application/vnd.ms-pki.stl");
	Типы.Вставить(".ppt",      "application/vnd.ms-powerpoint");
	Типы.Вставить(".pps",      "application/vnd.ms-powerpoint");
	Типы.Вставить(".pot",      "application/vnd.ms-powerpoint");
	Типы.Вставить(".ppam",     "application/vnd.ms-powerpoint.addin.macroenabled.12");
	Типы.Вставить(".pptm",     "application/vnd.ms-powerpoint.presentation.macroenabled.12");
	Типы.Вставить(".sldm",     "application/vnd.ms-powerpoint.slide.macroenabled.12");
	Типы.Вставить(".ppsm",     "application/vnd.ms-powerpoint.slideshow.macroenabled.12");
	Типы.Вставить(".potm",     "application/vnd.ms-powerpoint.template.macroenabled.12");
	Типы.Вставить(".mpp",      "application/vnd.ms-project");
	Типы.Вставить(".mpt",      "application/vnd.ms-project");
	Типы.Вставить(".docm",     "application/vnd.ms-word.document.macroenabled.12");
	Типы.Вставить(".dotm",     "application/vnd.ms-word.template.macroenabled.12");
	Типы.Вставить(".wps",      "application/vnd.ms-works");
	Типы.Вставить(".wks",      "application/vnd.ms-works");
	Типы.Вставить(".wcm",      "application/vnd.ms-works");
	Типы.Вставить(".wdb",      "application/vnd.ms-works");
	Типы.Вставить(".wpl",      "application/vnd.ms-wpl");
	Типы.Вставить(".xps",      "application/vnd.ms-xpsdocument");
	Типы.Вставить(".mseq",     "application/vnd.mseq");
	Типы.Вставить(".mus",      "application/vnd.musician");
	Типы.Вставить(".msty",     "application/vnd.muvee.style");
	Типы.Вставить(".taglet",   "application/vnd.mynfc");
	Типы.Вставить(".nlu",      "application/vnd.neurolanguage.nlu");
	Типы.Вставить(".ntf",      "application/vnd.nitf");
	Типы.Вставить(".nitf",     "application/vnd.nitf");
	Типы.Вставить(".nnd",      "application/vnd.noblenet-directory");
	Типы.Вставить(".nns",      "application/vnd.noblenet-sealer");
	Типы.Вставить(".nnw",      "application/vnd.noblenet-web");
	Типы.Вставить(".ngdat",    "application/vnd.nokia.n-gage.data");
	Типы.Вставить(".n-gage",   "application/vnd.nokia.n-gage.symbian.install");
	Типы.Вставить(".rpst",     "application/vnd.nokia.radio-preset");
	Типы.Вставить(".rpss",     "application/vnd.nokia.radio-presets");
	Типы.Вставить(".edm",      "application/vnd.novadigm.edm");
	Типы.Вставить(".edx",      "application/vnd.novadigm.edx");
	Типы.Вставить(".ext",      "application/vnd.novadigm.ext");
	Типы.Вставить(".odc",      "application/vnd.oasis.opendocument.chart");
	Типы.Вставить(".otc",      "application/vnd.oasis.opendocument.chart-template");
	Типы.Вставить(".odb",      "application/vnd.oasis.opendocument.database");
	Типы.Вставить(".odf",      "application/vnd.oasis.opendocument.formula");
	Типы.Вставить(".odft",     "application/vnd.oasis.opendocument.formula-template");
	Типы.Вставить(".odg",      "application/vnd.oasis.opendocument.graphics");
	Типы.Вставить(".otg",      "application/vnd.oasis.opendocument.graphics-template");
	Типы.Вставить(".odi",      "application/vnd.oasis.opendocument.image");
	Типы.Вставить(".oti",      "application/vnd.oasis.opendocument.image-template");
	Типы.Вставить(".odp",      "application/vnd.oasis.opendocument.presentation");
	Типы.Вставить(".otp",      "application/vnd.oasis.opendocument.presentation-template");
	Типы.Вставить(".ods",      "application/vnd.oasis.opendocument.spreadsheet");
	Типы.Вставить(".ots",      "application/vnd.oasis.opendocument.spreadsheet-template");
	Типы.Вставить(".odt",      "application/vnd.oasis.opendocument.text");
	Типы.Вставить(".odm",      "application/vnd.oasis.opendocument.text-master");
	Типы.Вставить(".ott",      "application/vnd.oasis.opendocument.text-template");
	Типы.Вставить(".oth",      "application/vnd.oasis.opendocument.text-web");
	Типы.Вставить(".xo",       "application/vnd.olpc-sugar");
	Типы.Вставить(".dd2",      "application/vnd.oma.dd2+xml");
	Типы.Вставить(".oxt",      "application/vnd.openofficeorg.extension");
	Типы.Вставить(".pptx",     "application/vnd.openxmlformats-officedocument.presentationml.presentation");
	Типы.Вставить(".sldx",     "application/vnd.openxmlformats-officedocument.presentationml.slide");
	Типы.Вставить(".ppsx",     "application/vnd.openxmlformats-officedocument.presentationml.slideshow");
	Типы.Вставить(".potx",     "application/vnd.openxmlformats-officedocument.presentationml.template");
	Типы.Вставить(".xlsx",     "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
	Типы.Вставить(".xltx",     "application/vnd.openxmlformats-officedocument.spreadsheetml.template");
	Типы.Вставить(".docx",     "application/vnd.openxmlformats-officedocument.wordprocessingml.document");
	Типы.Вставить(".dotx",     "application/vnd.openxmlformats-officedocument.wordprocessingml.template");
	Типы.Вставить(".mgp",      "application/vnd.osgeo.mapguide.package");
	Типы.Вставить(".dp",       "application/vnd.osgi.dp");
	Типы.Вставить(".esa",      "application/vnd.osgi.subsystem");
	Типы.Вставить(".pdb",      "application/vnd.palm");
	Типы.Вставить(".pqa",      "application/vnd.palm");
	Типы.Вставить(".oprc",     "application/vnd.palm");
	Типы.Вставить(".paw",      "application/vnd.pawaafile");
	Типы.Вставить(".str",      "application/vnd.pg.format");
	Типы.Вставить(".ei6",      "application/vnd.pg.osasli");
	Типы.Вставить(".efif",     "application/vnd.picsel");
	Типы.Вставить(".wg",       "application/vnd.pmi.widget");
	Типы.Вставить(".plf",      "application/vnd.pocketlearn");
	Типы.Вставить(".pbd",      "application/vnd.powerbuilder6");
	Типы.Вставить(".box",      "application/vnd.previewsystems.box");
	Типы.Вставить(".mgz",      "application/vnd.proteus.magazine");
	Типы.Вставить(".qps",      "application/vnd.publishare-delta-tree");
	Типы.Вставить(".ptid",     "application/vnd.pvi.ptid1");
	Типы.Вставить(".qxd",      "application/vnd.quark.quarkxpress");
	Типы.Вставить(".qxt",      "application/vnd.quark.quarkxpress");
	Типы.Вставить(".qwd",      "application/vnd.quark.quarkxpress");
	Типы.Вставить(".qwt",      "application/vnd.quark.quarkxpress");
	Типы.Вставить(".qxl",      "application/vnd.quark.quarkxpress");
	Типы.Вставить(".qxb",      "application/vnd.quark.quarkxpress");
	Типы.Вставить(".bed",      "application/vnd.realvnc.bed");
	Типы.Вставить(".mxl",      "application/vnd.recordare.musicxml");
	Типы.Вставить(".musicxml", "application/vnd.recordare.musicxml+xml");
	Типы.Вставить(".cryptonote", "application/vnd.rig.cryptonote");
	Типы.Вставить(".cod",      "application/vnd.rim.cod");
	Типы.Вставить(".rm",       "application/vnd.rn-realmedia");
	Типы.Вставить(".rmvb",     "application/vnd.rn-realmedia-vbr");
	Типы.Вставить(".link66",   "application/vnd.route66.link66+xml");
	Типы.Вставить(".st",       "application/vnd.sailingtracker.track");
	Типы.Вставить(".see",      "application/vnd.seemail");
	Типы.Вставить(".sema",     "application/vnd.sema");
	Типы.Вставить(".semd",     "application/vnd.semd");
	Типы.Вставить(".semf",     "application/vnd.semf");
	Типы.Вставить(".ifm",      "application/vnd.shana.informed.formdata");
	Типы.Вставить(".itp",      "application/vnd.shana.informed.formtemplate");
	Типы.Вставить(".iif",      "application/vnd.shana.informed.interchange");
	Типы.Вставить(".ipk",      "application/vnd.shana.informed.package");
	Типы.Вставить(".twd",      "application/vnd.simtech-mindmapper");
	Типы.Вставить(".twds",     "application/vnd.simtech-mindmapper");
	Типы.Вставить(".mmf",      "application/vnd.smaf");
	Типы.Вставить(".teacher",  "application/vnd.smart.teacher");
	Типы.Вставить(".sdkm",     "application/vnd.solent.sdkm+xml");
	Типы.Вставить(".sdkd",     "application/vnd.solent.sdkm+xml");
	Типы.Вставить(".dxp",      "application/vnd.spotfire.dxp");
	Типы.Вставить(".sfs",      "application/vnd.spotfire.sfs");
	Типы.Вставить(".sdc",      "application/vnd.stardivision.calc");
	Типы.Вставить(".sda",      "application/vnd.stardivision.draw");
	Типы.Вставить(".sdd",      "application/vnd.stardivision.impress");
	Типы.Вставить(".smf",      "application/vnd.stardivision.math");
	Типы.Вставить(".sdw",      "application/vnd.stardivision.writer");
	Типы.Вставить(".vor",      "application/vnd.stardivision.writer");
	Типы.Вставить(".sgl",      "application/vnd.stardivision.writer-global");
	Типы.Вставить(".smzip",    "application/vnd.stepmania.package");
	Типы.Вставить(".sm",       "application/vnd.stepmania.stepchart");
	Типы.Вставить(".sxc",      "application/vnd.sun.xml.calc");
	Типы.Вставить(".stc",      "application/vnd.sun.xml.calc.template");
	Типы.Вставить(".sxd",      "application/vnd.sun.xml.draw");
	Типы.Вставить(".std",      "application/vnd.sun.xml.draw.template");
	Типы.Вставить(".sxi",      "application/vnd.sun.xml.impress");
	Типы.Вставить(".sti",      "application/vnd.sun.xml.impress.template");
	Типы.Вставить(".sxm",      "application/vnd.sun.xml.math");
	Типы.Вставить(".sxw",      "application/vnd.sun.xml.writer");
	Типы.Вставить(".sxg",      "application/vnd.sun.xml.writer.global");
	Типы.Вставить(".stw",      "application/vnd.sun.xml.writer.template");
	Типы.Вставить(".sus",      "application/vnd.sus-calendar");
	Типы.Вставить(".susp",     "application/vnd.sus-calendar");
	Типы.Вставить(".svd",      "application/vnd.svd");
	Типы.Вставить(".sis",      "application/vnd.symbian.install");
	Типы.Вставить(".sisx",     "application/vnd.symbian.install");
	Типы.Вставить(".xsm",      "application/vnd.syncml+xml");
	Типы.Вставить(".bdm",      "application/vnd.syncml.dm+wbxml");
	Типы.Вставить(".xdm",      "application/vnd.syncml.dm+xml");
	Типы.Вставить(".tao",      "application/vnd.tao.intent-module-archive");
	Типы.Вставить(".pcap",     "application/vnd.tcpdump.pcap");
	Типы.Вставить(".cap",      "application/vnd.tcpdump.pcap");
	Типы.Вставить(".dmp",      "application/vnd.tcpdump.pcap");
	Типы.Вставить(".tmo",      "application/vnd.tmobile-livetv");
	Типы.Вставить(".tpt",      "application/vnd.trid.tpt");
	Типы.Вставить(".mxs",      "application/vnd.triscape.mxs");
	Типы.Вставить(".tra",      "application/vnd.trueapp");
	Типы.Вставить(".ufd",      "application/vnd.ufdl");
	Типы.Вставить(".ufdl",     "application/vnd.ufdl");
	Типы.Вставить(".utz",      "application/vnd.uiq.theme");
	Типы.Вставить(".umj",      "application/vnd.umajin");
	Типы.Вставить(".unityweb", "application/vnd.unity");
	Типы.Вставить(".uoml",     "application/vnd.uoml+xml");
	Типы.Вставить(".vcx",      "application/vnd.vcx");
	Типы.Вставить(".vsd",      "application/vnd.visio");
	Типы.Вставить(".vst",      "application/vnd.visio");
	Типы.Вставить(".vss",      "application/vnd.visio");
	Типы.Вставить(".vsw",      "application/vnd.visio");
	Типы.Вставить(".vis",      "application/vnd.visionary");
	Типы.Вставить(".vsf",      "application/vnd.vsf");
	Типы.Вставить(".wbxml",    "application/vnd.wap.wbxml");
	Типы.Вставить(".wmlc",     "application/vnd.wap.wmlc");
	Типы.Вставить(".wmlsc",    "application/vnd.wap.wmlscriptc");
	Типы.Вставить(".wtb",      "application/vnd.webturbo");
	Типы.Вставить(".nbp",      "application/vnd.wolfram.player");
	Типы.Вставить(".wpd",      "application/vnd.wordperfect");
	Типы.Вставить(".wqd",      "application/vnd.wqd");
	Типы.Вставить(".stf",      "application/vnd.wt.stf");
	Типы.Вставить(".xar",      "application/vnd.xara");
	Типы.Вставить(".xfdl",     "application/vnd.xfdl");
	Типы.Вставить(".hvd",      "application/vnd.yamaha.hv-dic");
	Типы.Вставить(".hvs",      "application/vnd.yamaha.hv-script");
	Типы.Вставить(".hvp",      "application/vnd.yamaha.hv-voice");
	Типы.Вставить(".osf",      "application/vnd.yamaha.openscoreformat");
	Типы.Вставить(".osfpvg",   "application/vnd.yamaha.openscoreformat.osfpvg+xml");
	Типы.Вставить(".saf",      "application/vnd.yamaha.smaf-audio");
	Типы.Вставить(".spf",      "application/vnd.yamaha.smaf-phrase");
	Типы.Вставить(".cmp",      "application/vnd.yellowriver-custom-menu");
	Типы.Вставить(".zir",      "application/vnd.zul");
	Типы.Вставить(".zirz",     "application/vnd.zul");
	Типы.Вставить(".zaz",      "application/vnd.zzazz.deck+xml");
	Типы.Вставить(".vxml",     "application/voicexml+xml");
	Типы.Вставить(".wgt",      "application/widget");
	Типы.Вставить(".hlp",      "application/winhlp");
	Типы.Вставить(".wsdl",     "application/wsdl+xml");
	Типы.Вставить(".wspolicy", "application/wspolicy+xml");
	Типы.Вставить(".7z",       "application/x-7z-compressed");
	Типы.Вставить(".abw",      "application/x-abiword");
	Типы.Вставить(".ace",      "application/x-ace-compressed");
	Типы.Вставить(".dmg",      "application/x-apple-diskimage");
	Типы.Вставить(".aab",      "application/x-authorware-bin");
	Типы.Вставить(".x32",      "application/x-authorware-bin");
	Типы.Вставить(".u32",      "application/x-authorware-bin");
	Типы.Вставить(".vox",      "application/x-authorware-bin");
	Типы.Вставить(".aam",      "application/x-authorware-map");
	Типы.Вставить(".aas",      "application/x-authorware-seg");
	Типы.Вставить(".bcpio",    "application/x-bcpio");
	Типы.Вставить(".torrent",  "application/x-bittorrent");
	Типы.Вставить(".blb",      "application/x-blorb");
	Типы.Вставить(".blorb",    "application/x-blorb");
	Типы.Вставить(".bz",       "application/x-bzip");
	Типы.Вставить(".bz2",      "application/x-bzip2");
	Типы.Вставить(".boz",      "application/x-bzip2");
	Типы.Вставить(".cbr",      "application/x-cbr");
	Типы.Вставить(".cba",      "application/x-cbr");
	Типы.Вставить(".cbt",      "application/x-cbr");
	Типы.Вставить(".cbz",      "application/x-cbr");
	Типы.Вставить(".cb7",      "application/x-cbr");
	Типы.Вставить(".vcd",      "application/x-cdlink");
	Типы.Вставить(".cfs",      "application/x-cfs-compressed");
	Типы.Вставить(".chat",     "application/x-chat");
	Типы.Вставить(".pgn",      "application/x-chess-pgn");
	Типы.Вставить(".nsc",      "application/x-conference");
	Типы.Вставить(".cpio",     "application/x-cpio");
	Типы.Вставить(".csh",      "application/x-csh");
	Типы.Вставить(".deb",      "application/x-debian-package");
	Типы.Вставить(".udeb",     "application/x-debian-package");
	Типы.Вставить(".dgc",      "application/x-dgc-compressed");
	Типы.Вставить(".dir",      "application/x-director");
	Типы.Вставить(".dcr",      "application/x-director");
	Типы.Вставить(".dxr",      "application/x-director");
	Типы.Вставить(".cst",      "application/x-director");
	Типы.Вставить(".cct",      "application/x-director");
	Типы.Вставить(".cxt",      "application/x-director");
	Типы.Вставить(".w3d",      "application/x-director");
	Типы.Вставить(".fgd",      "application/x-director");
	Типы.Вставить(".swa",      "application/x-director");
	Типы.Вставить(".wad",      "application/x-doom");
	Типы.Вставить(".ncx",      "application/x-dtbncx+xml");
	Типы.Вставить(".dtb",      "application/x-dtbook+xml");
	Типы.Вставить(".res",      "application/x-dtbresource+xml");
	Типы.Вставить(".dvi",      "application/x-dvi");
	Типы.Вставить(".evy",      "application/x-envoy");
	Типы.Вставить(".eva",      "application/x-eva");
	Типы.Вставить(".bdf",      "application/x-font-bdf");
	Типы.Вставить(".gsf",      "application/x-font-ghostscript");
	Типы.Вставить(".psf",      "application/x-font-linux-psf");
	Типы.Вставить(".pcf",      "application/x-font-pcf");
	Типы.Вставить(".snf",      "application/x-font-snf");
	Типы.Вставить(".pfa",      "application/x-font-type1");
	Типы.Вставить(".pfb",      "application/x-font-type1");
	Типы.Вставить(".pfm",      "application/x-font-type1");
	Типы.Вставить(".afm",      "application/x-font-type1");
	Типы.Вставить(".arc",      "application/x-freearc");
	Типы.Вставить(".spl",      "application/x-futuresplash");
	Типы.Вставить(".gca",      "application/x-gca-compressed");
	Типы.Вставить(".ulx",      "application/x-glulx");
	Типы.Вставить(".gnumeric", "application/x-gnumeric");
	Типы.Вставить(".gramps",   "application/x-gramps-xml");
	Типы.Вставить(".gtar",     "application/x-gtar");
	Типы.Вставить(".hdf",      "application/x-hdf");
	Типы.Вставить(".install",  "application/x-install-instructions");
	Типы.Вставить(".iso",      "application/x-iso9660-image");
	Типы.Вставить(".jnlp",     "application/x-java-jnlp-file");
	Типы.Вставить(".latex",    "application/x-latex");
	Типы.Вставить(".lzh",      "application/x-lzh-compressed");
	Типы.Вставить(".lha",      "application/x-lzh-compressed");
	Типы.Вставить(".mie",      "application/x-mie");
	Типы.Вставить(".prc",      "application/x-mobipocket-ebook");
	Типы.Вставить(".mobi",     "application/x-mobipocket-ebook");
	Типы.Вставить(".application", "application/x-ms-application");
	Типы.Вставить(".lnk",      "application/x-ms-shortcut");
	Типы.Вставить(".wmd",      "application/x-ms-wmd");
	Типы.Вставить(".wmz",      "application/x-ms-wmz");
	Типы.Вставить(".xbap",     "application/x-ms-xbap");
	Типы.Вставить(".mdb",      "application/x-msaccess");
	Типы.Вставить(".obd",      "application/x-msbinder");
	Типы.Вставить(".crd",      "application/x-mscardfile");
	Типы.Вставить(".clp",      "application/x-msclip");
	Типы.Вставить(".exe",      "application/x-msdownload");
	Типы.Вставить(".dll",      "application/x-msdownload");
	Типы.Вставить(".com",      "application/x-msdownload");
	Типы.Вставить(".bat",      "application/x-msdownload");
	Типы.Вставить(".msi",      "application/x-msdownload");
	Типы.Вставить(".mvb",      "application/x-msmediaview");
	Типы.Вставить(".m13",      "application/x-msmediaview");
	Типы.Вставить(".m14",      "application/x-msmediaview");
	Типы.Вставить(".wmf",      "application/x-msmetafile");
	Типы.Вставить(".wmz",      "application/x-msmetafile");
	Типы.Вставить(".emf",      "application/x-msmetafile");
	Типы.Вставить(".emz",      "application/x-msmetafile");
	Типы.Вставить(".mny",      "application/x-msmoney");
	Типы.Вставить(".pub",      "application/x-mspublisher");
	Типы.Вставить(".scd",      "application/x-msschedule");
	Типы.Вставить(".trm",      "application/x-msterminal");
	Типы.Вставить(".wri",      "application/x-mswrite");
	Типы.Вставить(".nc",       "application/x-netcdf");
	Типы.Вставить(".cdf",      "application/x-netcdf");
	Типы.Вставить(".nzb",      "application/x-nzb");
	Типы.Вставить(".p12",      "application/x-pkcs12");
	Типы.Вставить(".pfx",      "application/x-pkcs12");
	Типы.Вставить(".p7b",      "application/x-pkcs7-certificates");
	Типы.Вставить(".spc",      "application/x-pkcs7-certificates");
	Типы.Вставить(".p7r",      "application/x-pkcs7-certreqresp");
	Типы.Вставить(".rar",      "application/x-rar-compressed");
	Типы.Вставить(".ris",      "application/x-research-info-systems");
	Типы.Вставить(".sh",       "application/x-sh");
	Типы.Вставить(".shar",     "application/x-shar");
	Типы.Вставить(".swf",      "application/x-shockwave-flash");
	Типы.Вставить(".xap",      "application/x-silverlight-app");
	Типы.Вставить(".sql",      "application/x-sql");
	Типы.Вставить(".sit",      "application/x-stuffit");
	Типы.Вставить(".sitx",     "application/x-stuffitx");
	Типы.Вставить(".srt",      "application/x-subrip");
	Типы.Вставить(".sv4cpio",  "application/x-sv4cpio");
	Типы.Вставить(".sv4crc",   "application/x-sv4crc");
	Типы.Вставить(".t3",       "application/x-t3vm-image");
	Типы.Вставить(".gam",      "application/x-tads");
	Типы.Вставить(".tar",      "application/x-tar");
	Типы.Вставить(".tcl",      "application/x-tcl");
	Типы.Вставить(".tex",      "application/x-tex");
	Типы.Вставить(".tfm",      "application/x-tex-tfm");
	Типы.Вставить(".texinfo",  "application/x-texinfo");
	Типы.Вставить(".texi",     "application/x-texinfo");
	Типы.Вставить(".obj",      "application/x-tgif");
	Типы.Вставить(".ustar",    "application/x-ustar");
	Типы.Вставить(".src",      "application/x-wais-source");
	Типы.Вставить(".der",      "application/x-x509-ca-cert");
	Типы.Вставить(".crt",      "application/x-x509-ca-cert");
	Типы.Вставить(".fig",      "application/x-xfig");
	Типы.Вставить(".xlf",      "application/x-xliff+xml");
	Типы.Вставить(".xpi",      "application/x-xpinstall");
	Типы.Вставить(".xz",       "application/x-xz");
	Типы.Вставить(".z1",       "application/x-zmachine");
	Типы.Вставить(".z2",       "application/x-zmachine");
	Типы.Вставить(".z3",       "application/x-zmachine");
	Типы.Вставить(".z4",       "application/x-zmachine");
	Типы.Вставить(".z5",       "application/x-zmachine");
	Типы.Вставить(".z6",       "application/x-zmachine");
	Типы.Вставить(".z7",       "application/x-zmachine");
	Типы.Вставить(".z8",       "application/x-zmachine");
	Типы.Вставить(".xaml",     "application/xaml+xml");
	Типы.Вставить(".xdf",      "application/xcap-diff+xml");
	Типы.Вставить(".xenc",     "application/xenc+xml");
	Типы.Вставить(".xhtml",    "application/xhtml+xml");
	Типы.Вставить(".xht",      "application/xhtml+xml");
	Типы.Вставить(".xml",      "application/xml");
	Типы.Вставить(".xsl",      "application/xml");
	Типы.Вставить(".dtd",      "application/xml-dtd");
	Типы.Вставить(".xop",      "application/xop+xml");
	Типы.Вставить(".xpl",      "application/xproc+xml");
	Типы.Вставить(".xslt",     "application/xslt+xml");
	Типы.Вставить(".xspf",     "application/xspf+xml");
	Типы.Вставить(".mxml",     "application/xv+xml");
	Типы.Вставить(".xhvml",    "application/xv+xml");
	Типы.Вставить(".xvml",     "application/xv+xml");
	Типы.Вставить(".xvm",      "application/xv+xml");
	Типы.Вставить(".yang",     "application/yang");
	Типы.Вставить(".yin",      "application/yin+xml");
	Типы.Вставить(".zip",      "application/zip");
	Типы.Вставить(".adp",      "audio/adpcm");
	Типы.Вставить(".au",       "audio/basic");
	Типы.Вставить(".snd",      "audio/basic");
	Типы.Вставить(".mid",      "audio/midi");
	Типы.Вставить(".midi",     "audio/midi");
	Типы.Вставить(".kar",      "audio/midi");
	Типы.Вставить(".rmi",      "audio/midi");
	Типы.Вставить(".m4a",      "audio/mp4");
	Типы.Вставить(".mp4a",     "audio/mp4");
	Типы.Вставить(".mpga",     "audio/mpeg");
	Типы.Вставить(".mp2",      "audio/mpeg");
	Типы.Вставить(".mp2a",     "audio/mpeg");
	Типы.Вставить(".mp3",      "audio/mpeg");
	Типы.Вставить(".m2a",      "audio/mpeg");
	Типы.Вставить(".m3a",      "audio/mpeg");
	Типы.Вставить(".oga",      "audio/ogg");
	Типы.Вставить(".ogg",      "audio/ogg");
	Типы.Вставить(".spx",      "audio/ogg");
	Типы.Вставить(".opus",     "audio/ogg");
	Типы.Вставить(".s3m",      "audio/s3m");
	Типы.Вставить(".sil",      "audio/silk");
	Типы.Вставить(".uva",      "audio/vnd.dece.audio");
	Типы.Вставить(".uvva",     "audio/vnd.dece.audio");
	Типы.Вставить(".eol",      "audio/vnd.digital-winds");
	Типы.Вставить(".dra",      "audio/vnd.dra");
	Типы.Вставить(".dts",      "audio/vnd.dts");
	Типы.Вставить(".dtshd",    "audio/vnd.dts.hd");
	Типы.Вставить(".lvp",      "audio/vnd.lucent.voice");
	Типы.Вставить(".pya",      "audio/vnd.ms-playready.media.pya");
	Типы.Вставить(".ecelp4800", "audio/vnd.nuera.ecelp4800");
	Типы.Вставить(".ecelp7470", "audio/vnd.nuera.ecelp7470");
	Типы.Вставить(".ecelp9600", "audio/vnd.nuera.ecelp9600");
	Типы.Вставить(".rip",      "audio/vnd.rip");
	Типы.Вставить(".weba",     "audio/webm");
	Типы.Вставить(".aac",      "audio/x-aac");
	Типы.Вставить(".aif",      "audio/x-aiff");
	Типы.Вставить(".aiff",     "audio/x-aiff");
	Типы.Вставить(".aifc",     "audio/x-aiff");
	Типы.Вставить(".caf",      "audio/x-caf");
	Типы.Вставить(".flac",     "audio/x-flac");
	Типы.Вставить(".mka",      "audio/x-matroska");
	Типы.Вставить(".m3u",      "audio/x-mpegurl");
	Типы.Вставить(".wax",      "audio/x-ms-wax");
	Типы.Вставить(".wma",      "audio/x-ms-wma");
	Типы.Вставить(".ram",      "audio/x-pn-realaudio");
	Типы.Вставить(".ra",       "audio/x-pn-realaudio");
	Типы.Вставить(".rmp",      "audio/x-pn-realaudio-plugin");
	Типы.Вставить(".wav",      "audio/x-wav");
	Типы.Вставить(".xm",       "audio/xm");
	Типы.Вставить(".cdx",      "chemical/x-cdx");
	Типы.Вставить(".cif",      "chemical/x-cif");
	Типы.Вставить(".cmdf",     "chemical/x-cmdf");
	Типы.Вставить(".cml",      "chemical/x-cml");
	Типы.Вставить(".csml",     "chemical/x-csml");
	Типы.Вставить(".xyz",      "chemical/x-xyz");
	Типы.Вставить(".ttc",      "font/collection");
	Типы.Вставить(".otf",      "font/otf");
	Типы.Вставить(".ttf",      "font/ttf");
	Типы.Вставить(".woff",     "font/woff");
	Типы.Вставить(".woff2",    "font/woff2");
	Типы.Вставить(".bmp",      "image/bmp");
	Типы.Вставить(".cgm",      "image/cgm");
	Типы.Вставить(".g3",       "image/g3fax");
	Типы.Вставить(".gif",      "image/gif");
	Типы.Вставить(".ief",      "image/ief");
	Типы.Вставить(".jpeg",     "image/jpeg");
	Типы.Вставить(".jpg",      "image/jpeg");
	Типы.Вставить(".jpe",      "image/jpeg");
	Типы.Вставить(".ktx",      "image/ktx");
	Типы.Вставить(".png",      "image/png");
	Типы.Вставить(".btif",     "image/prs.btif");
	Типы.Вставить(".sgi",      "image/sgi");
	Типы.Вставить(".svg",      "image/svg+xml");
	Типы.Вставить(".svgz",     "image/svg+xml");
	Типы.Вставить(".tiff",     "image/tiff");
	Типы.Вставить(".tif",      "image/tiff");
	Типы.Вставить(".psd",      "image/vnd.adobe.photoshop");
	Типы.Вставить(".uvi",      "image/vnd.dece.graphic");
	Типы.Вставить(".uvvi",     "image/vnd.dece.graphic");
	Типы.Вставить(".uvg",      "image/vnd.dece.graphic");
	Типы.Вставить(".uvvg",     "image/vnd.dece.graphic");
	Типы.Вставить(".djvu",     "image/vnd.djvu");
	Типы.Вставить(".djv",      "image/vnd.djvu");
	Типы.Вставить(".sub",      "image/vnd.dvb.subtitle");
	Типы.Вставить(".dwg",      "image/vnd.dwg");
	Типы.Вставить(".dxf",      "image/vnd.dxf");
	Типы.Вставить(".fbs",      "image/vnd.fastbidsheet");
	Типы.Вставить(".fpx",      "image/vnd.fpx");
	Типы.Вставить(".fst",      "image/vnd.fst");
	Типы.Вставить(".mmr",      "image/vnd.fujixerox.edmics-mmr");
	Типы.Вставить(".rlc",      "image/vnd.fujixerox.edmics-rlc");
	Типы.Вставить(".mdi",      "image/vnd.ms-modi");
	Типы.Вставить(".wdp",      "image/vnd.ms-photo");
	Типы.Вставить(".npx",      "image/vnd.net-fpx");
	Типы.Вставить(".wbmp",     "image/vnd.wap.wbmp");
	Типы.Вставить(".xif",      "image/vnd.xiff");
	Типы.Вставить(".webp",     "image/webp");
	Типы.Вставить(".3ds",      "image/x-3ds");
	Типы.Вставить(".ras",      "image/x-cmu-raster");
	Типы.Вставить(".cmx",      "image/x-cmx");
	Типы.Вставить(".cdr",      "image/x-coreldraw");
	Типы.Вставить(".fh",       "image/x-freehand");
	Типы.Вставить(".fhc",      "image/x-freehand");
	Типы.Вставить(".fh4",      "image/x-freehand");
	Типы.Вставить(".fh5",      "image/x-freehand");
	Типы.Вставить(".fh7",      "image/x-freehand");
	Типы.Вставить(".ico",      "image/x-icon");
	Типы.Вставить(".sid",      "image/x-mrsid-image");
	Типы.Вставить(".pcx",      "image/x-pcx");
	Типы.Вставить(".pic",      "image/x-pict");
	Типы.Вставить(".pct",      "image/x-pict");
	Типы.Вставить(".pnm",      "image/x-portable-anymap");
	Типы.Вставить(".pbm",      "image/x-portable-bitmap");
	Типы.Вставить(".pgm",      "image/x-portable-graymap");
	Типы.Вставить(".ppm",      "image/x-portable-pixmap");
	Типы.Вставить(".rgb",      "image/x-rgb");
	Типы.Вставить(".tga",      "image/x-tga");
	Типы.Вставить(".xbm",      "image/x-xbitmap");
	Типы.Вставить(".xpm",      "image/x-xpixmap");
	Типы.Вставить(".xwd",      "image/x-xwindowdump");
	Типы.Вставить(".eml",      "message/rfc822");
	Типы.Вставить(".mime",     "message/rfc822");
	Типы.Вставить(".igs",      "model/iges");
	Типы.Вставить(".iges",     "model/iges");
	Типы.Вставить(".msh",      "model/mesh");
	Типы.Вставить(".mesh",     "model/mesh");
	Типы.Вставить(".silo",     "model/mesh");
	Типы.Вставить(".dae",      "model/vnd.collada+xml");
	Типы.Вставить(".dwf",      "model/vnd.dwf");
	Типы.Вставить(".gdl",      "model/vnd.gdl");
	Типы.Вставить(".gtw",      "model/vnd.gtw");
	Типы.Вставить(".mts",      "model/vnd.mts");
	Типы.Вставить(".vtu",      "model/vnd.vtu");
	Типы.Вставить(".wrl",      "model/vrml");
	Типы.Вставить(".vrml",     "model/vrml");
	Типы.Вставить(".x3db",     "model/x3d+binary");
	Типы.Вставить(".x3dbz",    "model/x3d+binary");
	Типы.Вставить(".x3dv",     "model/x3d+vrml");
	Типы.Вставить(".x3dvz",    "model/x3d+vrml");
	Типы.Вставить(".x3d",      "model/x3d+xml");
	Типы.Вставить(".x3dz",     "model/x3d+xml");
	Типы.Вставить(".appcache", "text/cache-manifest");
	Типы.Вставить(".ics",      "text/calendar");
	Типы.Вставить(".ifb",      "text/calendar");
	Типы.Вставить(".css",      "text/css");
	Типы.Вставить(".csv",      "text/csv");
	Типы.Вставить(".html",     "text/html");
	Типы.Вставить(".htm",      "text/html");
	Типы.Вставить(".js",       "text/javascript");
	Типы.Вставить(".mjs",      "text/javascript");
	Типы.Вставить(".n3",       "text/n3");
	Типы.Вставить(".txt",      "text/plain");
	Типы.Вставить(".text",     "text/plain");
	Типы.Вставить(".conf",     "text/plain");
	Типы.Вставить(".def",      "text/plain");
	Типы.Вставить(".list",     "text/plain");
	Типы.Вставить(".log",      "text/plain");
	Типы.Вставить(".in",       "text/plain");
	Типы.Вставить(".dsc",      "text/prs.lines.tag");
	Типы.Вставить(".rtx",      "text/richtext");
	Типы.Вставить(".sgml",     "text/sgml");
	Типы.Вставить(".sgm",      "text/sgml");
	Типы.Вставить(".tsv",      "text/tab-separated-values");
	Типы.Вставить(".t",        "text/troff");
	Типы.Вставить(".tr",       "text/troff");
	Типы.Вставить(".roff",     "text/troff");
	Типы.Вставить(".man",      "text/troff");
	Типы.Вставить(".me",       "text/troff");
	Типы.Вставить(".ms",       "text/troff");
	Типы.Вставить(".ttl",      "text/turtle");
	Типы.Вставить(".uri",      "text/uri-list");
	Типы.Вставить(".uris",     "text/uri-list");
	Типы.Вставить(".urls",     "text/uri-list");
	Типы.Вставить(".vcard",    "text/vcard");
	Типы.Вставить(".curl",     "text/vnd.curl");
	Типы.Вставить(".dcurl",    "text/vnd.curl.dcurl");
	Типы.Вставить(".mcurl",    "text/vnd.curl.mcurl");
	Типы.Вставить(".scurl",    "text/vnd.curl.scurl");
	Типы.Вставить(".sub",      "text/vnd.dvb.subtitle");
	Типы.Вставить(".fly",      "text/vnd.fly");
	Типы.Вставить(".flx",      "text/vnd.fmi.flexstor");
	Типы.Вставить(".gv",       "text/vnd.graphviz");
	Типы.Вставить(".3dml",     "text/vnd.in3d.3dml");
	Типы.Вставить(".spot",     "text/vnd.in3d.spot");
	Типы.Вставить(".jad",      "text/vnd.sun.j2me.app-descriptor");
	Типы.Вставить(".wml",      "text/vnd.wap.wml");
	Типы.Вставить(".wmls",     "text/vnd.wap.wmlscript");
	Типы.Вставить(".s",        "text/x-asm");
	Типы.Вставить(".asm",      "text/x-asm");
	Типы.Вставить(".c",        "text/x-c");
	Типы.Вставить(".cc",       "text/x-c");
	Типы.Вставить(".cxx",      "text/x-c");
	Типы.Вставить(".cpp",      "text/x-c");
	Типы.Вставить(".h",        "text/x-c");
	Типы.Вставить(".hh",       "text/x-c");
	Типы.Вставить(".dic",      "text/x-c");
	Типы.Вставить(".f",        "text/x-fortran");
	Типы.Вставить(".for",      "text/x-fortran");
	Типы.Вставить(".f77",      "text/x-fortran");
	Типы.Вставить(".f90",      "text/x-fortran");
	Типы.Вставить(".java",     "text/x-java-source");
	Типы.Вставить(".nfo",      "text/x-nfo");
	Типы.Вставить(".opml",     "text/x-opml");
	Типы.Вставить(".p",        "text/x-pascal");
	Типы.Вставить(".pas",      "text/x-pascal");
	Типы.Вставить(".etx",      "text/x-setext");
	Типы.Вставить(".sfv",      "text/x-sfv");
	Типы.Вставить(".uu",       "text/x-uuencode");
	Типы.Вставить(".vcs",      "text/x-vcalendar");
	Типы.Вставить(".vcf",      "text/x-vcard");
	Типы.Вставить(".3gp",      "video/3gpp");
	Типы.Вставить(".3g2",      "video/3gpp2");
	Типы.Вставить(".h261",     "video/h261");
	Типы.Вставить(".h263",     "video/h263");
	Типы.Вставить(".h264",     "video/h264");
	Типы.Вставить(".jpgv",     "video/jpeg");
	Типы.Вставить(".jpm",      "video/jpm");
	Типы.Вставить(".jpgm",     "video/jpm");
	Типы.Вставить(".mj2",      "video/mj2");
	Типы.Вставить(".mjp2",     "video/mj2");
	Типы.Вставить(".mp4",      "video/mp4");
	Типы.Вставить(".mp4v",     "video/mp4");
	Типы.Вставить(".mpg4",     "video/mp4");
	Типы.Вставить(".mpeg",     "video/mpeg");
	Типы.Вставить(".mpg",      "video/mpeg");
	Типы.Вставить(".mpe",      "video/mpeg");
	Типы.Вставить(".m1v",      "video/mpeg");
	Типы.Вставить(".m2v",      "video/mpeg");
	Типы.Вставить(".ogv",      "video/ogg");
	Типы.Вставить(".qt",       "video/quicktime");
	Типы.Вставить(".mov",      "video/quicktime");
	Типы.Вставить(".uvh",      "video/vnd.dece.hd");
	Типы.Вставить(".uvvh",     "video/vnd.dece.hd");
	Типы.Вставить(".uvm",      "video/vnd.dece.mobile");
	Типы.Вставить(".uvvm",     "video/vnd.dece.mobile");
	Типы.Вставить(".uvp",      "video/vnd.dece.pd");
	Типы.Вставить(".uvvp",     "video/vnd.dece.pd");
	Типы.Вставить(".uvs",      "video/vnd.dece.sd");
	Типы.Вставить(".uvvs",     "video/vnd.dece.sd");
	Типы.Вставить(".uvv",      "video/vnd.dece.video");
	Типы.Вставить(".uvvv",     "video/vnd.dece.video");
	Типы.Вставить(".dvb",      "video/vnd.dvb.file");
	Типы.Вставить(".fvt",      "video/vnd.fvt");
	Типы.Вставить(".mxu",      "video/vnd.mpegurl");
	Типы.Вставить(".m4u",      "video/vnd.mpegurl");
	Типы.Вставить(".pyv",      "video/vnd.ms-playready.media.pyv");
	Типы.Вставить(".uvu",      "video/vnd.uvvu.mp4");
	Типы.Вставить(".uvvu",     "video/vnd.uvvu.mp4");
	Типы.Вставить(".viv",      "video/vnd.vivo");
	Типы.Вставить(".webm",     "video/webm");
	Типы.Вставить(".f4v",      "video/x-f4v");
	Типы.Вставить(".fli",      "video/x-fli");
	Типы.Вставить(".flv",      "video/x-flv");
	Типы.Вставить(".m4v",      "video/x-m4v");
	Типы.Вставить(".mkv",      "video/x-matroska");
	Типы.Вставить(".mk3d",     "video/x-matroska");
	Типы.Вставить(".mks",      "video/x-matroska");
	Типы.Вставить(".mng",      "video/x-mng");
	Типы.Вставить(".asf",      "video/x-ms-asf");
	Типы.Вставить(".asx",      "video/x-ms-asf");
	Типы.Вставить(".vob",      "video/x-ms-vob");
	Типы.Вставить(".wm",       "video/x-ms-wm");
	Типы.Вставить(".wmv",      "video/x-ms-wmv");
	Типы.Вставить(".wmx",      "video/x-ms-wmx");
	Типы.Вставить(".wvx",      "video/x-ms-wvx");
	Типы.Вставить(".avi",      "video/x-msvideo");
	Типы.Вставить(".movie",    "video/x-sgi-movie");
	Типы.Вставить(".smv",      "video/x-smv");
	Типы.Вставить(".ice",      "x-conference/x-cooltalk");
	
	Возврат Типы;
	
КонецФункции

Функция _СоответствиеMimeTypes() 

	Типы = Новый Соответствие;
	
	Типы.Вставить(".js",      "application/javascript");
	Типы.Вставить(".mjs",     "application/javascript");
	Типы.Вставить(".json",    "application/json");
	Типы.Вставить(".webmanifest", "application/manifest+json");
	Типы.Вставить(".doc",     "application/msword");
	Типы.Вставить(".dot",     "application/msword");
	Типы.Вставить(".wiz",     "application/msword");
	Типы.Вставить(".nq",      "application/n-quads");
	Типы.Вставить(".nt",      "application/n-triples");
	Типы.Вставить(".bin",     "application/octet-stream");
	Типы.Вставить(".a",       "application/octet-stream");
	Типы.Вставить(".dll",     "application/octet-stream");
	Типы.Вставить(".exe",     "application/octet-stream");
	Типы.Вставить(".o",       "application/octet-stream");
	Типы.Вставить(".obj",     "application/octet-stream");
	Типы.Вставить(".so",      "application/octet-stream");
	Типы.Вставить(".oda",     "application/oda");
	Типы.Вставить(".pdf",     "application/pdf");
	Типы.Вставить(".p7c",     "application/pkcs7-mime");
	Типы.Вставить(".ps",      "application/postscript");
	Типы.Вставить(".ai",      "application/postscript");
	Типы.Вставить(".eps",     "application/postscript");
	Типы.Вставить(".trig",    "application/trig");
	Типы.Вставить(".m3u",     "application/vnd.apple.mpegurl");
	Типы.Вставить(".m3u8",    "application/vnd.apple.mpegurl");
	Типы.Вставить(".xls",     "application/vnd.ms-excel");
	Типы.Вставить(".xlb",     "application/vnd.ms-excel");
	Типы.Вставить(".ppt",     "application/vnd.ms-powerpoint");
	Типы.Вставить(".pot",     "application/vnd.ms-powerpoint");
	Типы.Вставить(".ppa",     "application/vnd.ms-powerpoint");
	Типы.Вставить(".pps",     "application/vnd.ms-powerpoint");
	Типы.Вставить(".pwz",     "application/vnd.ms-powerpoint");
	Типы.Вставить(".wasm",    "application/wasm");
	Типы.Вставить(".bcpio",   "application/x-bcpio");
	Типы.Вставить(".cpio",    "application/x-cpio");
	Типы.Вставить(".csh",     "application/x-csh");
	Типы.Вставить(".dvi",     "application/x-dvi");
	Типы.Вставить(".gtar",    "application/x-gtar");
	Типы.Вставить(".hdf",     "application/x-hdf");
	Типы.Вставить(".h5",      "application/x-hdf5");
	Типы.Вставить(".latex",   "application/x-latex");
	Типы.Вставить(".mif",     "application/x-mif");
	Типы.Вставить(".cdf",     "application/x-netcdf");
	Типы.Вставить(".nc",      "application/x-netcdf");
	Типы.Вставить(".p12",     "application/x-pkcs12");
	Типы.Вставить(".pfx",     "application/x-pkcs12");
	Типы.Вставить(".ram",     "application/x-pn-realaudio");
	Типы.Вставить(".pyc",     "application/x-python-code");
	Типы.Вставить(".pyo",     "application/x-python-code");
	Типы.Вставить(".sh",      "application/x-sh");
	Типы.Вставить(".shar",    "application/x-shar");
	Типы.Вставить(".swf",     "application/x-shockwave-flash");
	Типы.Вставить(".sv4cpio", "application/x-sv4cpio");
	Типы.Вставить(".sv4crc",  "application/x-sv4crc");
	Типы.Вставить(".tar",     "application/x-tar");
	Типы.Вставить(".tcl",     "application/x-tcl");
	Типы.Вставить(".tex",     "application/x-tex");
	Типы.Вставить(".texi",    "application/x-texinfo");
	Типы.Вставить(".texinfo", "application/x-texinfo");
	Типы.Вставить(".roff",    "application/x-troff");
	Типы.Вставить(".t",       "application/x-troff");
	Типы.Вставить(".tr",      "application/x-troff");
	Типы.Вставить(".man",     "application/x-troff-man");
	Типы.Вставить(".me",      "application/x-troff-me");
	Типы.Вставить(".ms",      "application/x-troff-ms");
	Типы.Вставить(".ustar",   "application/x-ustar");
	Типы.Вставить(".src",     "application/x-wais-source");
	Типы.Вставить(".xsl",     "application/xml");
	Типы.Вставить(".rdf",     "application/xml");
	Типы.Вставить(".wsdl",    "application/xml");
	Типы.Вставить(".xpdl",    "application/xml");
	Типы.Вставить(".zip",     "application/zip");
	Типы.Вставить(".3gp",     "audio/3gpp");
	Типы.Вставить(".3gpp",    "audio/3gpp");
	Типы.Вставить(".3g2",     "audio/3gpp2");
	Типы.Вставить(".3gpp2",   "audio/3gpp2");
	Типы.Вставить(".aac",     "audio/aac");
	Типы.Вставить(".adts",    "audio/aac");
	Типы.Вставить(".loas",    "audio/aac");
	Типы.Вставить(".ass",     "audio/aac");
	Типы.Вставить(".au",      "audio/basic");
	Типы.Вставить(".snd",     "audio/basic");
	Типы.Вставить(".mp3",     "audio/mpeg");
	Типы.Вставить(".mp2",     "audio/mpeg");
	Типы.Вставить(".opus",    "audio/opus");
	Типы.Вставить(".aif",     "audio/x-aiff");
	Типы.Вставить(".aifc",    "audio/x-aiff");
	Типы.Вставить(".aiff",    "audio/x-aiff");
	Типы.Вставить(".ra",      "audio/x-pn-realaudio");
	Типы.Вставить(".wav",     "audio/x-wav");
	Типы.Вставить(".avif",    "image/avif");
	Типы.Вставить(".bmp",     "image/bmp");
	Типы.Вставить(".gif",     "image/gif");
	Типы.Вставить(".ief",     "image/ief");
	Типы.Вставить(".jpg",     "image/jpeg");
	Типы.Вставить(".jpe",     "image/jpeg");
	Типы.Вставить(".jpeg",    "image/jpeg");
	Типы.Вставить(".heic",    "image/heic");
	Типы.Вставить(".heif",    "image/heif");
	Типы.Вставить(".png",     "image/png");
	Типы.Вставить(".svg",     "image/svg+xml");
	Типы.Вставить(".tiff",    "image/tiff");
	Типы.Вставить(".tif",     "image/tiff");
	Типы.Вставить(".ico",     "image/vnd.microsoft.icon");
	Типы.Вставить(".ras",     "image/x-cmu-raster");
	Типы.Вставить(".pnm",     "image/x-portable-anymap");
	Типы.Вставить(".pbm",     "image/x-portable-bitmap");
	Типы.Вставить(".pgm",     "image/x-portable-graymap");
	Типы.Вставить(".ppm",     "image/x-portable-pixmap");
	Типы.Вставить(".rgb",     "image/x-rgb");
	Типы.Вставить(".xbm",     "image/x-xbitmap");
	Типы.Вставить(".xpm",     "image/x-xpixmap");
	Типы.Вставить(".xwd",     "image/x-xwindowdump");
	Типы.Вставить(".eml",     "message/rfc822");
	Типы.Вставить(".mht",     "message/rfc822");
	Типы.Вставить(".mhtml",   "message/rfc822");
	Типы.Вставить(".nws",     "message/rfc822");
	Типы.Вставить(".css",     "text/css");
	Типы.Вставить(".csv",     "text/csv");
	Типы.Вставить(".html",    "text/html");
	Типы.Вставить(".htm",     "text/html");
	Типы.Вставить(".n3",      "text/n3");
	Типы.Вставить(".txt",     "text/plain");
	Типы.Вставить(".bat",     "text/plain");
	Типы.Вставить(".c",       "text/plain");
	Типы.Вставить(".h",       "text/plain");
	Типы.Вставить(".ksh",     "text/plain");
	Типы.Вставить(".pl",      "text/plain");
	Типы.Вставить(".srt",     "text/plain");
	Типы.Вставить(".rtx",     "text/richtext");
	Типы.Вставить(".tsv",     "text/tab-separated-values");
	Типы.Вставить(".vtt",     "text/vtt");
	Типы.Вставить(".py",      "text/x-python");
	Типы.Вставить(".etx",     "text/x-setext");
	Типы.Вставить(".sgm",     "text/x-sgml");
	Типы.Вставить(".sgml",    "text/x-sgml");
	Типы.Вставить(".vcf",     "text/x-vcard");
	Типы.Вставить(".xml",     "text/xml");
	Типы.Вставить(".mp4",     "video/mp4");
	Типы.Вставить(".mpeg",    "video/mpeg");
	Типы.Вставить(".m1v",     "video/mpeg");
	Типы.Вставить(".mpa",     "video/mpeg");
	Типы.Вставить(".mpe",     "video/mpeg");
	Типы.Вставить(".mpg",     "video/mpeg");
	Типы.Вставить(".mov",     "video/quicktime");
	Типы.Вставить(".qt",      "video/quicktime");
	Типы.Вставить(".webm",    "video/webm");
	Типы.Вставить(".avi",     "video/x-msvideo");
	Типы.Вставить(".movie",   "video/x-sgi-movie");
	
	Возврат Типы;
	
КонецФункции

Функция ЭтоКартинкаИлиВидео(ПутьКФайлу) 
	
	Файл = Новый Файл(ПутьКФайлу);
	Если Не Файл.Существует() Тогда
		ВызватьИсключение "Файл не существует! Адрес: " +  ПутьКФайлу;
	КонецЕсли;
	
	ТипMime = ПолучитьMimeTypeПоРасширению(Файл.Расширение);
	Если СтрНачинаетсяС(ТипMime, "image") Или СтрНачинаетсяС(ТипMime, "video") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

#КонецОбласти
