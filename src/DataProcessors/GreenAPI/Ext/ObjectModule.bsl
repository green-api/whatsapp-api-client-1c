// BSLLS:MissingTemporaryFileDeletion-off
#Область ПрограммныйИнтерфейсПолученияДанных

// Запускает процесс получения сообщений. Результаты выполнения метода обрабатываются методами ниже
//
ПРоцедура ПолучитьСообщение() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	ТипыУведомлений = Новый Структура;
	ТипыУведомлений.Вставить("ВходящееСообщение", "incomingMessageReceived");
	ТипыУведомлений.Вставить("СтатусОтправленногоСообщения", "outgoingMessageStatus");
	ТипыУведомлений.Вставить("СостояниеАккаунта", "stateInstanceChanged");
	ТипыУведомлений.Вставить("СостояниеТелефона", "deviceInfo");
	
	Ответ = ПолучитьУведомление();
	Если Ответ <> Неопределено Тогда
		
		Отказ = Ложь;
		ТекстСообщения = Неопределено;
		ТегСообщения = Формат(Ответ.receiptId, "ЧГ=0");
		Если Ответ.body.typeWebhook = ТипыУведомлений.ВходящееСообщение  Тогда
			Если Ответ.body.messageData.typeMessage = "imageMessage"
				Или Ответ.body.messageData.typeMessage = "videoMessage"
				Или Ответ.body.messageData.typeMessage = "documentMessage"
				Или Ответ.body.messageData.typeMessage = "audioMessage" Тогда
				
			
				Если Ответ.body.messageData.typeMessage = "documentMessage" Тогда
					ИмяФайла = Ответ.body.messageData.fileMessageData.fileName;
				КонецЕсли;
				ПолноеИмяФайла = СкачатьФайлПоСсылке(Ответ.body.messageData.fileMessageData.downloadUrl);
				Попытка
					ПриПолученииСообщенияФайл(Отказ, Ответ, ПолноеИмяФайла);
				Исключение
					Отказ = Истина;
					УдалитьФайлы(ПолноеИмяФайла);
				КонецПопытки;
			Иначе
				Попытка
					ПриПолученииСообщенияТекст(Отказ, Ответ);
				Исключение
					Отказ = Истина;
				КонецПопытки;
			КонецЕсли;
		ИначеЕсли Ответ.body.typeWebhook = ТипыУведомлений.СтатусОтправленногоСообщения Тогда
			Попытка
				ПриПолученииСтатусаОтправленногоСообщения(Отказ, Ответ);
			Исключение
				Отказ = Истина;
			КонецПопытки;
		ИначеЕсли Ответ.body.typeWebhook = ТипыУведомлений.СостояниеАккаунта Тогда
			Попытка
				ПриПолученииСтатусаАвторизацииАккаунта(Отказ, Ответ);
			Исключение
				Отказ = Истина;
			КонецПопытки;
		ИначеЕсли Ответ.body.typeWebhook = ТипыУведомлений.СостояниеТелефона Тогда
			Попытка
				ПриПолученииСтатусаУстройства(Отказ, Ответ);
			Исключение
				Отказ = Истина;
			КонецПопытки;
		КонецЕсли;
		
		Если Не Отказ Тогда
			УдалитьУведомление(ТегСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик, срабатывающий при получении текстового сообщения 
// https://green-api.com/docs/api/receiving/notifications-format/incoming-message/Webhook-IncomingMessageReceived/
// Параметры,
//  Отказ - Булево -  Если Истина, то сообщение не будет подтверждено и вернется на сервер 
//    для повторного получения
//  Данные - Структура - Структура полей сообщения в формате JSON. См подробнее в документации
//    
//
Процедура ПриПолученииСообщенияТекст(Отказ, Данные)
	ЭтотОбъект.ТекстПолученноеСообщение = ЗначениеВСтрокуВнутр(Данные.body);
КонецПроцедуры

// Обработчик, срабатывающий при получении файлового сообщения
// https://green-api.com/docs/api/receiving/notifications-format/incoming-message/ImageMessage/
// Параметры,
//  Отказ - Булево -  Если Истина, то сообщение не будет подтверждено и вернется на сервер 
//    для повторного получения
//  Данные - Структура - Структура полей сообщения в формате JSON. См подробнее в документации
//  Файл - Строка - Полное имя к файлу во временном каталоге ОС
//
Процедура ПриПолученииСообщенияФайл(Отказ, Данные, Файл)
	ЭтотОбъект.ТекстПолученноеСообщение = ЗначениеВСтрокуВнутр(Данные.body);
	ЭтотОбъект.ПолученФайл = Файл;
КонецПроцедуры

// Обработчик, срабатывающий при получении статуса ранее отправленного сообщения, отправлено, доставлено, прочитано и др.
// https://green-api.com/docs/api/receiving/notifications-format/outgoing-message/OutgoingMessageStatus/
// Параметры,
//  Отказ - Булево -  Если Истина, то сообщение не будет подтверждено и вернется на сервер 
//    для повторного получения
//  Данные - Структура - Структура полей сообщения в формате JSON. См подробнее в документации
//    
//
Процедура ПриПолученииСтатусаОтправленногоСообщения(Отказ, Данные)
	
	ЭтотОбъект.ТекстПолученноеСообщение = ЗначениеВСтрокуВнутр(Данные.body);
	
КонецПроцедуры

// Обработчик, срабатывающий при получении данных о состоянии авторизации аккаунта.
// https://green-api.com/docs/api/receiving/notifications-format/StateInstanceChanged/
//
// Параметры,
//  Отказ - Булево -  Если Истина, то сообщение не будет подтверждено и вернется на сервер 
//    для повторного получения
//  Данные - Структура - Структура полей сообщения в формате JSON. См подробнее в документации
//    
//
Процедура ПриПолученииСтатусаАвторизацииАккаунта(Отказ, Данные)
	
 	ЭтотОбъект.ТекстПолученноеСообщение = ЗначениеВСтрокуВнутр(Данные.body);
	
КонецПроцедуры

// Обработчик, срабатывающий при получении данных данных об устройстве и уровне заряда батареи, на котором запущено приложение WhatsApp Business
// https//green-api.com/docs/api/receiving/notifications-format/DeviceInfo/
//
// Параметры,
//  Отказ - Булево -  Если Истина, то сообщение не будет подтверждено и вернется на сервер 
//    для повторного получения
//  Данные - Структура - Структура полей сообщения в формате JSON. См подробнее в документации
//    
//
Процедура ПриПолученииСтатусаУстройства(Отказ, Данные)
	
	ЭтотОбъект.ТекстПолученноеСообщение = ЗначениеВСтрокуВнутр(Данные.body);
	
КонецПроцедуры

#КонецОбласти

#Область API

#Область Аккаунт

// Метод предназначен для получения текущих настроек аккаунта.
// Подробнее https://green-api.com/docs/api/account/GetSettings/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьНастройкиАккаунта() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "getSettings"), Истина);
	Возврат Ответ;
	
КонецФункции

// Метод предназначен для установки настроек аккаунта. 
// Допускается указывать параметры выборочно. Хотя бы один параметр должен быть указан.
// Подробнее https://green-api.com/docs/api/account/SetSettings/
//
// Параметры:
//  СтруктураНастроек - Структура - См описание метода https://green-api.com/docs/api/account/SetSettings/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция УстановитьНастройкиАккаунта(СтруктураНастроек) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Тело = СериализоватьВJSONСтроку(СтруктураНастроек);
	
	Ответ = ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "setSettings"), Тело);
	Возврат Ответ;
	
КонецФункции

// Метод предназначен для получения состояния аккаунта.
// Подробнее https://green-api.com/docs/api/account/GetStateInstance/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьСостояниеАккаунта() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "getStateInstance"), Истина);
	Возврат Ответ;
	
КонецФункции

// Метод предназначен для перезапуска аккаунта.
// Подробнее https://green-api.com/docs/api/account/Reboot/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПерезапуститьАккаунт() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "reboot"), Истина);
	Возврат Ответ;
	
КонецФункции

// Метод предназначен для разлогинивания аккаунта.
// Подробнее https://green-api.com/docs/api/account/Logout/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция РазлогинитьАккаунт() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "logout"), Истина);
	Возврат Ответ;
	
КонецФункции

// Метод предназначен для получения QR-кода. Для авторизации аккаунта требуется считать QR-код из приложения
// WhatsApp Business на телефоне. Также получить QR-код и авторизовать аккаунт можно в личном кабинете. 
// Процедура авторизации аккаунта через личный кабинет описана в разделе Перед началом работы.
// Подробнее https://green-api.com/docs/api/account/QR/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьQRКод() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Возврат ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "qr"), Истина);
	
КонецФункции

#КонецОбласти

#Область Отправка

// Метод предназначен для отправки текстового сообщения в личный или групповой чат. 
// Сообщение будет добавлено в очередь на отправку. Скорость отправки сообщений из очереди регулирует 
// параметр Интервал отправки сообщений.
// Подробнее https://green-api.com/docs/api/sending/SendMessage/
//
// Параметры:
//  Телефон - Строка - Номер мобильного телефона
//  Сообщение - Строка - Текст сообщения. Поддерживаются символы emoji 
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ОтправитьТекст(Телефон, Сообщение, ИдЦитируемогоСообщения = Неопределено) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", ПараметрИдЧата(Телефон));
	Структура.Вставить("message", Сообщение);
	Если ИдЦитируемогоСообщения <> Неопределено Тогда  
		Структура.Вставить("quotedMessageId", ИдЦитируемогоСообщения);
	КонецЕсли;
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "sendMessage"), Тело);
	
КонецФункции

// Метод предназначен для отправки текстового сообщения в личный или групповой чат. 
// Сообщение будет добавлено в очередь на отправку. Скорость отправки сообщений из очереди регулирует 
// параметр Интервал отправки сообщений.
// Подробнее https://green-api.com/docs/api/sending/SendMessage/
//
// Параметры:
//  ИдЧата - Строка - Номер чата в формате 79001234568@c.us
//  Сообщение - Строка - Текст сообщения. Поддерживаются символы emoji 
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ОтправитьТекстВГруппу(ИдЧата, Сообщение) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", ИдЧата);
	Структура.Вставить("message", Сообщение);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "sendMessage"), Тело);
	
КонецФункции

// Метод предназначен для отправки файла, загружаемого через форму (form-data). 
// Сообщение будет добавлено в очередь на отправку. Скорость отправки сообщений из
// очереди регулирует параметр Интервал отправки сообщений.
// Подробнее https://green-api.com/docs/api/sending/SendFileByUpload/
//
// Параметры:
//  Телефон - Строка - Номер мобильного телефона
//  ПутьКФайлу- -  Полный путь к файлу на диске
//  Сообщение - Строка - Текст сообщения. Поддерживаются символы emoji 
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ОтправитьВидеоАудиоИзображениеДокумент(Телефон, ПутьКФайлу, Сообщение) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	Хост = ХостПоУмолчанию();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКФайлу);
	
	// Формируем основное составное сообщение
	Разделитель = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	
	Тело = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(Тело);
	
	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
	Если ТипЗнч(Телефон) = Тип("Число") Тогда
		ЗаписьДанных.Записать(ПараметрFormData("chatId", СтрШаблон("%1@c.us", Формат(Телефон,"ЧГ="))));
	Иначе
		ЗаписьДанных.Записать(ПараметрFormData("chatId", Телефон));
	КонецЕсли;
	
	Если ЭтоКартинкаИлиВидео(ПутьКФайлу) Тогда
		//
		ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
		ЗаписьДанных.Записать(ПараметрFormData("caption", Сообщение));
	Иначе
		//
		Файл = Новый Файл(ПутьКФайлу);
		Если Не Файл.Существует() Тогда
			ВызватьИсключение "Файл не существует! Адрес: " +  ПутьКФайлу;
		КонецЕсли;
		ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
		ЗаписьДанных.Записать(ПараметрFormData("fileName", Файл.Имя));
	КонецЕсли;
	
	//
	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
	ЗаписьДанных.Записать(ФайлFormData("file", ПутьКФайлу, ДвоичныеДанные));
	ЗаписьДанных.ЗаписатьСтроку("");
	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель + "--");
	ЗаписьДанных.Закрыть();
	
	ДанныеТела = Тело.ЗакрытьИПолучитьДвоичныеДанные();
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + разделитель);
	
	Возврат ОтправитьФайлPOSTЗапрос(Хост, URLМетодаСервиса(Инстанс, Токен, "sendFileByUpload"), Заголовки, ДанныеТела);
	
КонецФункции

// Метод предназначен для установки аватара аккаунта (form-data). 
// Подробнее https://green-api.com/docs/api/account/SetProfilePicture/
//
// Параметры:
//  ПутьКФайлу- Полный путь к файлу на диске
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция УстановитьФотоПрофиля(ПутьКФайлу) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	Хост = ХостПоУмолчанию();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКФайлу);
	
	// Формируем основное составное сообщение
	Разделитель = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	
	Тело = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(Тело);
	
	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
	ЗаписьДанных.Записать(ФайлFormData("file", ПутьКФайлу, ДвоичныеДанные));
	ЗаписьДанных.ЗаписатьСтроку("");
	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель + "--");
	ЗаписьДанных.Закрыть();
	
	ДанныеТела = Тело.ЗакрытьИПолучитьДвоичныеДанные();
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + разделитель);
	
	Возврат ОтправитьФайлPOSTЗапрос(Хост, URLМетодаСервиса(Инстанс, Токен, "setProfilePicture"), Заголовки, ДанныеТела);
	
	
КонецФункции

// Метод предназначен для отправки файла, загружаемого по ссылке.
// Сообщение будет добавлено в очередь на отправку. Скорость отправки сообщений из 
// очереди регулирует параметр Интервал отправки сообщений.
// Подробнее https://green-api.com/docs/api/sending/SendFileByUrl/
//
// Параметры:
//  Телефон - Строка - Номер мобильного телефона
//  УРЛФайла - Строка - Интернет-ссылка на файл
//  ИмяФайла - Строка - Название файла обязательно с расширением. Например: readme.txt
//  Заголовок - Строка - Представление файла для whatsapp-а
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ОтправитьВидеоАудиоИзображениеДокументПоURL(Телефон, УРЛФайла, ИмяФайла, Заголовок = "") Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Если ТипЗнч(Телефон) = Тип("Число") Тогда
		Структура.Вставить("chatId", ПараметрИдЧата(Телефон));
	Иначе
		Структура.Вставить("chatId", Телефон);
	КонецЕсли;
	Структура.Вставить("urlFile", УРЛФайла);
	Структура.Вставить("fileName", ИмяФайла);
	Структура.Вставить("caption", Заголовок);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "sendFileByUrl"), Тело);
	
КонецФункции

// Метод предназначен для отправки сообщения геолокации. Сообщение будет добавлено в очередь на отправку
// Подробнее https://green-api.com/docs/api/sending/SendLocation/
//
// Параметры:
//  Телефон - Строка - Номер мобильного телефона
//  НазваниеЛокации - Строка - Необязательный. Название локации
//  Адрес - Строка - Необязательный. Адрес локации
//  Широта - Число -  Широта локации
//  Долгота - Число - Долгота локации
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ОтправитьГеолокацию(Телефон, НазваниеЛокации = "", Адрес = "", Широта, Долгота) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", ПараметрИдЧата(Телефон));
	Структура.Вставить("nameLocation", НазваниеЛокации);
	Структура.Вставить("address", Адрес);
	Структура.Вставить("latitude", Широта);
	Структура.Вставить("longitude", Долгота);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "sendLocation"), Тело);
	
КонецФункции

// Метод предназначен для отправки сообщения с контактом. 
// Формируется визитная карточка контакта и отправляется в чат. 
// Сообщение будет добавлено в очередь на отправку. Скорость отправки сообщений из 
// очереди регулирует параметр Интервал отправки сообщений.
// Подробнее https://green-api.com/docs/api/sending/SendContact/
//
// Параметры:
//  Телефон - Строка - Номер мобильного телефона
//  ТелефонКонтакта - Строка - номер телефона контакта в международном формате (без +) 11 или 12 цифр
//  Имя - Строка - Имя контакта
//  Отчество - Строка - Отчество контакта
//  Фамилия - Строка - Фамилия контакта
//  Компания - Строка - Название компании контакта
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ОтправитьКонтакт(Телефон, ТелефонКонтакта, Имя = "", Отчество = "", Фамилия = "", Компания = "") Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", ПараметрИдЧата(Телефон));
	
	Контакт = Новый Структура;
	Контакт.Вставить("phoneContact", ТелефонКонтакта);
	Контакт.Вставить("firstName", Имя);
	Контакт.Вставить("middleName", Отчество);
	Контакт.Вставить("lastName", Фамилия);
	Контакт.Вставить("company", Компания);
	
	Структура.Вставить("contact", Контакт);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "sendContact"), Тело);
	
КонецФункции

// Метод предназначен для отправки сообщения со ссылкой, по которой будут добавлены 
// превью изображения, заголовок и описание. Картинка, заголовок и описание получаются 
// из Open Graph разметки страницы, на которую указывает ссылка. Сообщение будет добавлено в очередь на отправку. 
// Скорость отправки сообщений из очереди регулирует параметр Интервал отправки сообщений.
// Подробнее https://green-api.com/docs/api/sending/SendLink/
//
// Параметры:
//  Телефон - Строка - Номер мобильного телефона
//  АдресСсылки - Строка - Адрес ссылки
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ОтправитьСсылку(Телефон, АдресСсылки) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", ПараметрИдЧата(Телефон));
	Структура.Вставить("urlLink", АдресСсылки);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "sendLink"), Тело);
	
КонецФункции

// Метод предназначен для пересылки сообщений в личный или групповой чат.
// Пересылаемое сообщение будет добавлено в очередь на отправку. Проверка авторизации whatsapp-а
// на телефоне (т.е. наличие в связанных устройствах) не выполняется. Сообщение на отправку
// хранится 24 часа в очереди и будет отправлено сразу же после авторизации телефона.
// Скорость отправки сообщений из очереди регулирует параметр Интервал отправки сообщений.
// Подробнее https://green-api.com/docs/api/sending/ForwardMessages/
//
// Параметры:
//  ИдЧата - Строка - Номер чата в формате 79001234568@c.us
//  ИдЧатаИсточника - Строка - Номер чата в формате 79001234568@c.us
//  МассивИдСообщений - Массив - Коллекция ID (строки) сообщений, которые надо переслать
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПереслатьСообщения(ИдЧата, ИдЧатаИсточника, МассивИдСообщений) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId",     ИдЧата);
	Структура.Вставить("chatIdFrom", ИдЧатаИсточника);
	Структура.Вставить("messages",   МассивИдСообщений);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "forwardMessages"), Тело);	
	
КонецФункции

#КонецОбласти

#Область Получение

#Область ПолучениеУведомлений

// Метод предназначен для получения одного входящего уведомления из очереди уведомлений.
// Метод ReceiveNotification ожидает получения уведомления в течение 20 сек. 
// Вызов метода завершается с пустым ответом в случае достижения таймаута. 
// Если в течение 20 сек в очереди появляется уведомление, то вызов метода завешается, 
// и метод возвращает полученное уведомление.
// Подробнее https://green-api.com/docs/api/receiving/technology-http-api/ReceiveNotification/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьУведомление() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "receiveNotification"), Истина);
	Возврат Ответ;
	
КонецФункции

// Метод предназначен для удаления входящего уведомления из очереди уведомлений. 
// Чтобы указать, какое уведомление следует удалить, используйте параметр НомерУведомления.
// После получения и обработки входящего уведомления требуется удалить уведомление из очереди. 
// Для этого требуется выполнить данный метод. После вызова метода уведомление будет считаться принятым 
// и обработанным и будет безвозвратно удалено из очереди. Таким образом следующий вызов
// метода ПолучитьУведомление вернет следующее уведомление из очереди в порядке поступления уведомлений в очередь.
// Срок хранения входящих уведомлений в очереди составляет 24 часа.
// Подробнее https://green-api.com/docs/api/receiving/technology-http-api/DeleteNotification/
//
// Параметры:
//  НомерУведомления - Число - Идентификатор доставки для удаления входящего уведомления, полученный методом ПолучитьУведомление()
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция УдалитьУведомление(НомерУведомления) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Адрес = URLМетодаСервиса(Инстанс, Токен, "deleteNotification") + "/" + НомерУведомления;
	Ответ = ОтправитьDELETEЗапрос(ХостПоУмолчанию(), Адрес, Истина);
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область ПолучениеФайлов

// Метод предназначен для скачивания файлов по любой ссылке из интернета
//
// Параметры:
//  downloadUrl - Строка - Ссылка на сачивание файла
// 
// Возвращаемое значение:
//  Строка - абсолютный путь к файлу в папке временных файлов
//
Функция СкачатьФайлПоСсылке(downloadUrl)
	
	ЧастиАдреса = РазбитьURL(downloadUrl);
	Хост = ЧастиАдреса.Хост;
	Адрес = ЧастиАдреса.ОтносительныйАдрес;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 ИЛИ
		СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		
		Сертификат = Новый ЗащищенноеСоединениеOpenSSL(
			Неопределено,
			Новый СертификатыУдостоверяющихЦентровLinux());
	Иначе
		
		Сертификат = Новый ЗащищенноеСоединениеOpenSSL(
			Новый СертификатКлиентаWindows(),
			Новый СертификатыУдостоверяющихЦентровWindows());
	КонецЕсли;
	
	
	Соединение = Новый HTTPСоединение(Хост,,,,,60, Сертификат);

	ВебЗапрос = Новый HTTPЗапрос(Адрес);
	Ответ = Соединение.Получить(ВебЗапрос);
	Если Ответ.КодСостояния = 200 Тогда
		РасширениеФайла = ПолучитьРасширениеПоMimeType(Ответ.Заголовки["Content-Type"]);
		Если РасширениеФайла = Неопределено Тогда
			РасширениеФайла = "";
		КонецЕсли;
		
		Бинари = Ответ.ПолучитьТелоКакДвоичныеДанные();
		ИмяФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
		Бинари.Записать(ИмяФайла);
		Возврат ИмяФайла;
	Иначе
		ТекстОшибки = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		ВызватьИсключение ПодставитьПараметрыВСтроку("Сервер вернул статус %1. 
		|%2", Ответ.КодСостояния, ТекстОшибки);
	КонецЕсли;
	
КонецФункции

// Метод предназначен для скачивания принятых и отправленных файлов. 
// Ссылки на принятые файлы передаются во Входящих сообщениях, а также их можно
// получить методом LastIncomingMessages. Ссылки на отправленные
// файлы можно получить методом LastOutgoingMessages.
// Подробнее https://green-api.com/docs/api/receiving/files/DownloadFile/
//
// Параметры:
//  ИдСообщения - Строка - Идентификатор сообщения, передаваемый во Входящих сообщениях или 
//    при отправки файлов методами SendFileByUrl, SendFileByUpload. Данный параметр передаётся как завершающая часть url запроса
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция СкачатьФайлИзВходящегоУведомления(ИдСообщения) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), ПодставитьПараметрыВСтроку("waInstance%1/downloadFile/%2", Инстанс, ИдСообщения), Истина);
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Журналы

// Метод возвращает крайние входящие сообщения аккаунта.
// Срок хранения входящих сообщений на сервере составляет 24 часа.
// Подробнее https://green-api.com/docs/api/journals/LastIncomingMessages/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьЖурналВходящихСообщений() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "lastIncomingMessages"), Истина);
	Возврат Ответ;
	
КонецФункции

// Метод возвращает крайние отправленные сообщения аккаунта.
// Срок хранения отправленных сообщений на сервере составляет 24 часа.
// Подробнее https://green-api.com/docs/api/journals/LastOutgoingMessages/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьЖурналОтправленныхСообщений() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "lastOutgoingMessages"), Истина);
	Возврат Ответ;
	
КонецФункции

// Метод возвращает историю сообщений чата.
// Подробнее https://green-api.com/docs/api/journals/GetChatHistory/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьИсториюСообщенийЧата(ИдЧата, КоличествоСообщений = Неопределено) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;     
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", ИдЧата);
	Если КоличествоСообщений <> Неопределено Тогда  
		Структура.Вставить("count", КоличествоСообщений);
	КонецЕсли;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "getChatHistory"), Истина);
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область Очереди

// Метод предназначен для получения списка сообщений, находящихся в очереди на отправку. 
// Скорость отправки сообщений из очереди регулирует параметр Интервал отправки сообщений.
// Подробнее https://green-api.com/docs/api/queues/ShowMessagesQueue/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьОчередьСообщенийКОтправке() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "showMessagesQueue"), Истина);
	Возврат Ответ;
	
КонецФункции

// Метод предназначен для очистки очереди сообщений на отправку.
// Подробнее https://green-api.com/docs/api/queues/ClearMessagesQueue/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ОчиститьОчередьСообщенийКОтправке() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "clearMessagesQueue"), Истина);
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область Группы

// Метод предназначен для создания группового чата.
// Подробнее https://green-api.com/docs/api/groups/CreateGroup/
//
// Параметры:
//  ИмяГруппы - Строка - Наименование нового группового чата
//  НомераТелефонов - Массив - Коллекция телефонов (строки) участников группы
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция СоздатьГруппу(ИмяГруппы, НомераТелефонов) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("groupName", ИмяГруппы);
	
	Идентификаторы = Новый Массив;
	Для каждого Телефон Из НомераТелефонов Цикл
		Идентификаторы.Добавить(ПараметрИдЧата(Телефон));
	КонецЦикла;
	
	Структура.Вставить("chatIds", Идентификаторы);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "createGroup"), Тело);
	
КонецФункции

// Метод изменяет наименование группового чата.
// Подробнее https://green-api.com/docs/api/groups/UpdateGroupName/
//
// Параметры:
//  ИдГруппы - Строка - Идентификатор группового чата
//  ИмяГруппы - Строка - Наименование группового чата
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ИзменитьИмяГруппы(ИдГруппы, ИмяГруппы) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("groupId", ИдГруппы);
	Структура.Вставить("groupName", ИмяГруппы);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "updateGroupName"), Тело);
	
КонецФункции

// Метод получает данные группового чата.
// Подробнее https://green-api.com/docs/api/groups/GetGroupData/
//
// Параметры:
//  ИдГруппы - Строка - Идентификатор группового чата
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьИнформациюОГруппе(ИдГруппы) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("groupId", ИдГруппы);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "getGroupData"), Тело);
	
КонецФункции

// Метод добавляет участника в групповой чат.
// Подробнее https://green-api.com/docs/api/groups/AddGroupParticipant/
//
// Параметры:
//  ИдГруппы - Строка - Идентификатор группового чата
//  ИдУчастника - Строка - Идентификатор участника, добавляемого в групповой чат.
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ДобавитьУчастникаВГруппу(ИдГруппы, ИдУчастника) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("groupId", ИдГруппы);
	Структура.Вставить("participantChatId", ИдУчастника);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "addGroupParticipant"), Тело);
	
КонецФункции

// Метод удаляет участника из группового чата.
// Подробнее https://green-api.com/docs/api/groups/RemoveGroupParticipant/
//
// Параметры:
//  ИдГруппы - Строка - Идентификатор группового чата
//  ИдУчастника - Строка - Идентификатор участника, добавляемого в групповой чат.
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция УдалитьУчастникаИзГруппы(ИдГруппы, ИдУчастника) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("groupId", ИдГруппы);
	Структура.Вставить("participantChatId", ИдУчастника);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "removeGroupParticipant"), Тело);
	
КонецФункции

// Метод назначает участника группового чата администратором.
// Подробнее https://green-api.com/docs/api/groups/SetGroupAdmin/
//
// Параметры:
//  ИдГруппы - Строка - Идентификатор группового чата
//  ИдУчастника - Строка - Идентификатор участника, добавляемого в групповой чат.
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция НазначитьПраваАдминистратораГруппы(ИдГруппы, ИдУчастника) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("groupId", ИдГруппы);
	Структура.Вставить("participantChatId", ИдУчастника);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "setGroupAdmin"), Тело);
	
КонецФункции

// Метод лишает участника прав администрирования группового чата.
// Подробнее https://green-api.com/docs/api/groups/RemoveAdmin/
//
// Параметры:
//  ИдГруппы - Строка - Идентификатор группового чата
//  ИдУчастника - Строка - Идентификатор участника, добавляемого в групповой чат.
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ОтозватьПраваАдминистратораГруппы(ИдГруппы, ИдУчастника) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("groupId", ИдГруппы);
	Структура.Вставить("participantChatId", ИдУчастника);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "removeAdmin"), Тело);
	
КонецФункции

// Метод производит выход пользователя текущего аккаунта из группового чата.
// Подробнее https://green-api.com/docs/api/groups/LeaveGroup/
//
// Параметры:
//  ИдГруппы - Строка - Идентификатор группового чата, из которого необходимо выйти.
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ВыйтиИзГруппы(ИдГруппы) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("groupId", ИдГруппы);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "leaveGroup"), Тело);
	
КонецФункции

#КонецОбласти

#Область ОтметкаПрочтения

// Метод предназначен для отметки сообщений в чате прочитанными.
// Могут быть отмечены прочитанными все сообщения в чате или только одно заданное сообщение.
// Подробнее https://green-api.com/docs/api/marks/ReadChat/
//
// Параметры:
//  ИдЧата - Строка - Идентификатор группового чата
//  ИдСообщения - Строка - Необязательный. Идентификатор входящего сообщения, которое необходимо отметить прочитанным. 
//    Если не указан, то все непрочитанные сообщения в чате будут отмечены прочитанными.
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ОтметитьЧатПрочитанным(ИдЧата, ИдСообщения = Неопределено) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", ИдЧата);
	Если ЗначениеЗаполнено(ИдСообщения) Тогда
		Структура.Вставить("idMessage", ИдСообщения);
	КонецЕсли;
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "readChat"), Тело);
	
КонецФункции

#КонецОбласти

#Область Устройство

// Метод предназначен для получения информации об устройстве (телефоне), на котором запущено приложение WhatsApp Business.
// Подробнее https://green-api.com/docs/api/phone/GetDeviceInfo/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьИнформациюОбУстройстве() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "getDeviceInfo"), Истина);
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область СервисныеМетоды

// Метод проверяет наличие аккаунта WhatsApp на номере телефона.
// Подробнее https://green-api.com/docs/api/service/CheckWhatsapp/
//
// Параметры:
//  Телефон - Число - Номер телефона получателя в международном формате: 11 или 12 цифр; Пример: 79001234567 или 380123456789
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПроверитьНаличиеWhatsApp(Телефон) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("phoneNumber", Телефон);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "checkWhatsapp"), Тело);
	
КонецФункции

// Метод возвращает аватар корреспондента или группового чата.
// Подробнее https://green-api.com/docs/api/service/GetAvatar/
//
// Параметры:
//  ИдЧата - Строка - Идентификатор корреспондента или группового чата
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьАватарКонтакта(ИдЧата) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", ИдЧата);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "getAvatar"), Тело);
	
КонецФункции

// Метод предназначен для получения списка контактов текущего аккаунта.
// Подробнее https://green-api.com/docs/api/service/GetContacts/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьКонтакты() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "getContacts"), Истина);
	Возврат Ответ;
	
КонецФункции

// Метод предназначен для получения списка чатов текущего аккаунта.
// Подробнее https://green-api.com/docs/api/service/GetContacts/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьЧаты() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "getChats"), Истина);
	Возврат Ответ;
	
КонецФункции     

// Метод предназначен для получения информации о контакте.
// Подробнее https://green-api.com/docs/api/service/GetContactInfo/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьИнфоКонтакта(ИдЧата) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", ИдЧата);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Ответ = ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "getContactInfo"), Тело);
	Возврат Ответ;
	
КонецФункции

// Метод архивирует чат. Архивировать можно чаты, в которых есть хотя бы одно входящее сообщение.
// Подробнее https://green-api.com/docs/api/service/archiveChat/
//
// Параметры:
//  ИдЧата - Строка - Идентификатор корреспондента или группового чата
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция АрхивироватьЧат(ИдЧата) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", ИдЧата);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "archiveChat"), Тело);
	
КонецФункции

// Метод разархивирует чат.
// Подробнее https://green-api.com/docs/api/service/unarchiveChat/
//
// Параметры:
//  ИдЧата - Строка - Идентификатор корреспондента или группового чата
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция РазархивироватьЧат(ИдЧата) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", ИдЧата);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "unarchiveChat"), Тело);
	
КонецФункции

// Метод удаляет сообщение из чата.
// Подробнее https://green-api.com/docs/api/service/deleteMessage/
//
// Параметры:
//  ИдЧата - Строка - Идентификатор корреспондента или группового чата
//  ИдСообщения - Строка - Идентификатор удаляемого сообщения
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция УдалитьСообщение(ИдЧата, ИдСообщения) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", ИдЧата);
	Структура.Вставить("idMessage", ИдСообщения);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "deleteMessage"), Тело);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область HttpКлиент

Функция ОтправитьФайлPOSTЗапрос(Хост, Адрес, Заголовки, ТелоЗапроса)
	
	Сертификат = Новый ЗащищенноеСоединениеOpenSSL();
	Соединение = Новый HTTPСоединение(Хост,,,,,60, Сертификат);
	
	ВебЗапрос = Новый HTTPЗапрос(Адрес,Заголовки);
	ВебЗапрос.УстановитьТелоИзДвоичныхДанных(ТелоЗапроса);
	
	Ответ = Соединение.ОтправитьДляОбработки(ВебЗапрос);
	Если Ответ.КодСостояния = 200 Тогда 
		Чтение = Новый ЧтениеJSON();
		Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ПрочитанныйОтвет = ПрочитатьJSON(Чтение);
		Чтение.Закрыть();
		Возврат ПрочитанныйОтвет;
	Иначе
		ВызватьИсключение 	Ответ.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
КонецФункции

Функция ОтправитьGETЗапрос(Хост, Адрес, Защищенное)
	
	Если Защищенное Тогда
		
		Сертификат = Новый ЗащищенноеСоединениеOpenSSL();
		Соединение = Новый HTTPСоединение(Хост,,,,,60, Сертификат);
		
	Иначе
		
		Соединение = Новый HTTPСоединение(Хост,,,,,60);
		
	КонецЕсли;
	
	ВебЗапрос = Новый HTTPЗапрос(Адрес);
	Ответ = Соединение.Получить(ВебЗапрос);
	Если Ответ.КодСостояния = 200 Тогда
		ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
		Если Не ПустаяСтрока(ТелоОтвета) Тогда
			Чтение = Новый ЧтениеJSON();
			Чтение.УстановитьСтроку(ТелоОтвета);
			ПрочитанныйОтвет = ПрочитатьJSON(Чтение);
			Чтение.Закрыть();
			Возврат ПрочитанныйОтвет;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		ТекстОшибки = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		ВызватьИсключение ПодставитьПараметрыВСтроку("Сервер вернул статус %1. 
		|%2", Ответ.КодСостояния, ТекстОшибки);
	КонецЕсли;
	
КонецФункции

Функция ОтправитьPOSTЗапрос(Хост, Адрес, Тело)
	
	Сертификат = Новый ЗащищенноеСоединениеOpenSSL();
	Соединение = Новый HTTPСоединение(Хост,,,,,60, Сертификат);
	
	ВебЗапрос = Новый HTTPЗапрос(Адрес);
	ВебЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	
	ВебЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ = Соединение.ОтправитьДляОбработки(ВебЗапрос);
	Если Ответ.КодСостояния = 200 Тогда
		Чтение = Новый ЧтениеJSON();
		Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ПрочитанныйОтвет = ПрочитатьJSON(Чтение);
		Чтение.Закрыть();
		Возврат ПрочитанныйОтвет;
	Иначе
		ТекстОшибки = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		ВызватьИсключение ПодставитьПараметрыВСтроку("Сервер вернул статус %1. 
		|%2", Ответ.КодСостояния, ТекстОшибки);
	КонецЕсли;
	
КонецФункции

Функция ОтправитьDELETEЗапрос(Хост, Адрес, Защищенное)
	
	Если Защищенное Тогда
		
		Сертификат = Новый ЗащищенноеСоединениеOpenSSL();
		Соединение = Новый HTTPСоединение(Хост,,,,,60, Сертификат);
		
	Иначе
		
		Соединение = Новый HTTPСоединение(Хост,,,,,60);
		
	КонецЕсли;
	
	ВебЗапрос = Новый HTTPЗапрос(Адрес);
	Ответ = Соединение.ВызватьHTTPМетод("DELETE", ВебЗапрос);
	Если Ответ.КодСостояния = 200 Тогда
		Чтение = Новый ЧтениеJSON();
		Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ПрочитанныйОтвет = ПрочитатьJSON(Чтение);
		Чтение.Закрыть();
		Возврат ПрочитанныйОтвет;
	Иначе
		ТекстОшибки = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		ВызватьИсключение ПодставитьПараметрыВСтроку("Сервер вернул статус %1. 
		|%2", Ответ.КодСостояния, ТекстОшибки);
	КонецЕсли;
	
КонецФункции

// РАБОТА С FORM-DATA

Функция ПараметрFormData(ИмяСообщения, Текст)
	Поток = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(Поток);
	// Заголовки
	ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""" + ИмяСообщения + """");
	ЗаписьДанных.ЗаписатьСтроку("");
	// Тело
	ЗаписьДанных.ЗаписатьСтроку(Текст);
	ЗаписьДанных.Закрыть();
	Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
КонецФункции

Функция ФайлFormData(ИмяСообщения, ПутьКФайлу, ДвоичныеДанные)
	
	Файл = Новый Файл(ПутьКФайлу);
	Если Не Файл.Существует() Тогда
		ВызватьИсключение "Файл не существует! Адрес: " +  ПутьКФайлу;
	КонецЕсли;
	
	
	Поток = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(Поток);
	// Заголовки
	ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""" + ИмяСообщения + """; filename=""" + Файл.Имя + """");
	ЗаписьДанных.ЗаписатьСтроку("Content-Type: " + ПолучитьMimeTypeПоРасширению(Файл.Расширение));
	ЗаписьДанных.ЗаписатьСтроку("");
	// Тело
	ЗаписьДанных.Записать(ДвоичныеДанные);
	ЗаписьДанных.Закрыть();

	Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСтатусСервиса(ТекстОшибки = "") Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Попытка
		Ответ = ПолучитьСостояниеАккаунта();
		Авторизован = НРег(Ответ.stateInstance) = "authorized";
		Если Не Авторизован Тогда
			ТекстОшибки = "Сервер вернул статус, " + Ответ.stateInstance;
		КонецЕсли;
		Возврат Ответ.stateInstance;
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат "error";
	КонецПопытки;
	
КонецФункции

Функция УстановитьНастройкуСервиса(Ключ, Значение) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить(Ключ, Значение);
	
	Тело = СериализоватьВJSONСтроку(Структура);
	
	Ответ = ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "setSettings"), Тело);
	Возврат Ответ.saveSettings;
	
КонецФункции

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры,
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение,
//  Строка   - текстовая строка с подставленными параметрами.
//
// Пример,
//  ПодставитьПараметрыВСтроку(НСтр("ru="%1 пошел в %2""), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
//
// Примечание,
//  В случаях, когда число используемых параметров в строке совпадает с числом переданных для подстановки параметров,
//  рекомендуется использовать функцию платформы СтрШаблон.
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	
	Возврат СтрокаПодстановки;
КонецФункции

Функция ХостПоУмолчанию() Экспорт
	Возврат "api.green-api.com";
КонецФункции

Функция ХостВебхуковПоУмолчанию() Экспорт
	Возврат "";
КонецФункции

Функция URLМетодаСервиса(Инстанс, Токен, Метод)
	Возврат ПодставитьПараметрыВСтроку("waInstance%1/%2/%3", Инстанс, Метод, Токен);
КонецФункции

Функция РазбитьURL(УРЛ)
	ЧастиУРЛ = СтрРазделить(УРЛ, "//", Ложь);
	Хост = ЧастиУРЛ[1];
	ЧастиУРЛ.Удалить(0); // протокол https
	ЧастиУРЛ.Удалить(0); // имя хоста
	ОтносительныйАдрес = СтрСоединить(ЧастиУРЛ, "/");
	
	Возврат Новый Структура("Хост, ОтносительныйАдрес", Хост, ОтносительныйАдрес);
	
КонецФункции

Функция ПараметрИдЧата(Телефон)
	Возврат Формат(Число(Телефон), "ЧГ=") + "@c.us"
КонецФункции

Функция ВерсияОбработки() Экспорт
	Возврат "Green API v0.0.36";
КонецФункции

Функция УстановитьНастройкиСервисаПоДефолту() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("webhookUrl", ХостВебхуковПоУмолчанию());
	Структура.Вставить("webhookUrlToken", "");
	Структура.Вставить("outgoingWebhook", "yes");
	Структура.Вставить("outgoingMessageWebhook", "yes");
	Структура.Вставить("stateWebhook", "yes");
	Структура.Вставить("incomingWebhook", "yes");
	Структура.Вставить("deviceWebhook", "yes");	
	Структура.Вставить("statusInstanceWebhook", "yes");	
	
	Возврат УстановитьНастройкиАккаунта(Структура).saveSettings;
	
КонецФункции

#КонецОбласти

#Область JSON

Функция СериализоватьВJSONСтроку(Данные) Экспорт
	
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Данные);
	СтрокаJSON = Запись.Закрыть();
	Возврат СтрЗаменить(СтрокаJSON, "\\", "\"); // Для emodji в формате UTF-16 "\ud83d\ude00"
	
КонецФункции

#КонецОбласти

#Область MimeTypes

Функция ПолучитьРасширениеПоMimeType(ИскомыйТип)
	
	Типы = СоответствиеMimeTypes();
	
	Для каждого КлючЗначение Из Типы Цикл
		Если СтрНайти(НРег(ИскомыйТип), НРег(КлючЗначение.Значение)) <> 0 Тогда
			Возврат КлючЗначение.Ключ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьMimeTypeПоРасширению(ИскомоеРасширение)
	
	Типы = СоответствиеMimeTypes();
	
	Если Не ЗначениеЗаполнено(ИскомоеРасширение) Тогда
		Возврат Типы.Получить(".bin");
	КонецЕсли;
	
	Для каждого КлючЗначение Из Типы Цикл
		Если СтрНайти(НРег(ИскомоеРасширение), НРег(КлючЗначение.Ключ)) <> 0 Тогда
			Возврат КлючЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Типы.Получить(".bin");
	
КонецФункции

Функция СоответствиеMimeTypes() 

	Типы = Новый Соответствие;
	
	Типы.Вставить(".js",      "application/javascript");
	Типы.Вставить(".mjs",     "application/javascript");
	Типы.Вставить(".json",    "application/json");
	Типы.Вставить(".webmanifest", "application/manifest+json");
	Типы.Вставить(".doc",     "application/msword");
	Типы.Вставить(".dot",     "application/msword");
	Типы.Вставить(".wiz",     "application/msword");
	Типы.Вставить(".nq",      "application/n-quads");
	Типы.Вставить(".nt",      "application/n-triples");
	Типы.Вставить(".bin",     "application/octet-stream");
	Типы.Вставить(".a",       "application/octet-stream");
	Типы.Вставить(".dll",     "application/octet-stream");
	Типы.Вставить(".exe",     "application/octet-stream");
	Типы.Вставить(".o",       "application/octet-stream");
	Типы.Вставить(".obj",     "application/octet-stream");
	Типы.Вставить(".so",      "application/octet-stream");
	Типы.Вставить(".oda",     "application/oda");
	Типы.Вставить(".pdf",     "application/pdf");
	Типы.Вставить(".p7c",     "application/pkcs7-mime");
	Типы.Вставить(".ps",      "application/postscript");
	Типы.Вставить(".ai",      "application/postscript");
	Типы.Вставить(".eps",     "application/postscript");
	Типы.Вставить(".trig",    "application/trig");
	Типы.Вставить(".m3u",     "application/vnd.apple.mpegurl");
	Типы.Вставить(".m3u8",    "application/vnd.apple.mpegurl");
	Типы.Вставить(".xls",     "application/vnd.ms-excel");
	Типы.Вставить(".xlb",     "application/vnd.ms-excel");
	Типы.Вставить(".ppt",     "application/vnd.ms-powerpoint");
	Типы.Вставить(".pot",     "application/vnd.ms-powerpoint");
	Типы.Вставить(".ppa",     "application/vnd.ms-powerpoint");
	Типы.Вставить(".pps",     "application/vnd.ms-powerpoint");
	Типы.Вставить(".pwz",     "application/vnd.ms-powerpoint");
	Типы.Вставить(".wasm",    "application/wasm");
	Типы.Вставить(".bcpio",   "application/x-bcpio");
	Типы.Вставить(".cpio",    "application/x-cpio");
	Типы.Вставить(".csh",     "application/x-csh");
	Типы.Вставить(".dvi",     "application/x-dvi");
	Типы.Вставить(".gtar",    "application/x-gtar");
	Типы.Вставить(".hdf",     "application/x-hdf");
	Типы.Вставить(".h5",      "application/x-hdf5");
	Типы.Вставить(".latex",   "application/x-latex");
	Типы.Вставить(".mif",     "application/x-mif");
	Типы.Вставить(".cdf",     "application/x-netcdf");
	Типы.Вставить(".nc",      "application/x-netcdf");
	Типы.Вставить(".p12",     "application/x-pkcs12");
	Типы.Вставить(".pfx",     "application/x-pkcs12");
	Типы.Вставить(".ram",     "application/x-pn-realaudio");
	Типы.Вставить(".pyc",     "application/x-python-code");
	Типы.Вставить(".pyo",     "application/x-python-code");
	Типы.Вставить(".sh",      "application/x-sh");
	Типы.Вставить(".shar",    "application/x-shar");
	Типы.Вставить(".swf",     "application/x-shockwave-flash");
	Типы.Вставить(".sv4cpio", "application/x-sv4cpio");
	Типы.Вставить(".sv4crc",  "application/x-sv4crc");
	Типы.Вставить(".tar",     "application/x-tar");
	Типы.Вставить(".tcl",     "application/x-tcl");
	Типы.Вставить(".tex",     "application/x-tex");
	Типы.Вставить(".texi",    "application/x-texinfo");
	Типы.Вставить(".texinfo", "application/x-texinfo");
	Типы.Вставить(".roff",    "application/x-troff");
	Типы.Вставить(".t",       "application/x-troff");
	Типы.Вставить(".tr",      "application/x-troff");
	Типы.Вставить(".man",     "application/x-troff-man");
	Типы.Вставить(".me",      "application/x-troff-me");
	Типы.Вставить(".ms",      "application/x-troff-ms");
	Типы.Вставить(".ustar",   "application/x-ustar");
	Типы.Вставить(".src",     "application/x-wais-source");
	Типы.Вставить(".xsl",     "application/xml");
	Типы.Вставить(".rdf",     "application/xml");
	Типы.Вставить(".wsdl",    "application/xml");
	Типы.Вставить(".xpdl",    "application/xml");
	Типы.Вставить(".zip",     "application/zip");
	Типы.Вставить(".3gp",     "audio/3gpp");
	Типы.Вставить(".3gpp",    "audio/3gpp");
	Типы.Вставить(".3g2",     "audio/3gpp2");
	Типы.Вставить(".3gpp2",   "audio/3gpp2");
	Типы.Вставить(".aac",     "audio/aac");
	Типы.Вставить(".adts",    "audio/aac");
	Типы.Вставить(".loas",    "audio/aac");
	Типы.Вставить(".ass",     "audio/aac");
	Типы.Вставить(".au",      "audio/basic");
	Типы.Вставить(".snd",     "audio/basic");
	Типы.Вставить(".mp3",     "audio/mpeg");
	Типы.Вставить(".mp2",     "audio/mpeg");
	Типы.Вставить(".opus",    "audio/opus");
	Типы.Вставить(".aif",     "audio/x-aiff");
	Типы.Вставить(".aifc",    "audio/x-aiff");
	Типы.Вставить(".aiff",    "audio/x-aiff");
	Типы.Вставить(".ra",      "audio/x-pn-realaudio");
	Типы.Вставить(".wav",     "audio/x-wav");
	Типы.Вставить(".avif",    "image/avif");
	Типы.Вставить(".bmp",     "image/bmp");
	Типы.Вставить(".gif",     "image/gif");
	Типы.Вставить(".ief",     "image/ief");
	Типы.Вставить(".jpg",     "image/jpeg");
	Типы.Вставить(".jpe",     "image/jpeg");
	Типы.Вставить(".jpeg",    "image/jpeg");
	Типы.Вставить(".heic",    "image/heic");
	Типы.Вставить(".heif",    "image/heif");
	Типы.Вставить(".png",     "image/png");
	Типы.Вставить(".svg",     "image/svg+xml");
	Типы.Вставить(".tiff",    "image/tiff");
	Типы.Вставить(".tif",     "image/tiff");
	Типы.Вставить(".ico",     "image/vnd.microsoft.icon");
	Типы.Вставить(".ras",     "image/x-cmu-raster");
	Типы.Вставить(".pnm",     "image/x-portable-anymap");
	Типы.Вставить(".pbm",     "image/x-portable-bitmap");
	Типы.Вставить(".pgm",     "image/x-portable-graymap");
	Типы.Вставить(".ppm",     "image/x-portable-pixmap");
	Типы.Вставить(".rgb",     "image/x-rgb");
	Типы.Вставить(".xbm",     "image/x-xbitmap");
	Типы.Вставить(".xpm",     "image/x-xpixmap");
	Типы.Вставить(".xwd",     "image/x-xwindowdump");
	Типы.Вставить(".eml",     "message/rfc822");
	Типы.Вставить(".mht",     "message/rfc822");
	Типы.Вставить(".mhtml",   "message/rfc822");
	Типы.Вставить(".nws",     "message/rfc822");
	Типы.Вставить(".css",     "text/css");
	Типы.Вставить(".csv",     "text/csv");
	Типы.Вставить(".html",    "text/html");
	Типы.Вставить(".htm",     "text/html");
	Типы.Вставить(".n3",      "text/n3");
	Типы.Вставить(".txt",     "text/plain");
	Типы.Вставить(".bat",     "text/plain");
	Типы.Вставить(".c",       "text/plain");
	Типы.Вставить(".h",       "text/plain");
	Типы.Вставить(".ksh",     "text/plain");
	Типы.Вставить(".pl",      "text/plain");
	Типы.Вставить(".srt",     "text/plain");
	Типы.Вставить(".rtx",     "text/richtext");
	Типы.Вставить(".tsv",     "text/tab-separated-values");
	Типы.Вставить(".vtt",     "text/vtt");
	Типы.Вставить(".py",      "text/x-python");
	Типы.Вставить(".etx",     "text/x-setext");
	Типы.Вставить(".sgm",     "text/x-sgml");
	Типы.Вставить(".sgml",    "text/x-sgml");
	Типы.Вставить(".vcf",     "text/x-vcard");
	Типы.Вставить(".xml",     "text/xml");
	Типы.Вставить(".mp4",     "video/mp4");
	Типы.Вставить(".mpeg",    "video/mpeg");
	Типы.Вставить(".m1v",     "video/mpeg");
	Типы.Вставить(".mpa",     "video/mpeg");
	Типы.Вставить(".mpe",     "video/mpeg");
	Типы.Вставить(".mpg",     "video/mpeg");
	Типы.Вставить(".mov",     "video/quicktime");
	Типы.Вставить(".qt",      "video/quicktime");
	Типы.Вставить(".webm",    "video/webm");
	Типы.Вставить(".avi",     "video/x-msvideo");
	Типы.Вставить(".movie",   "video/x-sgi-movie");
	
	Возврат Типы;
	
КонецФункции

Функция ЭтоКартинкаИлиВидео(ПутьКФайлу) 
	
	Файл = Новый Файл(ПутьКФайлу);
	Если Не Файл.Существует() Тогда
		ВызватьИсключение "Файл не существует! Адрес: " +  ПутьКФайлу;
	КонецЕсли;
	
	ТипMime = ПолучитьMimeTypeПоРасширению(Файл.Расширение);
	Если СтрНачинаетсяС(ТипMime, "image") Или СтрНачинаетсяС(ТипMime, "video") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

#КонецОбласти
